make[1]: Entering directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/x264'
./runEnablers.sh x264 x264.bc simlarge "-lm -lstdc++ -lpthread -L../../parsec-3.0/pkgs/apps/x264/inst/amd64-linux.gclang/lib -lx264 -L/usr/lib64 -L/usr/lib" -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/x264 /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/x264
Cloning https://github.com/scampanoni/virgil.git
Cloning into 'threadpool'...
/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/x264

opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs x264.bc -o baseline.bc
Running: ./baseline_prof --quiet --qp 20 --partitions b8x8,i4x4 --ref 5 --direct auto --b-pyramid --weightb --mixed-refs --no-fast-pskip --me umh --subme 7 --analyse b8x8,i4x4 --threads 1 -o eledream.264 eledream_640x360_128.y4m in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/x264
PARSEC Benchmark Suite Version 3.0-beta-20150206
yuv4mpeg: 640x360@25/1fps, 0:0

encoded 128 frames, 18.26 fps, 12167.90 kb/s
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.3H1ptEodjW -block-freq -pgo-instr-use baseline.bc -o baseline_pre.bc
opt --strip-debug --strip-debug-declare baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.s8vPxgsf77 (.ll version is /tmp/tmp.8w5n1d9rHN)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.UzwWiIMxWj (.ll version is /tmp/tmp.tyY8NX9IMW)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.s8vPxgsf77 -o /tmp/tmp.UzwWiIMxWj
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.s8vPxgsf77 -o /tmp/tmp.UzwWiIMxWj
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.s8vPxgsf77 -o /tmp/tmp.UzwWiIMxWj
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.s8vPxgsf77 -o /tmp/tmp.UzwWiIMxWj
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       main
DeadFunctionEliminator:       pixel_avg_weight_wxh
DeadFunctionEliminator:       pixel_avg
DeadFunctionEliminator:       x264_frame_filter
DeadFunctionEliminator:       x264_predict_8x8_filter
DeadFunctionEliminator:       x264_predict_16x16_init
DeadFunctionEliminator:       predict_16x16_v
DeadFunctionEliminator:       predict_16x16_h
DeadFunctionEliminator:       predict_16x16_dc
DeadFunctionEliminator:       predict_16x16_p
DeadFunctionEliminator:       predict_16x16_dc_left
DeadFunctionEliminator:       predict_16x16_dc_top
DeadFunctionEliminator:       predict_16x16_dc_128
DeadFunctionEliminator:       x264_clip_uint8.650
DeadFunctionEliminator:       x264_predict_8x8c_init
DeadFunctionEliminator:       predict_8x8c_v
DeadFunctionEliminator:       predict_8x8c_h
DeadFunctionEliminator:       predict_8x8c_dc
DeadFunctionEliminator:       x264_picture_clean
DeadFunctionEliminator:       x264_free
DeadFunctionEliminator:       x264_nal_encode
DeadFunctionEliminator:       x264_realloc
DeadFunctionEliminator:       x264_reduce_fraction
DeadFunctionEliminator:       x264_slurp_file
DeadFunctionEliminator:       ftell
DeadFunctionEliminator:       x264_param2string
DeadFunctionEliminator:       x264_mdate
DeadFunctionEliminator:       gettimeofday
DeadFunctionEliminator:       x264_encoder_open
DeadFunctionEliminator:       x264_validate_parameters
DeadFunctionEliminator:       mbcmp_init
DeadFunctionEliminator:       llvm.pow.f64
DeadFunctionEliminator:       x264_clip3.593
DeadFunctionEliminator:       x264_clip3f
DeadFunctionEliminator:       llvm.log.f64
DeadFunctionEliminator:       x264_quant_8x8_ssse3
DeadFunctionEliminator:       x264_denoise_dct_ssse3
DeadFunctionEliminator:       x264_decimate_score15_ssse3
DeadFunctionEliminator:       x264_decimate_score16_ssse3
DeadFunctionEliminator:       x264_decimate_score64_ssse3
DeadFunctionEliminator:       x264_coeff_last_internal
DeadFunctionEliminator:       x264_decimate_score_internal
DeadFunctionEliminator:       x264_rd_cost_part
DeadFunctionEliminator:       x264_rd_cost_mb
DeadFunctionEliminator:       x264_rd_cost_subpart
DeadFunctionEliminator:       ssd_plane
DeadFunctionEliminator:       x264_partition_size_cabac
DeadFunctionEliminator:       x264_partition_size_cavlc
DeadFunctionEliminator:       cavlc_mb8x8_mvd
DeadFunctionEliminator:       cavlc_mb_mvd
DeadFunctionEliminator:       x264_macroblock_luma_write_cavlc
DeadFunctionEliminator:       array_non_zero_count_mmx
DeadFunctionEliminator:       block_residual_write_cavlc
DeadFunctionEliminator:       x264_mb_predict_non_zero_code
DeadFunctionEliminator:       bs_write_vlc
DeadFunctionEliminator:       bs_size_se
DeadFunctionEliminator:       bs_size_ue_big
DeadFunctionEliminator:       x264_cabac_mb8x8_mvd
DeadFunctionEliminator:       x264_cabac_mb_mvd
DeadFunctionEliminator:       block_residual_write_cabac
DeadFunctionEliminator:       array_non_zero_int_mmx
DeadFunctionEliminator:       array_non_zero_int_c
DeadFunctionEliminator:       x264_cabac_mb_cbf_ctxidxinc
DeadFunctionEliminator:       x264_cabac_size_decision
DeadFunctionEliminator:       x264_cabac_mb_mvd_cpn
DeadFunctionEliminator:       pack16to32_mask.785
DeadFunctionEliminator:       x264_macroblock_cache_mvd
DeadFunctionEliminator:       x264_macroblock_cache_rect4.786
DeadFunctionEliminator:       sum_satd
DeadFunctionEliminator:       sum_sa8d
DeadFunctionEliminator:       x264_subpartition_size_cabac
DeadFunctionEliminator:       x264_subpartition_size_cavlc
DeadFunctionEliminator:       ssd_mb
DeadFunctionEliminator:       x264_macroblock_size_cabac
DeadFunctionEliminator:       x264_macroblock_size_cavlc
DeadFunctionEliminator:       bs_size_ue
DeadFunctionEliminator:       x264_mb_predict_intra4x4_mode
DeadFunctionEliminator:       bs_size_te
DeadFunctionEliminator:       x264_mb_transform_8x8_allowed
DeadFunctionEliminator:       cavlc_qp_delta
DeadFunctionEliminator:       x264_cabac_mb_type
DeadFunctionEliminator:       x264_cabac_mb_transform_size
DeadFunctionEliminator:       x264_cabac_mb_intra4x4_pred_mode
DeadFunctionEliminator:       x264_cabac_mb_intra_chroma_pred_mode
DeadFunctionEliminator:       x264_cabac_mb_ref
DeadFunctionEliminator:       x264_cabac_mb_sub_p_partition
DeadFunctionEliminator:       x264_cabac_mb_sub_b_partition
DeadFunctionEliminator:       x264_cabac_mb_cbp_luma
DeadFunctionEliminator:       x264_cabac_mb_cbp_chroma
DeadFunctionEliminator:       x264_cabac_mb_qp_delta
DeadFunctionEliminator:       x264_cabac_size_decision_noup
DeadFunctionEliminator:       x264_cabac_mb_type_intra
DeadFunctionEliminator:       x264_rdo_init
DeadFunctionEliminator:       x264_cabac_size_decision2
DeadFunctionEliminator:       x264_quant_dc_trellis
DeadFunctionEliminator:       quant_trellis_cabac
DeadFunctionEliminator:       x264_cabac_size_decision_noup2
DeadFunctionEliminator:       x264_quant_4x4_trellis
DeadFunctionEliminator:       x264_quant_8x8_trellis
DeadFunctionEliminator:       x264_macroblock_analyse
DeadFunctionEliminator:       x264_mb_analyse_init
DeadFunctionEliminator:       x264_mb_cache_fenc_satd
DeadFunctionEliminator:       x264_mb_analyse_intra
DeadFunctionEliminator:       x264_intra_rd
DeadFunctionEliminator:       x264_intra_rd_refine
DeadFunctionEliminator:       x264_macroblock_probe_pskip
DeadFunctionEliminator:       x264_mb_analyse_load_costs
DeadFunctionEliminator:       x264_mb_analyse_inter_p16x16
DeadFunctionEliminator:       x264_mb_analyse_inter_p8x8_mixed_ref
DeadFunctionEliminator:       x264_mb_analyse_inter_p8x8
DeadFunctionEliminator:       x264_mb_analyse_inter_p4x4
DeadFunctionEliminator:       x264_mb_analyse_inter_b8x16
DeadFunctionEliminator:       x264_refine_bidir
DeadFunctionEliminator:       x264_mb_analyse_transform
DeadFunctionEliminator:       x264_psy_trellis_init
DeadFunctionEliminator:       x264_me_search
DeadFunctionEliminator:       x264_mb_cache_mv_b8x16
DeadFunctionEliminator:       x264_macroblock_cache_mv.800
DeadFunctionEliminator:       x264_mb_cache_mv_b16x8
DeadFunctionEliminator:       x264_mb_cache_mv_b8x8
DeadFunctionEliminator:       x264_macroblock_cache_skip
DeadFunctionEliminator:       x264_macroblock_cache_rect1.801
DeadFunctionEliminator:       x264_macroblock_cache_intra8x8_pred
DeadFunctionEliminator:       predict_8x8chroma_mode_available
DeadFunctionEliminator:       x264_mb_analyse_inter_p4x4_chroma
DeadFunctionEliminator:       predict_16x16_mode_available
DeadFunctionEliminator:       predict_4x4_mode_available
DeadFunctionEliminator:       x264_rd_cost_i4x4
DeadFunctionEliminator:       x264_rd_cost_i8x8
DeadFunctionEliminator:       x264_rd_cost_i8x8_chroma
DeadFunctionEliminator:       x264_i8x8_chroma_size_cabac
DeadFunctionEliminator:       x264_i8x8_chroma_size_cavlc
DeadFunctionEliminator:       x264_partition_i8x8_size_cabac
DeadFunctionEliminator:       x264_partition_i8x8_size_cavlc
DeadFunctionEliminator:       open_file_bsf
DeadFunctionEliminator:       set_param_bsf
DeadFunctionEliminator:       write_nalu_bsf
DeadFunctionEliminator:       set_eop_bsf
DeadFunctionEliminator:       close_file_bsf
DeadFunctionEliminator:       open_file_mkv
DeadFunctionEliminator:       x264_emms
DeadFunctionEliminator:       x264_cpu_mask_misalign_sse
DeadFunctionEliminator:       x264_slice_write
DeadFunctionEliminator:       x264_slice_header_write
DeadFunctionEliminator:       bs_align_1
DeadFunctionEliminator:       x264_cabac_pos
DeadFunctionEliminator:       x264_fdec_filter_row
DeadFunctionEliminator:       x264_bitstream_check_buffer
DeadFunctionEliminator:       set_param_mkv
DeadFunctionEliminator:       gcd
DeadFunctionEliminator:       write_nalu_mkv
DeadFunctionEliminator:       write_header_mkv
DeadFunctionEliminator:       set_eop_mkv
DeadFunctionEliminator:       close_file_mkv
DeadFunctionEliminator:       x264_param_default
DeadFunctionEliminator:       x264_log_default
DeadFunctionEliminator:       vfprintf
DeadFunctionEliminator:       x264_param_parse
DeadFunctionEliminator:       strdup
DeadFunctionEliminator:       x264_atobool
DeadFunctionEliminator:       __ctype_b_loc
DeadFunctionEliminator:       x264_atoi
DeadFunctionEliminator:       strtok_r
DeadFunctionEliminator:       strcasecmp
DeadFunctionEliminator:       x264_atof
DeadFunctionEliminator:       parse_enum
DeadFunctionEliminator:       strstr
DeadFunctionEliminator:       parse_cqm
DeadFunctionEliminator:       zigzag_scan_8x8_frame
DeadFunctionEliminator:       zigzag_scan_4x4_frame
DeadFunctionEliminator:       zigzag_sub_8x8_frame
DeadFunctionEliminator:       zigzag_sub_4x4_frame
DeadFunctionEliminator:       x264_zigzag_scan_4x4_frame_mmx
DeadFunctionEliminator:       x264_zigzag_scan_8x8_frame_mmxext
DeadFunctionEliminator:       x264_zigzag_scan_8x8_frame_sse2
DeadFunctionEliminator:       x264_zigzag_sub_4x4_frame_ssse3
DeadFunctionEliminator:       x264_zigzag_scan_8x8_frame_ssse3
DeadFunctionEliminator:       x264_zigzag_scan_4x4_frame_ssse3
DeadFunctionEliminator:       zigzag_interleave_8x8_cavlc
DeadFunctionEliminator:       x264_zigzag_interleave_8x8_cavlc_mmx
DeadFunctionEliminator:       x264_cpu_detect
DeadFunctionEliminator:       x264_cpu_cpuid
DeadFunctionEliminator:       x264_cpu_num_processors
DeadFunctionEliminator:       x264_cabac_context_init
DeadFunctionEliminator:       x264_clip3.748
DeadFunctionEliminator:       x264_cabac_encode_init
DeadFunctionEliminator:       x264_cabac_encode_decision_c
DeadFunctionEliminator:       x264_cabac_encode_renorm
DeadFunctionEliminator:       x264_cabac_putbyte
DeadFunctionEliminator:       x264_cabac_encode_bypass
DeadFunctionEliminator:       x264_cabac_encode_ue_bypass
DeadFunctionEliminator:       x264_cabac_encode_terminal
DeadFunctionEliminator:       x264_cabac_encode_flush
DeadFunctionEliminator:       x264_cqm_init
DeadFunctionEliminator:       x264_cqm_delete
DeadFunctionEliminator:       x264_cqm_parse_file
DeadFunctionEliminator:       strcspn
DeadFunctionEliminator:       x264_cqm_parse_jmlist
DeadFunctionEliminator:       strpbrk
DeadFunctionEliminator:       x264_quant_init
DeadFunctionEliminator:       quant_8x8
DeadFunctionEliminator:       quant_4x4
DeadFunctionEliminator:       quant_4x4_dc
DeadFunctionEliminator:       quant_2x2_dc
DeadFunctionEliminator:       dequant_4x4
DeadFunctionEliminator:       dequant_4x4_dc
DeadFunctionEliminator:       dequant_8x8
DeadFunctionEliminator:       x264_denoise_dct
DeadFunctionEliminator:       x264_decimate_score15
DeadFunctionEliminator:       x264_decimate_score16
DeadFunctionEliminator:       x264_decimate_score64
DeadFunctionEliminator:       x264_coeff_last4
DeadFunctionEliminator:       x264_coeff_last15
DeadFunctionEliminator:       x264_coeff_last16
DeadFunctionEliminator:       x264_coeff_last64
DeadFunctionEliminator:       x264_quant_2x2_dc_mmxext
DeadFunctionEliminator:       x264_coeff_last4_mmxext
DeadFunctionEliminator:       x264_quant_4x4_dc_sse2
DeadFunctionEliminator:       x264_quant_4x4_sse2
DeadFunctionEliminator:       x264_quant_8x8_sse2
DeadFunctionEliminator:       x264_dequant_4x4_sse2
DeadFunctionEliminator:       x264_dequant_4x4dc_sse2
DeadFunctionEliminator:       x264_dequant_8x8_sse2
DeadFunctionEliminator:       x264_dequant_4x4_flat16_sse2
DeadFunctionEliminator:       x264_dequant_8x8_flat16_sse2
DeadFunctionEliminator:       x264_denoise_dct_sse2
DeadFunctionEliminator:       x264_decimate_score15_sse2
DeadFunctionEliminator:       x264_decimate_score16_sse2
DeadFunctionEliminator:       x264_decimate_score64_sse2
DeadFunctionEliminator:       x264_coeff_last15_sse2
DeadFunctionEliminator:       x264_coeff_last16_sse2
DeadFunctionEliminator:       x264_coeff_last64_sse2
DeadFunctionEliminator:       x264_quant_2x2_dc_ssse3
DeadFunctionEliminator:       x264_quant_4x4_dc_ssse3
DeadFunctionEliminator:       x264_quant_4x4_ssse3
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       fflush
DeadFunctionEliminator:       Parse
DeadFunctionEliminator:       SigIntHandler
DeadFunctionEliminator:       signal
DeadFunctionEliminator:       Encode
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       x264_clip3
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       parse_qpfile
DeadFunctionEliminator:       Encode_frame
DeadFunctionEliminator:       sprintf
DeadFunctionEliminator:       ftello
DeadFunctionEliminator:       __isoc99_fscanf
DeadFunctionEliminator:       fseeko
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       getopt_long
DeadFunctionEliminator:       Help
DeadFunctionEliminator:       atoi
DeadFunctionEliminator:       mk_flushContextID
DeadFunctionEliminator:       strlen
DeadFunctionEliminator:       strncasecmp
DeadFunctionEliminator:       strcmp
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       __isoc99_sscanf
DeadFunctionEliminator:       strtol
DeadFunctionEliminator:       strtable_lookup
DeadFunctionEliminator:       mk_createWriter
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:       mk_createContext
DeadFunctionEliminator:       free
DeadFunctionEliminator:       mk_destroyContexts
DeadFunctionEliminator:       mk_writeHeader
DeadFunctionEliminator:       mk_writeUInt
DeadFunctionEliminator:       mk_writeStr
DeadFunctionEliminator:       mk_closeContext
DeadFunctionEliminator:       mk_writeFloat
DeadFunctionEliminator:       mk_writeBin
DeadFunctionEliminator:       mk_flushContextData
DeadFunctionEliminator:       mk_appendContextData
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       realloc
DeadFunctionEliminator:       mk_writeID
DeadFunctionEliminator:       x264_clip3.467
DeadFunctionEliminator:       strtod
DeadFunctionEliminator:       x264_log
DeadFunctionEliminator:       llvm.va_start
DeadFunctionEliminator:       llvm.va_end
DeadFunctionEliminator:       x264_picture_alloc
DeadFunctionEliminator:       x264_malloc
DeadFunctionEliminator:       memalign
DeadFunctionEliminator:       mk_writeSize
DeadFunctionEliminator:       mk_writeFloatRaw
DeadFunctionEliminator:       mk_startFrame
DeadFunctionEliminator:       mk_flushFrame
DeadFunctionEliminator:       mk_closeCluster
DeadFunctionEliminator:       mk_ebmlSizeSize
DeadFunctionEliminator:       mk_ebmlSIntSize
DeadFunctionEliminator:       mk_writeSInt
DeadFunctionEliminator:       mk_setFrameFlags
DeadFunctionEliminator:       mk_addFrameData
DeadFunctionEliminator:       mk_close
DeadFunctionEliminator:       fseek
DeadFunctionEliminator:       open_file_yuv
DeadFunctionEliminator:       fopen64
DeadFunctionEliminator:       get_frame_total_yuv
DeadFunctionEliminator:       fseeko64
DeadFunctionEliminator:       ftello64
DeadFunctionEliminator:       read_frame_yuv
DeadFunctionEliminator:       fread
DeadFunctionEliminator:       close_file_yuv
DeadFunctionEliminator:       open_file_y4m
DeadFunctionEliminator:       fgetc
DeadFunctionEliminator:       strncmp
DeadFunctionEliminator:       strchr
DeadFunctionEliminator:       get_frame_total_y4m
DeadFunctionEliminator:       read_frame_y4m
DeadFunctionEliminator:       close_file_y4m
DeadFunctionEliminator:       x264_encoder_reconfig
DeadFunctionEliminator:       x264_encoder_headers
DeadFunctionEliminator:       bs_init
DeadFunctionEliminator:       x264_nal_start
DeadFunctionEliminator:       x264_nal_end
DeadFunctionEliminator:       bs_pos
DeadFunctionEliminator:       endian_fix
DeadFunctionEliminator:       x264_encoder_encode
DeadFunctionEliminator:       x264_thread_sync_context
DeadFunctionEliminator:       x264_reference_update
DeadFunctionEliminator:       x264_encoder_frame_end
DeadFunctionEliminator:       x264_reference_reset
DeadFunctionEliminator:       x264_reference_build_list
DeadFunctionEliminator:       x264_slice_init
DeadFunctionEliminator:       bs_write
DeadFunctionEliminator:       bs_rbsp_trailing
DeadFunctionEliminator:       x264_slices_write
DeadFunctionEliminator:       x264_pixel_sad_16x16
DeadFunctionEliminator:       x264_pixel_sad_16x8
DeadFunctionEliminator:       x264_pixel_sad_8x16
DeadFunctionEliminator:       x264_pixel_sad_8x8
DeadFunctionEliminator:       x264_pixel_sad_8x4
DeadFunctionEliminator:       x264_pixel_sad_4x8
DeadFunctionEliminator:       x264_pixel_sad_4x4
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8
DeadFunctionEliminator:       x264_pixel_sad_x3_8x16
DeadFunctionEliminator:       x264_pixel_sad_x3_8x8
DeadFunctionEliminator:       x264_pixel_sad_x3_8x4
DeadFunctionEliminator:       x264_pixel_sad_x3_4x8
DeadFunctionEliminator:       x264_pixel_sad_x3_4x4
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8
DeadFunctionEliminator:       x264_pixel_sad_x4_8x16
DeadFunctionEliminator:       bs_write_ue_big
DeadFunctionEliminator:       bs_flush
DeadFunctionEliminator:       __assert_fail
DeadFunctionEliminator:       bs_write1
DeadFunctionEliminator:       bs_write_se
DeadFunctionEliminator:       endian_fix32
DeadFunctionEliminator:       x264_slice_header_init
DeadFunctionEliminator:       x264_thread_sync_stat
DeadFunctionEliminator:       x264_psnr
DeadFunctionEliminator:       snprintf
DeadFunctionEliminator:       x264_frame_dump
DeadFunctionEliminator:       x264_encoder_close
DeadFunctionEliminator:       x264_print_intra
DeadFunctionEliminator:       x264_frame_init_lowres
DeadFunctionEliminator:       x264_mc_init
DeadFunctionEliminator:       mc_luma
DeadFunctionEliminator:       get_ref
DeadFunctionEliminator:       mc_chroma
DeadFunctionEliminator:       pixel_avg_16x16
DeadFunctionEliminator:       pixel_avg_16x8
DeadFunctionEliminator:       pixel_avg_8x16
DeadFunctionEliminator:       pixel_avg_8x8
DeadFunctionEliminator:       pixel_avg_8x4
DeadFunctionEliminator:       pixel_avg_4x8
DeadFunctionEliminator:       pixel_avg_4x4
DeadFunctionEliminator:       pixel_avg_4x2
DeadFunctionEliminator:       pixel_avg_2x4
DeadFunctionEliminator:       pixel_avg_2x2
DeadFunctionEliminator:       mc_copy_w16
DeadFunctionEliminator:       x264_pixel_satd_x3_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_16x8_mmxext
DeadFunctionEliminator:       mc_copy_w8
DeadFunctionEliminator:       mc_copy_w4
DeadFunctionEliminator:       plane_copy
DeadFunctionEliminator:       hpel_filter
DeadFunctionEliminator:       prefetch_fenc_null
DeadFunctionEliminator:       prefetch_ref_null
DeadFunctionEliminator:       memcpy
DeadFunctionEliminator:       memzero_aligned
DeadFunctionEliminator:       frame_init_lowres_core
DeadFunctionEliminator:       x264_clip_uint8
DeadFunctionEliminator:       mc_copy
DeadFunctionEliminator:       pixel_avg_wxh
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x8_sse2
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x16_sse2
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x8_sse2
DeadFunctionEliminator:       x264_pixel_ads4_sse2
DeadFunctionEliminator:       x264_pixel_ads2_sse2
DeadFunctionEliminator:       x264_pixel_ads1_sse2
DeadFunctionEliminator:       x264_pixel_var_8x8_sse2
DeadFunctionEliminator:       x264_intra_sad_x3_16x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16_sse2_misalign
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8_sse2_misalign
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16_sse2_misalign
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8_sse2_misalign
DeadFunctionEliminator:       x264_pixel_ssd_16x16_sse2
DeadFunctionEliminator:       x264_pixel_ssd_16x8_sse2
DeadFunctionEliminator:       x264_pixel_ssd_8x16_sse2
DeadFunctionEliminator:       x264_pixel_ssd_8x8_sse2
DeadFunctionEliminator:       x264_pixel_ssd_8x4_sse2
DeadFunctionEliminator:       x264_pixel_satd_16x16_sse2
DeadFunctionEliminator:       x264_pixel_satd_16x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_8x16_sse2
DeadFunctionEliminator:       x264_pixel_satd_8x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_8x4_sse2
DeadFunctionEliminator:       x264_pixel_satd_4x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_16x16_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_16x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_8x16_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_8x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_8x4_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_4x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x4_16x16_sse2
DeadFunctionEliminator:       x264_pixel_satd_x4_16x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x4_8x16_sse2
DeadFunctionEliminator:       predict_8x8c_p
DeadFunctionEliminator:       predict_8x8c_dc_left
DeadFunctionEliminator:       predict_8x8c_dc_top
DeadFunctionEliminator:       predict_8x8c_dc_128
DeadFunctionEliminator:       x264_predict_8x8_init
DeadFunctionEliminator:       predict_8x8_v
DeadFunctionEliminator:       predict_8x8_h
DeadFunctionEliminator:       predict_8x8_dc
DeadFunctionEliminator:       predict_8x8_ddl
DeadFunctionEliminator:       predict_8x8_ddr
DeadFunctionEliminator:       predict_8x8_vr
DeadFunctionEliminator:       predict_8x8_hd
DeadFunctionEliminator:       predict_8x8_vl
DeadFunctionEliminator:       predict_8x8_hu
DeadFunctionEliminator:       predict_8x8_dc_left
DeadFunctionEliminator:       predict_8x8_dc_top
DeadFunctionEliminator:       predict_8x8_dc_128
DeadFunctionEliminator:       pack8to16
DeadFunctionEliminator:       pack16to32
DeadFunctionEliminator:       x264_predict_4x4_init
DeadFunctionEliminator:       predict_4x4_v
DeadFunctionEliminator:       predict_4x4_h
DeadFunctionEliminator:       predict_4x4_dc
DeadFunctionEliminator:       predict_4x4_ddl
DeadFunctionEliminator:       predict_4x4_ddr
DeadFunctionEliminator:       predict_4x4_vr
DeadFunctionEliminator:       predict_4x4_hd
DeadFunctionEliminator:       predict_4x4_vl
DeadFunctionEliminator:       predict_4x4_hu
DeadFunctionEliminator:       predict_4x4_dc_left
DeadFunctionEliminator:       predict_4x4_dc_top
DeadFunctionEliminator:       predict_4x4_dc_128
DeadFunctionEliminator:       x264_pixel_ssd_wxh
DeadFunctionEliminator:       x264_pixel_ssim_wxh
DeadFunctionEliminator:       x264_pixel_init
DeadFunctionEliminator:       x264_dct_init
DeadFunctionEliminator:       sub4x4_dct
DeadFunctionEliminator:       add4x4_idct
DeadFunctionEliminator:       sub8x8_dct
DeadFunctionEliminator:       add8x8_idct
DeadFunctionEliminator:       sub16x16_dct
DeadFunctionEliminator:       add16x16_idct
DeadFunctionEliminator:       sub8x8_dct8
DeadFunctionEliminator:       add8x8_idct8
DeadFunctionEliminator:       sub16x16_dct8
DeadFunctionEliminator:       add16x16_idct8
DeadFunctionEliminator:       dct4x4dc
DeadFunctionEliminator:       idct4x4dc
DeadFunctionEliminator:       x264_sub4x4_dct_mmx
DeadFunctionEliminator:       x264_add4x4_idct_mmx
DeadFunctionEliminator:       x264_dct4x4dc_mmx
DeadFunctionEliminator:       x264_idct4x4dc_mmx
DeadFunctionEliminator:       x264_sub8x8_dct8_sse2
DeadFunctionEliminator:       x264_sub16x16_dct8_sse2
DeadFunctionEliminator:       x264_add8x8_idct8_sse2
DeadFunctionEliminator:       x264_add16x16_idct8_sse2
DeadFunctionEliminator:       x264_sub8x8_dct_sse2
DeadFunctionEliminator:       x264_sub16x16_dct_sse2
DeadFunctionEliminator:       x264_add8x8_idct_sse2
DeadFunctionEliminator:       x264_add16x16_idct_sse2
DeadFunctionEliminator:       x264_clip_uint8.729
DeadFunctionEliminator:       pixel_sub_wxh
DeadFunctionEliminator:       x264_dct_init_weights
DeadFunctionEliminator:       x264_zigzag_init
DeadFunctionEliminator:       zigzag_scan_8x8_field
DeadFunctionEliminator:       zigzag_scan_4x4_field
DeadFunctionEliminator:       zigzag_sub_8x8_field
DeadFunctionEliminator:       zigzag_sub_4x4_field
DeadFunctionEliminator:       x264_zigzag_scan_4x4_field_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x8
DeadFunctionEliminator:       x264_pixel_sad_x4_8x4
DeadFunctionEliminator:       x264_pixel_sad_x4_4x8
DeadFunctionEliminator:       x264_pixel_sad_x4_4x4
DeadFunctionEliminator:       x264_pixel_ssd_16x16
DeadFunctionEliminator:       x264_pixel_ssd_16x8
DeadFunctionEliminator:       x264_pixel_ssd_8x16
DeadFunctionEliminator:       x264_pixel_ssd_8x8
DeadFunctionEliminator:       x264_pixel_ssd_8x4
DeadFunctionEliminator:       x264_pixel_ssd_4x8
DeadFunctionEliminator:       x264_pixel_ssd_4x4
DeadFunctionEliminator:       x264_pixel_satd_16x16
DeadFunctionEliminator:       x264_pixel_satd_16x8
DeadFunctionEliminator:       x264_pixel_satd_8x16
DeadFunctionEliminator:       x264_pixel_satd_8x8
DeadFunctionEliminator:       x264_pixel_satd_8x4
DeadFunctionEliminator:       x264_pixel_satd_4x8
DeadFunctionEliminator:       x264_pixel_satd_4x4
DeadFunctionEliminator:       x264_pixel_satd_x3_16x16
DeadFunctionEliminator:       x264_pixel_satd_x3_16x8
DeadFunctionEliminator:       x264_pixel_satd_x3_8x16
DeadFunctionEliminator:       x264_pixel_satd_x3_8x8
DeadFunctionEliminator:       x264_pixel_satd_x3_8x4
DeadFunctionEliminator:       x264_pixel_satd_x3_4x8
DeadFunctionEliminator:       x264_pixel_satd_x3_4x4
DeadFunctionEliminator:       x264_pixel_satd_x4_16x16
DeadFunctionEliminator:       x264_pixel_satd_x4_16x8
DeadFunctionEliminator:       x264_pixel_satd_x4_8x16
DeadFunctionEliminator:       x264_pixel_satd_x4_8x8
DeadFunctionEliminator:       x264_pixel_satd_x4_8x4
DeadFunctionEliminator:       x264_pixel_satd_x4_4x8
DeadFunctionEliminator:       x264_pixel_satd_x4_4x4
DeadFunctionEliminator:       x264_pixel_sa8d_16x16
DeadFunctionEliminator:       x264_pixel_sa8d_16x8
DeadFunctionEliminator:       x264_pixel_sa8d_8x16
DeadFunctionEliminator:       x264_pixel_sa8d_8x8
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x16
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x8
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x16
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x8
DeadFunctionEliminator:       x264_pixel_ads4
DeadFunctionEliminator:       x264_pixel_ads2
DeadFunctionEliminator:       x264_pixel_ads1
DeadFunctionEliminator:       x264_pixel_var_16x16
DeadFunctionEliminator:       x264_pixel_var_8x8
DeadFunctionEliminator:       ssim_4x4x2_core
DeadFunctionEliminator:       ssim_end4
DeadFunctionEliminator:       x264_pixel_ssd_16x16_mmx
DeadFunctionEliminator:       x264_pixel_ssd_16x8_mmx
DeadFunctionEliminator:       x264_pixel_ssd_8x16_mmx
DeadFunctionEliminator:       x264_pixel_ssd_8x8_mmx
DeadFunctionEliminator:       x264_pixel_ssd_8x4_mmx
DeadFunctionEliminator:       x264_pixel_ssd_4x8_mmx
DeadFunctionEliminator:       x264_pixel_ssd_4x4_mmx
DeadFunctionEliminator:       x264_pixel_sad_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_satd_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_satd_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_16x16_mmxext
DeadFunctionEliminator:       x264_mb_analyse_inter_p8x4
DeadFunctionEliminator:       x264_mb_analyse_inter_p4x8
DeadFunctionEliminator:       x264_mb_cache_mv_p8x8
DeadFunctionEliminator:       x264_mb_analyse_inter_p16x8
DeadFunctionEliminator:       x264_mb_analyse_inter_p8x16
DeadFunctionEliminator:       x264_mb_analyse_intra_chroma
DeadFunctionEliminator:       x264_mb_analyse_p_rd
DeadFunctionEliminator:       x264_mb_analyse_transform_rd
DeadFunctionEliminator:       x264_macroblock_cache_ref.799
DeadFunctionEliminator:       x264_analyse_update_cache
DeadFunctionEliminator:       x264_macroblock_probe_bskip
DeadFunctionEliminator:       x264_mb_analyse_inter_direct
DeadFunctionEliminator:       x264_mb_analyse_inter_b16x16
DeadFunctionEliminator:       x264_mb_analyse_b_rd
DeadFunctionEliminator:       x264_mb_analyse_inter_b8x8
DeadFunctionEliminator:       x264_mb_analyse_inter_b16x8
DeadFunctionEliminator:       x264_pixel_satd_x4_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_ads4_mmxext
DeadFunctionEliminator:       x264_pixel_ads2_mmxext
DeadFunctionEliminator:       x264_pixel_ads1_mmxext
DeadFunctionEliminator:       x264_pixel_var_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_var_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x16_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x8_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x4_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_8x16_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_8x8_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x16_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x8_cache64_mmxext
DeadFunctionEliminator:       x264_intra_satd_x3_16x16_mmxext
DeadFunctionEliminator:       x264_intra_sad_x3_16x16_mmxext
DeadFunctionEliminator:       x264_intra_satd_x3_8x8c_mmxext
DeadFunctionEliminator:       x264_intra_satd_x3_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_16x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_16x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8_sse2
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x16_sse2
DeadFunctionEliminator:       cavlc_intra4x4_pred_size
DeadFunctionEliminator:       x264_partition_i4x4_size_cabac
DeadFunctionEliminator:       x264_partition_i4x4_size_cavlc
DeadFunctionEliminator:       x264_clip3.813
DeadFunctionEliminator:       x264_slicetype_decide
DeadFunctionEliminator:       x264_slicetype_analyse
DeadFunctionEliminator:       x264_lowres_context_init
DeadFunctionEliminator:       x264_slicetype_frame_cost
DeadFunctionEliminator:       scenecut
DeadFunctionEliminator:       x264_slicetype_path_search
DeadFunctionEliminator:       x264_slicetype_path
DeadFunctionEliminator:       strspn
DeadFunctionEliminator:       x264_slicetype_path_cost
DeadFunctionEliminator:       x264_slicetype_mb_cost
DeadFunctionEliminator:       x264_median_mv_mmxext.824
DeadFunctionEliminator:       x264_rc_analyse_slice
DeadFunctionEliminator:       x264_me_search_ref
DeadFunctionEliminator:       x264_clip3.828
DeadFunctionEliminator:       pack16to32_mask.829
DeadFunctionEliminator:       x264_predictor_difference_mmxext
DeadFunctionEliminator:       refine_subpel
DeadFunctionEliminator:       x264_me_refine_qpel
DeadFunctionEliminator:       x264_me_refine_bidir_satd
DeadFunctionEliminator:       x264_me_refine_bidir
DeadFunctionEliminator:       x264_me_refine_bidir_rd
DeadFunctionEliminator:       x264_me_refine_qpel_rd
DeadFunctionEliminator:       x264_macroblock_cache_mv.841
DeadFunctionEliminator:       x264_macroblock_cache_mvd.842
DeadFunctionEliminator:       x264_macroblock_cache_rect4.843
DeadFunctionEliminator:       x264_adaptive_quant_frame
DeadFunctionEliminator:       ac_energy_mb
DeadFunctionEliminator:       llvm.log.f32
DeadFunctionEliminator:       x264_adaptive_quant
DeadFunctionEliminator:       x264_clip3.848
DeadFunctionEliminator:       x264_ratecontrol_new
DeadFunctionEliminator:       x264_clip3f.856
DeadFunctionEliminator:       qp2qscale
DeadFunctionEliminator:       parse_zones
DeadFunctionEliminator:       init_pass2
DeadFunctionEliminator:       strcpy
DeadFunctionEliminator:       llvm.exp.f64
DeadFunctionEliminator:       qscale2bits
DeadFunctionEliminator:       get_qscale
DeadFunctionEliminator:       get_diff_limited_q
DeadFunctionEliminator:       clip_qscale
DeadFunctionEliminator:       vbv_pass2
DeadFunctionEliminator:       count_expected_bits
DeadFunctionEliminator:       llvm.fabs.f64
DeadFunctionEliminator:       qscale2qp
DeadFunctionEliminator:       find_underflow
DeadFunctionEliminator:       fix_underflow
DeadFunctionEliminator:       predict_size
DeadFunctionEliminator:       get_zone
DeadFunctionEliminator:       parse_zone
DeadFunctionEliminator:       x264_ratecontrol_summary
DeadFunctionEliminator:       x264_ratecontrol_delete
DeadFunctionEliminator:       rename
DeadFunctionEliminator:       x264_ratecontrol_set_estimated_size
DeadFunctionEliminator:       x264_ratecontrol_get_estimated_size
DeadFunctionEliminator:       x264_ratecontrol_start
DeadFunctionEliminator:       update_vbv_plan
DeadFunctionEliminator:       rate_estimate_qscale
DeadFunctionEliminator:       accum_p_qp_update
DeadFunctionEliminator:       llvm.sqrt.f64
DeadFunctionEliminator:       x264_ratecontrol_mb
DeadFunctionEliminator:       row_bits_so_far
DeadFunctionEliminator:       update_predictor
DeadFunctionEliminator:       x264_pixel_satd_x4_8x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x4_8x4_sse2
DeadFunctionEliminator:       x264_pixel_satd_x4_4x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_16x16_sse2_aligned
DeadFunctionEliminator:       x264_pixel_sad_16x8_sse2_aligned
DeadFunctionEliminator:       x264_pixel_var_16x16_sse2
DeadFunctionEliminator:       x264_pixel_ssim_4x4x2_core_sse2
DeadFunctionEliminator:       x264_pixel_ssim_end4_sse2
DeadFunctionEliminator:       x264_pixel_sa8d_16x16_sse2
DeadFunctionEliminator:       x264_pixel_sa8d_8x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_8x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_8x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_8x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_8x4_sse2
DeadFunctionEliminator:       x264_pixel_sad_x4_8x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x4_8x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_x4_8x4_sse2
DeadFunctionEliminator:       x264_pixel_sad_16x16_sse3
DeadFunctionEliminator:       x264_pixel_sad_16x8_sse3
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16_sse3
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8_sse3
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16_sse3
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8_sse3
DeadFunctionEliminator:       x264_pixel_satd_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_16x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_8x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_8x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_8x4_ssse3
DeadFunctionEliminator:       x264_pixel_satd_4x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_4x4_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_16x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_8x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_8x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_8x4_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_4x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_4x4_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_16x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_8x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_8x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_8x4_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_4x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_4x4_ssse3
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x8_ssse3
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x16_ssse3
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x8_ssse3
DeadFunctionEliminator:       x264_pixel_ads4_ssse3
DeadFunctionEliminator:       x264_pixel_ads2_ssse3
DeadFunctionEliminator:       x264_pixel_ads1_ssse3
DeadFunctionEliminator:       x264_pixel_sa8d_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_sa8d_8x8_ssse3
DeadFunctionEliminator:       x264_intra_satd_x3_16x16_ssse3
DeadFunctionEliminator:       x264_intra_sad_x3_16x16_ssse3
DeadFunctionEliminator:       x264_intra_satd_x3_8x8c_ssse3
DeadFunctionEliminator:       x264_intra_satd_x3_4x4_ssse3
DeadFunctionEliminator:       x264_pixel_sad_16x16_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_sad_16x8_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_satd_16x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_16x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_8x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_8x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_8x4_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_4x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_16x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_16x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_8x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_8x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_8x4_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_4x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_16x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_16x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_8x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_8x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_8x4_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_4x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_ssd_4x8_sse4
DeadFunctionEliminator:       x264_pixel_ssd_4x4_sse4
DeadFunctionEliminator:       ssim_end1
DeadFunctionEliminator:       pixel_hadamard_ac
DeadFunctionEliminator:       pixel_sa8d_wxh
DeadFunctionEliminator:       pixel_satd_wxh
DeadFunctionEliminator:       x264_mb_predict_mv
DeadFunctionEliminator:       x264_median_mv_mmxext
DeadFunctionEliminator:       x264_mb_predict_mv_16x16
DeadFunctionEliminator:       x264_mb_predict_mv_pskip
DeadFunctionEliminator:       x264_mb_predict_mv_direct16x16
DeadFunctionEliminator:       x264_mb_predict_mv_direct16x16_spatial
DeadFunctionEliminator:       x264_mb_predict_mv_direct16x16_temporal
DeadFunctionEliminator:       x264_macroblock_cache_ref
DeadFunctionEliminator:       x264_macroblock_cache_mv
DeadFunctionEliminator:       pack16to32_mask
DeadFunctionEliminator:       x264_macroblock_cache_rect4
DeadFunctionEliminator:       x264_macroblock_cache_rect1
DeadFunctionEliminator:       x264_mb_load_mv_direct8x8
DeadFunctionEliminator:       x264_mb_predict_mv_ref16x16
DeadFunctionEliminator:       x264_mb_mc_8x8
DeadFunctionEliminator:       x264_mb_mc_0xywh
DeadFunctionEliminator:       x264_mb_mc_1xywh
DeadFunctionEliminator:       x264_mb_mc_01xywh
DeadFunctionEliminator:       x264_mb_mc_direct8x8
DeadFunctionEliminator:       x264_clip3.664
DeadFunctionEliminator:       x264_mb_mc
DeadFunctionEliminator:       x264_macroblock_cache_init
DeadFunctionEliminator:       x264_macroblock_cache_end
DeadFunctionEliminator:       x264_macroblock_slice_init
DeadFunctionEliminator:       setup_inverse_delta_pocs
DeadFunctionEliminator:       x264_prefetch_fenc
DeadFunctionEliminator:       x264_macroblock_cache_load
DeadFunctionEliminator:       copy_column8
DeadFunctionEliminator:       x264_macroblock_load_pic_pointers
DeadFunctionEliminator:       x264_macroblock_cache_save
DeadFunctionEliminator:       x264_macroblock_store_pic
DeadFunctionEliminator:       pack8to32
DeadFunctionEliminator:       x264_macroblock_bipred_init
DeadFunctionEliminator:       x264_frame_new
DeadFunctionEliminator:       x264_frame_delete
DeadFunctionEliminator:       x264_frame_copy_picture
DeadFunctionEliminator:       x264_frame_expand_border
DeadFunctionEliminator:       plane_expand_border
DeadFunctionEliminator:       x264_frame_expand_border_filtered
DeadFunctionEliminator:       x264_frame_expand_border_lowres
DeadFunctionEliminator:       x264_frame_expand_border_mod16
DeadFunctionEliminator:       x264_frame_deblock_row
DeadFunctionEliminator:       munge_cavlc_nnz_row
DeadFunctionEliminator:       munge_cavlc_nnz
DeadFunctionEliminator:       deblock_edge_intra
DeadFunctionEliminator:       deblock_edge
DeadFunctionEliminator:       restore_cavlc_nnz_row
DeadFunctionEliminator:       x264_frame_deblock
DeadFunctionEliminator:       x264_deblock_init
DeadFunctionEliminator:       deblock_v_luma_c
DeadFunctionEliminator:       deblock_h_luma_c
DeadFunctionEliminator:       deblock_v_chroma_c
DeadFunctionEliminator:       deblock_h_chroma_c
DeadFunctionEliminator:       deblock_v_luma_intra_c
DeadFunctionEliminator:       deblock_h_luma_intra_c
DeadFunctionEliminator:       deblock_v_chroma_intra_c
DeadFunctionEliminator:       deblock_h_chroma_intra_c
DeadFunctionEliminator:       x264_deblock_v_chroma_mmxext
DeadFunctionEliminator:       x264_deblock_h_chroma_mmxext
DeadFunctionEliminator:       x264_deblock_v_chroma_intra_mmxext
DeadFunctionEliminator:       x264_deblock_h_chroma_intra_mmxext
DeadFunctionEliminator:       x264_deblock_v_luma_sse2
DeadFunctionEliminator:       x264_deblock_h_luma_sse2
DeadFunctionEliminator:       x264_deblock_v_luma_intra_sse2
DeadFunctionEliminator:       x264_deblock_h_luma_intra_sse2
DeadFunctionEliminator:       deblock_chroma_intra_c
DeadFunctionEliminator:       deblock_luma_intra_c
DeadFunctionEliminator:       deblock_chroma_c
DeadFunctionEliminator:       x264_clip3.703
DeadFunctionEliminator:       x264_clip_uint8.704
DeadFunctionEliminator:       deblock_luma_c
DeadFunctionEliminator:       x264_frame_cond_broadcast
DeadFunctionEliminator:       x264_frame_cond_wait
DeadFunctionEliminator:       x264_frame_push
DeadFunctionEliminator:       x264_frame_pop
DeadFunctionEliminator:       x264_frame_unshift
DeadFunctionEliminator:       x264_frame_shift
DeadFunctionEliminator:       x264_frame_push_unused
DeadFunctionEliminator:       x264_frame_pop_unused
DeadFunctionEliminator:       x264_frame_sort
DeadFunctionEliminator:       predict_row_size_sum
DeadFunctionEliminator:       predict_row_size
DeadFunctionEliminator:       x264_ratecontrol_qp
DeadFunctionEliminator:       x264_ratecontrol_slice_type
DeadFunctionEliminator:       x264_ratecontrol_end
DeadFunctionEliminator:       update_vbv
DeadFunctionEliminator:       x264_thread_sync_ratecontrol
DeadFunctionEliminator:       x264_sps_init
DeadFunctionEliminator:       x264_sps_write
DeadFunctionEliminator:       bs_write.943
DeadFunctionEliminator:       bs_write_ue_big.944
DeadFunctionEliminator:       bs_write_se.945
DeadFunctionEliminator:       bs_write1.946
DeadFunctionEliminator:       bs_write32
DeadFunctionEliminator:       bs_rbsp_trailing.947
DeadFunctionEliminator:       bs_flush.948
DeadFunctionEliminator:       endian_fix.949
DeadFunctionEliminator:       endian_fix32.950
DeadFunctionEliminator:       x264_pps_init
DeadFunctionEliminator:       transpose
DeadFunctionEliminator:       x264_pps_write
DeadFunctionEliminator:       scaling_list_write
DeadFunctionEliminator:       bs_size_se.962
DeadFunctionEliminator:       bs_size_ue_big.963
DeadFunctionEliminator:       x264_sei_version_write
DeadFunctionEliminator:       x264_validate_levels
DeadFunctionEliminator:       x264_mb_encode_i4x4
DeadFunctionEliminator:       x264_quant_4x4
DeadFunctionEliminator:       array_non_zero_int_mmx.982
DeadFunctionEliminator:       array_non_zero_int_c.983
DeadFunctionEliminator:       x264_mb_encode_i8x8
DeadFunctionEliminator:       x264_quant_8x8
DeadFunctionEliminator:       x264_mb_encode_8x8_chroma
DeadFunctionEliminator:       dct2x2dc
DeadFunctionEliminator:       zigzag_scan_2x2_dc
DeadFunctionEliminator:       idct_dequant_2x2_dc
DeadFunctionEliminator:       x264_predict_lossless_8x8_chroma
DeadFunctionEliminator:       x264_predict_lossless_4x4
DeadFunctionEliminator:       x264_predict_lossless_8x8
DeadFunctionEliminator:       x264_predict_lossless_16x16
DeadFunctionEliminator:       x264_macroblock_encode
DeadFunctionEliminator:       x264_macroblock_encode_pskip
DeadFunctionEliminator:       x264_macroblock_encode_skip
DeadFunctionEliminator:       x264_mb_encode_i16x16
DeadFunctionEliminator:       x264_clip3.1001
DeadFunctionEliminator:       x264_macroblock_probe_skip
DeadFunctionEliminator:       x264_noise_reduction_update
DeadFunctionEliminator:       x264_macroblock_encode_p8x8
DeadFunctionEliminator:       x264_macroblock_encode_p4x4
DeadFunctionEliminator:       x264_cabac_mb_skip
DeadFunctionEliminator:       x264_cabac_encode_decision_asm
DeadFunctionEliminator:       x264_macroblock_write_cabac
DeadFunctionEliminator:       x264_cabac_pos.1016
DeadFunctionEliminator:       x264_cabac_mb_type.1017
DeadFunctionEliminator:       x264_cabac_mb_transform_size.1018
DeadFunctionEliminator:       x264_mb_predict_intra4x4_mode.1019
DeadFunctionEliminator:       x264_cabac_mb_intra4x4_pred_mode.1022
DeadFunctionEliminator:       x264_cabac_mb_intra_chroma_pred_mode.1023
DeadFunctionEliminator:       x264_cabac_mb_ref.1024
DeadFunctionEliminator:       x264_cabac_mb_mvd.1025
DeadFunctionEliminator:       x264_cabac_mb_sub_p_partition.1026
DeadFunctionEliminator:       x264_cabac_mb8x8_mvd.1027
DeadFunctionEliminator:       x264_cabac_mb_sub_b_partition.1028
DeadFunctionEliminator:       x264_cabac_mb_cbp_luma.1032
DeadFunctionEliminator:       x264_cabac_mb_cbp_chroma.1033
DeadFunctionEliminator:       x264_mb_transform_8x8_allowed.1034
DeadFunctionEliminator:       x264_cabac_mb_qp_delta.1035
DeadFunctionEliminator:       block_residual_write_cabac.1036
DeadFunctionEliminator:       x264_cabac_mb_cbf_ctxidxinc.1041
DeadFunctionEliminator:       x264_cabac_mb_mvd_cpn.1048
DeadFunctionEliminator:       pack16to32_mask.1051
DeadFunctionEliminator:       x264_macroblock_cache_mvd.1052
DeadFunctionEliminator:       x264_macroblock_cache_rect4.1053
DeadFunctionEliminator:       x264_cabac_mb_type_intra.1056
DeadFunctionEliminator:       x264_macroblock_write_cavlc
DeadFunctionEliminator:       bs_pos.1063
DeadFunctionEliminator:       bs_write1.1065
DeadFunctionEliminator:       bs_write_ue
DeadFunctionEliminator:       bs_align_0
DeadFunctionEliminator:       x264_mb_predict_intra4x4_mode.1066
DeadFunctionEliminator:       bs_write.1069
DeadFunctionEliminator:       bs_write_te
DeadFunctionEliminator:       bs_write_se.1072
DeadFunctionEliminator:       cavlc_mb8x8_mvd.1074
DeadFunctionEliminator:       x264_mb_transform_8x8_allowed.1083
DeadFunctionEliminator:       cavlc_qp_delta.1084
DeadFunctionEliminator:       block_residual_write_cavlc.1085
DeadFunctionEliminator:       array_non_zero_count_mmx.1086
DeadFunctionEliminator:       x264_macroblock_luma_write_cavlc.1087
DeadFunctionEliminator:       x264_mb_predict_non_zero_code.1088
DeadFunctionEliminator:       bs_write_vlc.1090
DeadFunctionEliminator:       cavlc_mb_mvd.1093
DeadFunctionEliminator:       endian_fix.1095
DeadFunctionEliminator:       bs_flush.1096
DeadFunctionEliminator:       endian_fix32.1097
DeadFunctionEliminator:       x264_mc_init_mmx
DeadFunctionEliminator:       x264_mc_copy_w16_mmx
DeadFunctionEliminator:       x264_mc_copy_w8_mmx
DeadFunctionEliminator:       x264_mc_copy_w4_mmx
DeadFunctionEliminator:       x264_memcpy_aligned_mmx
DeadFunctionEliminator:       x264_memzero_aligned_mmx
DeadFunctionEliminator:       mc_luma_mmxext
DeadFunctionEliminator:       get_ref_mmxext
DeadFunctionEliminator:       x264_mc_chroma_mmxext
DeadFunctionEliminator:       x264_pixel_avg_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_avg_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_avg_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_avg_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_avg_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_avg_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_avg_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_avg_4x2_mmxext
DeadFunctionEliminator:       x264_plane_copy_mmxext
DeadFunctionEliminator:       x264_hpel_filter_mmxext
DeadFunctionEliminator:       x264_frame_init_lowres_core_mmxext
DeadFunctionEliminator:       x264_prefetch_fenc_mmxext
DeadFunctionEliminator:       x264_prefetch_ref_mmxext
DeadFunctionEliminator:       x264_memcpy_aligned_sse2
DeadFunctionEliminator:       x264_memzero_aligned_sse2
DeadFunctionEliminator:       x264_hpel_filter_sse2_amd
DeadFunctionEliminator:       x264_mc_copy_w16_aligned_sse2
DeadFunctionEliminator:       x264_pixel_avg_16x16_sse2
DeadFunctionEliminator:       x264_pixel_avg_16x8_sse2
DeadFunctionEliminator:       x264_pixel_avg_8x16_sse2
DeadFunctionEliminator:       x264_pixel_avg_8x8_sse2
DeadFunctionEliminator:       x264_pixel_avg_8x4_sse2
DeadFunctionEliminator:       x264_hpel_filter_sse2
DeadFunctionEliminator:       x264_hpel_filter_sse2_misalign
DeadFunctionEliminator:       x264_frame_init_lowres_core_sse2
DeadFunctionEliminator:       x264_mc_chroma_sse2
DeadFunctionEliminator:       mc_luma_sse2
DeadFunctionEliminator:       get_ref_sse2
DeadFunctionEliminator:       mc_luma_cache64_sse2
DeadFunctionEliminator:       get_ref_cache64_sse2
DeadFunctionEliminator:       get_ref_sse2_misalign
DeadFunctionEliminator:       x264_pixel_avg_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_avg_16x8_ssse3
DeadFunctionEliminator:       x264_pixel_avg_8x16_ssse3
DeadFunctionEliminator:       x264_pixel_avg_8x8_ssse3
DeadFunctionEliminator:       x264_pixel_avg_8x4_ssse3
DeadFunctionEliminator:       x264_pixel_avg_4x8_ssse3
DeadFunctionEliminator:       x264_pixel_avg_4x4_ssse3
DeadFunctionEliminator:       x264_pixel_avg_4x2_ssse3
DeadFunctionEliminator:       x264_hpel_filter_ssse3
DeadFunctionEliminator:       x264_frame_init_lowres_core_ssse3
DeadFunctionEliminator:       x264_mc_chroma_ssse3
DeadFunctionEliminator:       x264_pixel_avg2_w4_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w8_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w16_sse2
DeadFunctionEliminator:       x264_pixel_avg2_w20_sse2_misalign
DeadFunctionEliminator:       x264_pixel_avg2_w8_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w16_cache64_sse2
DeadFunctionEliminator:       x264_pixel_avg2_w20_cache64_sse2
DeadFunctionEliminator:       x264_mc_copy_w16_sse2
DeadFunctionEliminator:       x264_pixel_avg2_w20_sse2
DeadFunctionEliminator:       x264_hpel_filter_v_sse2
DeadFunctionEliminator:       x264_hpel_filter_c_sse2_misalign
DeadFunctionEliminator:       x264_hpel_filter_h_sse2
DeadFunctionEliminator:       x264_sfence
DeadFunctionEliminator:       x264_hpel_filter_v_mmxext
DeadFunctionEliminator:       x264_hpel_filter_c_mmxext
DeadFunctionEliminator:       x264_hpel_filter_h_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w12_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w16_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w20_mmxext
DeadFunctionEliminator:       x264_intra_sa8d_x3_8x8_sse2
DeadFunctionEliminator:       x264_intra_sa8d_x3_8x8_core_sse2
DeadFunctionEliminator:       x264_intra_sa8d_x3_8x8_ssse3
DeadFunctionEliminator:       x264_intra_sa8d_x3_8x8_core_ssse3
DeadFunctionEliminator:       x264_predict_16x16_init_mmx
DeadFunctionEliminator:       predict_16x16_dc_left.1108
DeadFunctionEliminator:       predict_16x16_v_mmx
DeadFunctionEliminator:       predict_16x16_dc_mmxext
DeadFunctionEliminator:       predict_16x16_dc_top_mmxext
DeadFunctionEliminator:       predict_16x16_p_mmxext
DeadFunctionEliminator:       predict_16x16_h_mmxext
DeadFunctionEliminator:       predict_16x16_dc_sse2
DeadFunctionEliminator:       predict_16x16_v_sse2
DeadFunctionEliminator:       predict_16x16_dc_top_sse2
DeadFunctionEliminator:       predict_16x16_p_sse2
DeadFunctionEliminator:       predict_16x16_h_ssse3
DeadFunctionEliminator:       predict_16x16_p_core_sse2
DeadFunctionEliminator:       predict_16x16_dc_core_sse2
DeadFunctionEliminator:       predict_16x16_p_core_mmxext
DeadFunctionEliminator:       predict_16x16_dc_core_mmxext
DeadFunctionEliminator:       x264_predict_8x8c_init_mmx
DeadFunctionEliminator:       predict_8x8c_dc_left.1111
DeadFunctionEliminator:       predict_8x8c_dc_top.1112
DeadFunctionEliminator:       predict_8x8c_v_mmx
DeadFunctionEliminator:       predict_8x8c_h_mmxext
DeadFunctionEliminator:       predict_8x8c_p_mmxext
DeadFunctionEliminator:       predict_8x8c_dc_mmxext
DeadFunctionEliminator:       predict_8x8c_h_ssse3
DeadFunctionEliminator:       predict_8x8c_dc_core_mmxext
DeadFunctionEliminator:       predict_8x8c_p_core_mmxext
DeadFunctionEliminator:       x264_predict_8x8_init_mmx
DeadFunctionEliminator:       predict_8x8_v_mmxext
DeadFunctionEliminator:       predict_8x8_h_mmxext
DeadFunctionEliminator:       predict_8x8_dc_mmxext
DeadFunctionEliminator:       predict_8x8_dc_top_mmxext
DeadFunctionEliminator:       predict_8x8_dc_left_mmxext
DeadFunctionEliminator:       predict_8x8_vr_mmxext
DeadFunctionEliminator:       predict_8x8_ddl_sse2
DeadFunctionEliminator:       predict_8x8_vl_sse2
DeadFunctionEliminator:       predict_8x8_ddr_sse2
DeadFunctionEliminator:       predict_8x8_vr_core_mmxext
DeadFunctionEliminator:       x264_predict_4x4_init_mmx
DeadFunctionEliminator:       predict_4x4_ddr.1117
DeadFunctionEliminator:       predict_4x4_vr.1118
DeadFunctionEliminator:       predict_4x4_hd.1119
DeadFunctionEliminator:       predict_4x4_hu.1120
DeadFunctionEliminator:       predict_4x4_ddl_mmxext
DeadFunctionEliminator:       predict_4x4_vl_mmxext
DeadFunctionEliminator:       predict_4x4_dc_mmxext
DeadFunctionEliminator:       puts
DeadFunctionEliminator:       fputc
DeadFunctionEliminator:       putchar
DeadFunctionEliminator:       bcmp
DeadFunctionEliminator:       llvm.exp2.f64
DeadFunctionEliminator:       memchr
DeadFunctionEliminator:       llvm.fabs.f32
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (8.951997e+01%)
Noelle:     Loop "  %165 = load i8*, i8** %48, align 8, !tbaa !50" (6.993746e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %20 = load i32, i32* %6, align 4, !tbaa !36" (1.006103e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %90 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.349801e-06%)
Noelle:     Loop "  %113 = icmp eq i32 %.222, 0" (2.756175e-06%)
Noelle:     Loop "  %160 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %159, i64 0, i32 1" (8.920957e+01%)
Noelle:     Loop "  %328 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (4.564916e-06%)
Noelle:     Loop "  %363 = load %struct.x264_frame_t*, %struct.x264_frame_t** %80, align 16, !tbaa !62" (1.076631e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %52 = mul nsw i32 %.07, %51" (8.909154e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %118 = load i32, i32* %42, align 8, !tbaa !64" (3.371082e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.833144e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %20 = icmp ult i64 %indvars.iv33, 16" (1.502704e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.803168e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.069964e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.214831e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv19, %45" (1.456000e+01%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv17, %50" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.000994e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.150987e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv43, 16" (1.325785e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.249813e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.572341e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.950059e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %86 = icmp slt i64 %indvars.iv22, %46" (4.731222e+00%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv20, %51" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.508336e+00%)
Noelle:     Loop "  %142 = icmp slt i32 %.3, %140" (1.102915e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (8.412330e-01%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (7.669891e-01%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (1.709545e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.066109e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (1.460211e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.529729e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.304341e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.256840e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %177 = icmp slt i64 %indvars.iv709, %175" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv707, %88" (8.461740e-01%)
Noelle:     Loop "  %2513 = icmp sgt i64 %indvars.iv705, %2510" (0.000000e+00%)
Noelle:     Loop "  %2531 = icmp slt i64 %indvars.iv701, %2529" (0.000000e+00%)
Noelle:     Loop "  %2600 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp sgt i64 %indvars.iv699, %2294" (0.000000e+00%)
Noelle:     Loop "  %2319 = icmp slt i64 %indvars.iv695, %2317" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2366 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2410 = icmp slt i64 %indvars.iv690, %2408" (0.000000e+00%)
Noelle:     Loop "  %2420 = icmp slt i64 %indvars.iv688, %2418" (0.000000e+00%)
Noelle:     Loop "  %2439 = icmp slt i64 %indvars.iv686, %2437" (0.000000e+00%)
Noelle:     Loop "  %2446 = icmp slt i64 %indvars.iv684, %2436" (0.000000e+00%)
Noelle:     Loop "  %2466 = icmp slt i64 %indvars.iv680, %2464" (0.000000e+00%)
Noelle:     Loop "  %1014 = icmp slt i64 %indvars.iv678, %1009" (6.975159e-02%)
Noelle:     Loop "  %1089 = icmp slt i64 %indvars.iv676, %1083" (5.724797e-02%)
Noelle:     Loop "  %1153 = icmp slt i64 %indvars.iv674, %1148" (7.565676e-02%)
Noelle:     Loop "  %1236 = icmp slt i64 %indvars.iv672, %1230" (5.736187e-02%)
Noelle:     Loop "  %1478 = icmp slt i64 %indvars.iv670, %1474" (6.536902e-01%)
Noelle:     Loop "  %1555 = icmp slt i64 %indvars.iv668, %1549" (8.364263e-02%)
Noelle:     Loop "  %1625 = icmp slt i64 %indvars.iv666, %1621" (3.283756e-01%)
Noelle:     Loop "  %1709 = icmp slt i64 %indvars.iv664, %1703" (7.338096e-02%)
Noelle:     Loop "  %1852 = shl nsw i64 %indvars.iv662, 2" (3.066542e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.144575e-01%)
Noelle:     Loop "  %439 = icmp slt i32 %.3345, %437" (6.759339e-02%)
Noelle:     Loop "  %245 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %72 = sext i32 %71 to i64" (7.185278e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.217891e-01%)
Noelle:     Loop "  %157 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %205 = load i32, i32* %4, align 4, !tbaa !62" (0.000000e+00%)
Noelle:     Loop "  %329 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.775843e+00%)
Noelle:     Loop "  %365 = icmp sgt i64 %indvars.iv, -1" (8.573919e-01%)
Noelle:     Loop "  %378 = load i32, i32* %4, align 4, !tbaa !62" (3.960896e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.109444e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (4.991707e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.516371e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.139994e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.481012e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %31" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %298 = icmp slt i64 %indvars.iv22, %296" (0.000000e+00%)
Noelle:     Loop "  %316 = icmp slt i64 %indvars.iv20, %314" (0.000000e+00%)
Noelle:     Loop "  %370 = icmp eq i32 %333, 1" (1.428705e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.069245e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.015206e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %37 = sext i32 %36 to i64" (3.953648e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.436348e-03%)
Noelle:     Loop "  %70 = icmp slt i32 %.01, %1" (1.774272e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %48, align 16, !tbaa !73" (1.754252e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.927039e-02%)
Noelle:     Loop "  %358 = icmp slt i64 %indvars.iv86, %356" (5.473486e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.515459e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (5.205344e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (7.283498e-02%)
Noelle:     Loop "  %772 = icmp slt i64 %indvars.iv100, %770" (5.567433e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.479782e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (5.211671e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %113 = icmp sgt i32 %.078, 0" (4.053451e-01%)
Noelle:     Loop "  %264 = icmp sgt i32 %.179, 0" (4.694284e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.020776e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.174661e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.010656e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %123 = icmp slt i64 %indvars.iv18, %97" (2.858188e-01%)
Noelle:     Loop "  %100 = icmp slt i64 %indvars.iv16, %98" (3.987161e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.488930e-01%)
Noelle:     Loop "  %172 = icmp slt i64 %indvars.iv11, %146" (0.000000e+00%)
Noelle:     Loop "  %149 = icmp slt i64 %indvars.iv9, %147" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.006031e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.562651e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.944579e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.637892e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.297952e-01%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (2.351943e-01%)
Noelle:     Loop "  %145 = load i32, i32* %135, align 8, !tbaa !82" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.489228e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %256" (2.034320e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.538781e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (3.406945e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (7.000675e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.130000e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (4.021663e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.290121e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %55 = load i32, i32* %3, align 4, !tbaa !67" (1.600965e-01%)
Noelle:     Loop "  %84 = sext i32 %83 to i64" (8.010321e-03%)
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %147 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv18, %154" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.941532e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.592822e-02%)
Noelle:     Loop "  %26 = sub nsw i32 %.1, %.0" (1.031802e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.944897e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.331641e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %99 = icmp slt i64 %indvars.iv, %97" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.236362e-01%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.100400e-02%)
Noelle:     Loop "  %exitcond11 = icmp ne i64 %indvars.iv6, %46" (8.421716e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.442093e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %53 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv, %87" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (5.966154e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.684862e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.396308e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.396308e-02%)
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %187 = load i32, i32* %133, align 4, !tbaa !92" (0.000000e+00%)
Noelle:     Loop "  %203 = icmp sgt i32 %202, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.715393e-03%)
Noelle:     Loop "  %exitcond8 = icmp ne i64 %indvars.iv, %42" (4.750900e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.525957e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv3, %36" (2.082247e-03%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv, %54" (2.082247e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.330260e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.330260e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (3.980746e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.725556e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %54 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %35 = icmp sgt i32 %.01, 0" (8.599906e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %59 = load i32, i32* %12, align 4, !tbaa !62" (2.989769e-02%)
Noelle:     Loop "  %18 = load i32, i32* %12, align 4, !tbaa !62" (1.383952e-03%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.337095e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.433774e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.897215e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (4.233780e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.699850e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %35 = icmp sgt i32 %.01, 0" (2.785302e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %57 = icmp sgt i32 %56, 65535" (0.000000e+00%)
Noelle:     Loop "  %237 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (3.710788e-06%)
Noelle:     Loop "  %355 = load i32, i32* %353, align 4, !tbaa !83" (3.588770e-08%)
Noelle:     Loop "  %365 = sext i32 %364 to i64" (3.351911e-06%)
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.155458e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.122255e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.901761e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.480558e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.189247e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.166637e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %34 = icmp sgt i32 %.04, %6" (8.884790e-04%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv13, %81" (0.000000e+00%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv, %78" (0.000000e+00%)
Noelle:     Loop "  %125 = icmp slt i32 %.16, %71" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 15" (1.789497e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (1.553033e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (1.194350e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (2.352582e-04%)
Noelle:     Loop "  %11 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (1.984518e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.558330e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.718009e-05%)
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.593988e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count4" (1.548971e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.308846e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.588770e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.885583e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.741863e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.184294e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.525270e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.265016e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.626854e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.493352e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.499101e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.490919e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.313888e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.212829e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (6.109522e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.613048e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.888666e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.695694e-04%)
Noelle:     Loop "  br label %32" (6.706550e-04%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv53, %30" (5.057151e-04%)
Noelle:     Loop "  br label %49" (1.175681e-05%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv51, %47" (5.038633e-06%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %69" (5.161369e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %136 = load i32, i32* %134, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %156 = load i32, i32* %154, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.340302e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.194310e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.060912e-04%)
Noelle:     Loop "  %51 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %.pre, i64 0, i32 27, i64 0" (0.000000e+00%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv, %74" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.206351e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %58 = icmp slt i32 %.1, %51" (2.140630e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %33 = load i32, i32* %31, align 4, !tbaa !63" (1.363733e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (7.967070e-07%)
Noelle:     Loop "  %119 = icmp sgt i64 %indvars.iv66, %117" (0.000000e+00%)
Noelle:     Loop "  %130 = sext i32 %129 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (4.170151e-06%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 17" (4.062488e-06%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.323538e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.312772e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.208698e-05%)
Noelle:     Loop "  %421 = icmp sgt i64 %indvars.iv44, %419" (5.670257e-07%)
Noelle:     Loop "  %536 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.588770e-08%)
Noelle:     Loop "  %550 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.588770e-08%)
Noelle:     Loop "  %564 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.529821e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.221833e-04%)
Noelle:     Loop "  %589 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.656282e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.166781e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.289635e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.289635e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.036412e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (1.980642e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.348322e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.277265e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %69 = load i32, i32* %67, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %95 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (1.007727e-05%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.554741e-05%)
Noelle:  Function "bs_write_se"
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.553937e-04%)
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.433398e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (7.992909e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.068104e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.866160e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.899726e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.323962e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.897067e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.431076e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %41 = load i32, i32* %38, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %106 = icmp ne i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %11 = icmp eq %struct.x264_frame_t* %10, null" (0.000000e+00%)
Noelle:     Loop "  %38 = sext i32 %.02 to i64" (3.866541e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.510704e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.741103e-05%)
Noelle:     Loop "  %91 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.225037e-07%)
Noelle:     Loop "  %176 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.397722e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.562382e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.268103e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.964324e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %182 = icmp ne i32 %181, 0" (0.000000e+00%)
Noelle:     Loop "  %188 = sext i32 %187 to i64" (0.000000e+00%)
Noelle:     Loop "  %329 = add nsw i32 %328, 2" (5.483641e-06%)
Noelle:     Loop "  %335 = add nsw i32 %334, 2" (4.026600e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp ne i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %422 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %402 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.747100e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.513743e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.028922e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.198649e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.197214e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.028922e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.584126e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.636479e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.804096e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.871016e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.670257e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.562594e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %57 = shl i32 1, %56" (4.593626e-07%)
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (1.801563e-06%)
Noelle:     Loop "  %464 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %498 = load i32, i32* %475, align 8, !tbaa !126" (0.000000e+00%)
Noelle:     Loop "  %517 = icmp slt i32 %.36, %516" (0.000000e+00%)
Noelle:     Loop "  %613 = load i32, i32* %7, align 4, !tbaa !30" (1.435508e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.337556e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.469497e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (9.905005e-07%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (1.019211e-06%)
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv10, %117" (6.100909e-07%)
Noelle:     Loop "  %133 = load i32, i32* %13, align 4, !tbaa !68" (4.880727e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.947647e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %120 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %115, i32* nonnull %116, i32* nonnull %117, i32* nonnull %118) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %130 = icmp eq i32 %129, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.660545e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %19" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.947647e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.512139e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.737176e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %51 = load i32, i32* %49, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.742032e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %64 = sext i32 %63 to i64" (0.000000e+00%)
Noelle:     Loop "  %114 = icmp slt i64 %indvars.iv, %112" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %38 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %164 = load i32, i32* %159, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %113 = icmp sgt i32 %.12, %104" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %124 = icmp sgt i32 %123, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %189 = icmp sgt i32 %188, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %184, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %99, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %8 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp ne i8 %14, 0" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i32 %.02, %20" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %wide.trip.count42" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %14 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %185 = icmp ult i32 %.121, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %26 = icmp slt i32 %.01, %25" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %174 = icmp slt i32 %.09, %173" (0.000000e+00%)
Noelle:     Loop "  %299 = fdiv fast double %298, %291" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %11, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %17 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %16, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %49 = sext i32 %48 to i64" (0.000000e+00%)
Noelle:     Loop "  %54 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %96 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %175 = fcmp fast ogt double %.08, %162" (0.000000e+00%)
Noelle:     Loop "  %180 = sext i32 %179 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %240 = icmp slt i64 %indvars.iv84, %213" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %217 = icmp slt i64 %indvars.iv90, %215" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count88" (0.000000e+00%)
Noelle:     Loop "  %272 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %314 = icmp slt i64 %indvars.iv, %312" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %38 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp ne i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv, %85" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %7 = load i32, i32* %4, align 8, !tbaa !60" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %24 = load i32, i32* %19, align 8, !tbaa !64" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %43 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv25, %53" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %152 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv3, %4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp slt i64 %indvars.iv, %60" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %113 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %37 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp ult i64 %indvars.iv35, %60" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp ult i64 %indvars.iv33, %86" (0.000000e+00%)
Noelle:     Loop "  %134 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv, %173" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %7 = load i32, i32* %2, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %16 = load i32, i32* %3, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %19 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %19 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %67 = icmp slt i64 %indvars.iv, %65" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %6" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.0, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.1, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %38 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %43 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %47 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp sgt i64 %indvars.iv3, %32" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %37 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp ult i64 %indvars.iv38, %60" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp ult i64 %indvars.iv36, %88" (0.000000e+00%)
Noelle:     Loop "  %198 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %93 = icmp ult i64 %indvars.iv34, %90" (0.000000e+00%)
Noelle:     Loop "  %125 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %239 = icmp slt i64 %indvars.iv, %237" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %31" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %56 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %50 = icmp sgt i32 %.03, -1" (9.187165e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv87, %36" (0.000000e+00%)
Noelle:     Loop "  %41 = icmp slt i64 %indvars.iv85, %39" (0.000000e+00%)
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv83, %74" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %170 = icmp slt i64 %indvars.iv75, %167" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %233 = icmp slt i32 %.05, %225" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %421 = icmp slt i64 %indvars.iv, %419" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %32 = load i32, i32* %3, align 4, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %211 = load i32, i32* %3, align 4, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %167 = load i32, i32* %3, align 4, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.374383e-02%)
Noelle:     Loop "  %90 = load i32, i32* %3, align 4, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %316 = load i32, i32* %3, align 4, !tbaa !66" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %55 = icmp sgt i64 %indvars.iv11, %53" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %131 = icmp sgt i64 %indvars.iv, %97" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %9 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %4 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (3.114320e-03%)
Noelle:     Loop "  %145 = load i32, i32* %136, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %27 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %indvars.iv9, %24" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv11, %25" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %59 = add nsw i32 %58, 2" (0.000000e+00%)
Noelle:     Loop "  %65 = add nsw i32 %64, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %75" (0.000000e+00%)
Noelle:     Loop "  %79 = icmp sgt i64 %indvars.iv, %74" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %65 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %41 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv21, %85" (0.000000e+00%)
Noelle:     Loop "  %107 = icmp slt i64 %indvars.iv19, %103" (0.000000e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv17, %102" (0.000000e+00%)
Noelle:     Loop "  %138 = icmp slt i64 %indvars.iv15, %134" (0.000000e+00%)
Noelle:     Loop "  %143 = icmp slt i64 %indvars.iv, %132" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (8.951997e+01%)
Noelle:     Loop "  %165 = load i8*, i8** %48, align 8, !tbaa !50" (6.993746e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %20 = load i32, i32* %6, align 4, !tbaa !36" (1.006103e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %90 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.349801e-06%)
Noelle:     Loop "  %113 = icmp eq i32 %.222, 0" (2.756175e-06%)
Noelle:     Loop "  %160 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %159, i64 0, i32 1" (8.920957e+01%)
Noelle:     Loop "  %328 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (4.564916e-06%)
Noelle:     Loop "  %363 = load %struct.x264_frame_t*, %struct.x264_frame_t** %80, align 16, !tbaa !62" (1.076631e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %52 = mul nsw i32 %.07, %51" (8.909154e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %118 = load i32, i32* %42, align 8, !tbaa !64" (3.371082e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.833144e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %20 = icmp ult i64 %indvars.iv33, 16" (1.502704e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.803168e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.069964e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.214831e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv19, %45" (1.456000e+01%)
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv17, %50" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.000994e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.150987e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv43, 16" (1.325785e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.249813e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.572341e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.950059e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %86 = icmp slt i64 %indvars.iv22, %46" (4.731222e+00%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv20, %51" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.508336e+00%)
Noelle:     Loop "  %142 = icmp slt i32 %.3, %140" (1.102915e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (8.412330e-01%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (7.669891e-01%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (1.709545e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.066109e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (1.460211e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.529729e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.304341e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.256840e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %177 = icmp slt i64 %indvars.iv709, %175" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv707, %88" (8.461740e-01%)
Noelle:     Loop "  %2513 = icmp sgt i64 %indvars.iv705, %2510" (0.000000e+00%)
Noelle:     Loop "  %2531 = icmp slt i64 %indvars.iv701, %2529" (0.000000e+00%)
Noelle:     Loop "  %2600 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp sgt i64 %indvars.iv699, %2294" (0.000000e+00%)
Noelle:     Loop "  %2319 = icmp slt i64 %indvars.iv695, %2317" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2366 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2410 = icmp slt i64 %indvars.iv690, %2408" (0.000000e+00%)
Noelle:     Loop "  %2420 = icmp slt i64 %indvars.iv688, %2418" (0.000000e+00%)
Noelle:     Loop "  %2439 = icmp slt i64 %indvars.iv686, %2437" (0.000000e+00%)
Noelle:     Loop "  %2446 = icmp slt i64 %indvars.iv684, %2436" (0.000000e+00%)
Noelle:     Loop "  %2466 = icmp slt i64 %indvars.iv680, %2464" (0.000000e+00%)
Noelle:     Loop "  %1014 = icmp slt i64 %indvars.iv678, %1009" (6.975159e-02%)
Noelle:     Loop "  %1089 = icmp slt i64 %indvars.iv676, %1083" (5.724797e-02%)
Noelle:     Loop "  %1153 = icmp slt i64 %indvars.iv674, %1148" (7.565676e-02%)
Noelle:     Loop "  %1236 = icmp slt i64 %indvars.iv672, %1230" (5.736187e-02%)
Noelle:     Loop "  %1478 = icmp slt i64 %indvars.iv670, %1474" (6.536902e-01%)
Noelle:     Loop "  %1555 = icmp slt i64 %indvars.iv668, %1549" (8.364263e-02%)
Noelle:     Loop "  %1625 = icmp slt i64 %indvars.iv666, %1621" (3.283756e-01%)
Noelle:     Loop "  %1709 = icmp slt i64 %indvars.iv664, %1703" (7.338096e-02%)
Noelle:     Loop "  %1852 = shl nsw i64 %indvars.iv662, 2" (3.066542e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.144575e-01%)
Noelle:     Loop "  %439 = icmp slt i32 %.3345, %437" (6.759339e-02%)
Noelle:     Loop "  %245 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %72 = sext i32 %71 to i64" (7.185278e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.217891e-01%)
Noelle:     Loop "  %157 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %189 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %205 = load i32, i32* %4, align 4, !tbaa !62" (0.000000e+00%)
Noelle:     Loop "  %329 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.775843e+00%)
Noelle:     Loop "  %365 = icmp sgt i64 %indvars.iv, -1" (8.573919e-01%)
Noelle:     Loop "  %378 = load i32, i32* %4, align 4, !tbaa !62" (3.960896e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.109444e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (4.991707e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.516371e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.139994e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.481012e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %31" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %298 = icmp slt i64 %indvars.iv22, %296" (0.000000e+00%)
Noelle:     Loop "  %316 = icmp slt i64 %indvars.iv20, %314" (0.000000e+00%)
Noelle:     Loop "  %370 = icmp eq i32 %333, 1" (1.428705e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.069245e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.015206e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %37 = sext i32 %36 to i64" (3.953648e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.436348e-03%)
Noelle:     Loop "  %70 = icmp slt i32 %.01, %1" (1.774272e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %48, align 16, !tbaa !73" (1.754252e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.927039e-02%)
Noelle:     Loop "  %358 = icmp slt i64 %indvars.iv86, %356" (5.473486e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.515459e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (5.205344e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (7.283498e-02%)
Noelle:     Loop "  %772 = icmp slt i64 %indvars.iv100, %770" (5.567433e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.479782e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (5.211671e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %113 = icmp sgt i32 %.078, 0" (4.053451e-01%)
Noelle:     Loop "  %264 = icmp sgt i32 %.179, 0" (4.694284e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.020776e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.174661e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.010656e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %123 = icmp slt i64 %indvars.iv18, %97" (2.858188e-01%)
Noelle:     Loop "  %100 = icmp slt i64 %indvars.iv16, %98" (3.987161e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.488930e-01%)
Noelle:     Loop "  %172 = icmp slt i64 %indvars.iv11, %146" (0.000000e+00%)
Noelle:     Loop "  %149 = icmp slt i64 %indvars.iv9, %147" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.006031e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.562651e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.944579e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.637892e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.297952e-01%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (2.351943e-01%)
Noelle:     Loop "  %145 = load i32, i32* %135, align 8, !tbaa !82" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.489228e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %256" (2.034320e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.538781e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (3.406945e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (7.000675e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.130000e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (4.021663e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.290121e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %55 = load i32, i32* %3, align 4, !tbaa !67" (1.600965e-01%)
Noelle:     Loop "  %84 = sext i32 %83 to i64" (8.010321e-03%)
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %147 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %156 = icmp slt i64 %indvars.iv18, %154" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.941532e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.592822e-02%)
Noelle:     Loop "  %26 = sub nsw i32 %.1, %.0" (1.031802e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.944897e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.331641e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %99 = icmp slt i64 %indvars.iv, %97" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.236362e-01%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.100400e-02%)
Noelle:     Loop "  %exitcond11 = icmp ne i64 %indvars.iv6, %46" (8.421716e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.442093e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %53 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv, %87" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (5.966154e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.684862e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.396308e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.396308e-02%)
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %187 = load i32, i32* %133, align 4, !tbaa !92" (0.000000e+00%)
Noelle:     Loop "  %203 = icmp sgt i32 %202, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.715393e-03%)
Noelle:     Loop "  %exitcond8 = icmp ne i64 %indvars.iv, %42" (4.750900e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.525957e-02%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv3, %36" (2.082247e-03%)
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv, %54" (2.082247e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.330260e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.330260e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (3.980746e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.725556e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %54 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %35 = icmp sgt i32 %.01, 0" (8.599906e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %59 = load i32, i32* %12, align 4, !tbaa !62" (2.989769e-02%)
Noelle:     Loop "  %18 = load i32, i32* %12, align 4, !tbaa !62" (1.383952e-03%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.337095e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.433774e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.897215e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (4.233780e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.699850e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %35 = icmp sgt i32 %.01, 0" (2.785302e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %57 = icmp sgt i32 %56, 65535" (0.000000e+00%)
Noelle:     Loop "  %237 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (3.710788e-06%)
Noelle:     Loop "  %355 = load i32, i32* %353, align 4, !tbaa !83" (3.588770e-08%)
Noelle:     Loop "  %365 = sext i32 %364 to i64" (3.351911e-06%)
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.155458e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.122255e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.901761e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.480558e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.189247e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.166637e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %34 = icmp sgt i32 %.04, %6" (8.884790e-04%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv13, %81" (0.000000e+00%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv, %78" (0.000000e+00%)
Noelle:     Loop "  %125 = icmp slt i32 %.16, %71" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 15" (1.789497e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (1.553033e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (1.194350e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (2.352582e-04%)
Noelle:     Loop "  %11 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (1.984518e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.558330e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.718009e-05%)
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.593988e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count4" (1.548971e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.308846e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.588770e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.885583e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.741863e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.184294e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.525270e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.265016e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.626854e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.493352e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.499101e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.490919e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.313888e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.212829e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (6.109522e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.613048e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.888666e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.695694e-04%)
Noelle:     Loop "  br label %32" (6.706550e-04%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv53, %30" (5.057151e-04%)
Noelle:     Loop "  br label %49" (1.175681e-05%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv51, %47" (5.038633e-06%)
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv, %69" (5.161369e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %136 = load i32, i32* %134, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %156 = load i32, i32* %154, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.340302e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.194310e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.060912e-04%)
Noelle:     Loop "  %51 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %.pre, i64 0, i32 27, i64 0" (0.000000e+00%)
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv, %74" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.206351e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %58 = icmp slt i32 %.1, %51" (2.140630e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %33 = load i32, i32* %31, align 4, !tbaa !63" (1.363733e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (7.967070e-07%)
Noelle:     Loop "  %119 = icmp sgt i64 %indvars.iv66, %117" (0.000000e+00%)
Noelle:     Loop "  %130 = sext i32 %129 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (4.170151e-06%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 17" (4.062488e-06%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.323538e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.312772e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.208698e-05%)
Noelle:     Loop "  %421 = icmp sgt i64 %indvars.iv44, %419" (5.670257e-07%)
Noelle:     Loop "  %536 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.588770e-08%)
Noelle:     Loop "  %550 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.588770e-08%)
Noelle:     Loop "  %564 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.529821e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.221833e-04%)
Noelle:     Loop "  %589 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.656282e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.166781e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.289635e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.289635e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.036412e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (1.980642e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.348322e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.277265e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %69 = load i32, i32* %67, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %95 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (1.007727e-05%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.554741e-05%)
Noelle:  Function "bs_write_se"
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.553937e-04%)
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.433398e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (7.992909e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.068104e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.866160e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.899726e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.323962e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.897067e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.431076e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %41 = load i32, i32* %38, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %106 = icmp ne i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %11 = icmp eq %struct.x264_frame_t* %10, null" (0.000000e+00%)
Noelle:     Loop "  %38 = sext i32 %.02 to i64" (3.866541e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.510704e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.741103e-05%)
Noelle:     Loop "  %91 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.225037e-07%)
Noelle:     Loop "  %176 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.397722e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.562382e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.268103e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.964324e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %182 = icmp ne i32 %181, 0" (0.000000e+00%)
Noelle:     Loop "  %188 = sext i32 %187 to i64" (0.000000e+00%)
Noelle:     Loop "  %329 = add nsw i32 %328, 2" (5.483641e-06%)
Noelle:     Loop "  %335 = add nsw i32 %334, 2" (4.026600e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %70 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp ne i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %422 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %402 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.747100e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.513743e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.028922e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.198649e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.197214e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.028922e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.584126e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.636479e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.804096e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.871016e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.670257e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.562594e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %57 = shl i32 1, %56" (4.593626e-07%)
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (1.801563e-06%)
Noelle:     Loop "  %464 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %498 = load i32, i32* %475, align 8, !tbaa !126" (0.000000e+00%)
Noelle:     Loop "  %517 = icmp slt i32 %.36, %516" (0.000000e+00%)
Noelle:     Loop "  %613 = load i32, i32* %7, align 4, !tbaa !30" (1.435508e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.337556e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.469497e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (9.905005e-07%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (1.019211e-06%)
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv10, %117" (6.100909e-07%)
Noelle:     Loop "  %133 = load i32, i32* %13, align 4, !tbaa !68" (4.880727e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.947647e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %120 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %115, i32* nonnull %116, i32* nonnull %117, i32* nonnull %118) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %130 = icmp eq i32 %129, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.660545e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %19" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.947647e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.512139e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.737176e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %51 = load i32, i32* %49, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.742032e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %64 = sext i32 %63 to i64" (0.000000e+00%)
Noelle:     Loop "  %114 = icmp slt i64 %indvars.iv, %112" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %38 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %164 = load i32, i32* %159, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %113 = icmp sgt i32 %.12, %104" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %124 = icmp sgt i32 %123, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %189 = icmp sgt i32 %188, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %184, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %100 = icmp sgt i32 %99, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %8 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp ne i8 %14, 0" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i32 %.02, %20" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %wide.trip.count42" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %14 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %185 = icmp ult i32 %.121, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %26 = icmp slt i32 %.01, %25" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %174 = icmp slt i32 %.09, %173" (0.000000e+00%)
Noelle:     Loop "  %299 = fdiv fast double %298, %291" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %11, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %17 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %16, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %49 = sext i32 %48 to i64" (0.000000e+00%)
Noelle:     Loop "  %54 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %96 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %175 = fcmp fast ogt double %.08, %162" (0.000000e+00%)
Noelle:     Loop "  %180 = sext i32 %179 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %240 = icmp slt i64 %indvars.iv84, %213" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %217 = icmp slt i64 %indvars.iv90, %215" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count88" (0.000000e+00%)
Noelle:     Loop "  %272 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %314 = icmp slt i64 %indvars.iv, %312" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %38 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp ne i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv, %85" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %7 = load i32, i32* %4, align 8, !tbaa !60" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %24 = load i32, i32* %19, align 8, !tbaa !64" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %43 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv25, %53" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %152 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv3, %4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %30 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp slt i64 %indvars.iv, %60" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond31 = icmp eq i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %113 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %37 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp ult i64 %indvars.iv35, %60" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp ult i64 %indvars.iv33, %86" (0.000000e+00%)
Noelle:     Loop "  %134 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv, %173" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %7 = load i32, i32* %2, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %16 = load i32, i32* %3, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %19 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %19 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %67 = icmp slt i64 %indvars.iv, %65" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %6" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.0, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.1, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %38 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %43 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %47 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp sgt i64 %indvars.iv3, %32" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %37 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp ult i64 %indvars.iv38, %60" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp ult i64 %indvars.iv36, %88" (0.000000e+00%)
Noelle:     Loop "  %198 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %93 = icmp ult i64 %indvars.iv34, %90" (0.000000e+00%)
Noelle:     Loop "  %125 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %239 = icmp slt i64 %indvars.iv, %237" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %31" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %56 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %50 = icmp sgt i32 %.03, -1" (9.187165e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv87, %36" (0.000000e+00%)
Noelle:     Loop "  %41 = icmp slt i64 %indvars.iv85, %39" (0.000000e+00%)
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv83, %74" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %170 = icmp slt i64 %indvars.iv75, %167" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %233 = icmp slt i32 %.05, %225" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %421 = icmp slt i64 %indvars.iv, %419" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %32 = load i32, i32* %3, align 4, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %211 = load i32, i32* %3, align 4, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %167 = load i32, i32* %3, align 4, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.374383e-02%)
Noelle:     Loop "  %90 = load i32, i32* %3, align 4, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %316 = load i32, i32* %3, align 4, !tbaa !66" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %55 = icmp sgt i64 %indvars.iv11, %53" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %131 = icmp sgt i64 %indvars.iv, %97" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %9 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %4 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (3.114320e-03%)
Noelle:     Loop "  %145 = load i32, i32* %136, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %27 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %69 = icmp slt i64 %indvars.iv9, %24" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv11, %25" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %59 = add nsw i32 %58, 2" (0.000000e+00%)
Noelle:     Loop "  %65 = add nsw i32 %64, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %75" (0.000000e+00%)
Noelle:     Loop "  %79 = icmp sgt i64 %indvars.iv, %74" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %58 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %65 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %41 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %87 = icmp slt i64 %indvars.iv21, %85" (0.000000e+00%)
Noelle:     Loop "  %107 = icmp slt i64 %indvars.iv19, %103" (0.000000e+00%)
Noelle:     Loop "  %112 = icmp slt i64 %indvars.iv17, %102" (0.000000e+00%)
Noelle:     Loop "  %138 = icmp slt i64 %indvars.iv15, %134" (0.000000e+00%)
Noelle:     Loop "  %143 = icmp slt i64 %indvars.iv, %132" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %34 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %52 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-inline baseline_pre.bc "-noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier"
NOELLE: Inliner: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.NrjblScI4i (.ll version is /tmp/tmp.xd9uGnhuqR)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.OUAA9QJ7Vx (.ll version is /tmp/tmp.nMh7wKefQy)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.NrjblScI4i -o /tmp/tmp.OUAA9QJ7Vx
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.NrjblScI4i -o /tmp/tmp.OUAA9QJ7Vx
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.NrjblScI4i -o /tmp/tmp.OUAA9QJ7Vx
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.NrjblScI4i -o /tmp/tmp.OUAA9QJ7Vx
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Inliner.so -inliner -noelle-inliner-verbose=1 -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.NrjblScI4i -o /tmp/tmp.OUAA9QJ7Vx
Inliner: Start
Inliner:   Number of program instructions = 67935
Inliner:     There are too many instructions. We'll not inline anything
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (8.920261e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (6.968952e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.021801e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.464521e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.799196e-06%)
Noelle:     Loop "  %149 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %148, i64 0, i32 1" (8.887398e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.863473e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.093436e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (8.875565e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.423700e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.877365e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  br label %NodeBlock21" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock28" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.526159e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.815987e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.078782e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.224845e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.478726e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.016618e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.122860e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  br label %NodeBlock24" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock31" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.346479e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.281686e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.656081e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (6.002122e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.805070e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.625530e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.120130e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  br i1 true, label %.us-lcssa36.us.loopexit.us-lcssa.us, label %.split33.us.us.us, !prof !107" (7.137177e-02%)
Noelle:     Loop "  br i1 true, label %.us-lcssa34.us.us.us, label %337, !prof !108" (6.316086e-02%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (3.960747e-01%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (3.631303e-01%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (1.736229e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.082750e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (1.483003e-01%)
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.525421e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.296515e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.250003e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.593816e-01%)
Noelle:     Loop "  %2368 = icmp sgt i64 %indvars.iv705, %2365" (0.000000e+00%)
Noelle:     Loop "  %2386 = icmp slt i64 %indvars.iv701, %2384" (0.000000e+00%)
Noelle:     Loop "  %2454 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2163 = icmp sgt i64 %indvars.iv699, %2160" (0.000000e+00%)
Noelle:     Loop "  %2185 = icmp slt i64 %indvars.iv695, %2183" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2231 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2273 = icmp slt i64 %indvars.iv690, %2271" (0.000000e+00%)
Noelle:     Loop "  %2281 = icmp slt i64 %indvars.iv688, %2271" (0.000000e+00%)
Noelle:     Loop "  %2298 = icmp slt i64 %indvars.iv686, %2296" (0.000000e+00%)
Noelle:     Loop "  %2305 = icmp slt i64 %indvars.iv684, %2295" (0.000000e+00%)
Noelle:     Loop "  %2321 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.779342e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.508330e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.227304e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.519283e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.338856e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.091911e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.163702e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.098592e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.835436e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.059691e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.864843e-02%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv67, %64" (6.611423e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.156518e-01%)
Noelle:     Loop "  %141 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv61, %184" (0.000000e+00%)
Noelle:     Loop "  %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.571098e+00%)
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv, -1" (8.707746e-01%)
Noelle:     Loop "  %342 = icmp slt i64 %indvars.iv55, %340" (3.755267e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.140005e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.069620e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.555648e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.173397e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.508097e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.416937e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.085935e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.155921e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.940305e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.377404e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.768008e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.747637e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.710934e-02%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv86, %spec.select" (5.479919e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.310169e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.985644e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (7.023123e-02%)
Noelle:     Loop "  %713 = icmp slt i64 %indvars.iv100, %spec.select" (5.557486e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.273935e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.923095e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.116719e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.767555e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.036708e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.224213e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.088865e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.902801e-01%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv16, %95" (4.049395e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.527779e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.021734e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.649476e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (5.021757e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.663457e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.318211e-01%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (2.388653e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %133 = load i32, i32* %123, align 8, !tbaa !83" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.574908e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.066073e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.562799e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (3.460123e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (7.109946e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.210073e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.959242e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.241101e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.499910e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv, %77" (7.449344e-03%)
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (4.003054e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.711335e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.047907e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.975254e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.352426e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.255660e-01%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.133185e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.553168e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.542646e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.059278e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.726769e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.418102e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.418102e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.788993e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.825055e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.596601e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.114748e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.114748e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.366632e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.366632e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.042880e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.768098e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.734139e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.996905e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.968364e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.390202e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.357965e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.456153e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.942436e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.583218e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.726382e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.828777e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %56 = icmp sgt i32 %55, 65535" (0.000000e+00%)
Noelle:     Loop "  %229 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (3.972817e-06%)
Noelle:     Loop "  %338 = load i32, i32* %336, align 4, !tbaa !83" (3.644786e-08%)
Noelle:     Loop "  %347 = sext i32 %346 to i64" (3.360493e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  br label %NodeBlock4" (8.958366e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.398688e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.409182e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.548467e-03%)
Noelle:     Loop "  %8 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.501801e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.707523e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.838476e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.251537e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.155381e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.931445e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.519276e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.207809e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.184847e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (9.023469e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.620734e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count4.pre-phi" (1.573148e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.273018e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.644786e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.977449e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.847095e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.202779e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.611512e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.300370e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.745899e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.610313e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.522500e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.514190e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.170444e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.071597e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (6.018270e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.467566e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.747486e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.722161e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.321808e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.136086e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.823039e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.117279e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.241931e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.470482e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.322212e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.077472e-04%)
Noelle:     Loop "  %50 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %65 = load i32, i32* %63, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv, %73" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.256397e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.174042e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.385019e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.091425e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.600061e-05%)
Noelle:     Loop "  br label %NodeBlock" (1.589127e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.344926e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.332534e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.227564e-05%)
Noelle:     Loop "  %399 = icmp sgt i64 %indvars.iv44, %397" (5.758762e-07%)
Noelle:     Loop "  %507 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.644786e-08%)
Noelle:     Loop "  %520 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.644786e-08%)
Noelle:     Loop "  %533 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.553699e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.240904e-04%)
Noelle:     Loop "  %558 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.775786e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.184993e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.325373e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.325373e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.068197e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (2.011557e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.400585e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.328418e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.528799e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.703878e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.578192e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.518206e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.117667e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.209645e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.895289e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.944987e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.438279e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.989112e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.531456e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.739550e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.549892e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.756187e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.259767e-07%)
Noelle:     Loop "  %164 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.528799e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.602377e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.303505e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (3.010593e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %184 = sext i32 %183 to i64" (0.000000e+00%)
Noelle:     Loop "  %320 = add nsw i32 %319, 2" (5.416152e-06%)
Noelle:     Loop "  %325 = add nsw i32 %324, 2" (4.089450e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %372 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %354 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.899238e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.537371e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.076199e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.217358e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.215901e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.076199e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.671287e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.559968e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.863473e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.915829e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.758762e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.649418e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.665326e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.389651e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.601695e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (1.005961e-06%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (1.049698e-06%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %443 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %476 = icmp slt i64 %indvars.iv57, %472" (0.000000e+00%)
Noelle:     Loop "  %493 = icmp slt i32 %.36, %492" (0.000000e+00%)
Noelle:     Loop "  %576 = load i32, i32* %7, align 4, !tbaa !30" (1.457914e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.913817e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.196136e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.956909e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (4.009264e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.717682e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (4.009264e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.551350e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.811117e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.831657e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock16" (0.000000e+00%)
Noelle:     Loop "  %20 = icmp slt i32 %.02, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %13 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i64 %indvars.iv84, %197" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %198 = icmp slt i64 %indvars.iv90, %197" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %249 = sext i32 %.pre31 to i64" (0.000000e+00%)
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv, %286" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %7 = sext i32 %.pre to i64" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %24 = sext i32 %.pre to i64" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock31" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %.pre-phi" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in1, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %.pre-phi" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock38" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock31" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (1.472662e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %430 = icmp slt i64 %indvars.iv, %428" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.395836e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.538442e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %62 = add nsw i32 %61, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %72" (0.000000e+00%)
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv, %71" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (8.920261e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (6.968952e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.021801e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.464521e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.799196e-06%)
Noelle:     Loop "  %149 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %148, i64 0, i32 1" (8.887398e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.863473e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.093436e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (8.875565e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.423700e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.877365e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  br label %NodeBlock21" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock28" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.526159e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.815987e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.078782e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.224845e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.478726e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.016618e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.122860e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  br label %NodeBlock24" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock31" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.346479e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.281686e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.656081e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (6.002122e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.805070e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.625530e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.120130e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  br i1 true, label %.us-lcssa36.us.loopexit.us-lcssa.us, label %.split33.us.us.us, !prof !107" (7.137177e-02%)
Noelle:     Loop "  br i1 true, label %.us-lcssa34.us.us.us, label %337, !prof !108" (6.316086e-02%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (3.960747e-01%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (3.631303e-01%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (1.736229e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.082750e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (1.483003e-01%)
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.525421e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.296515e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.250003e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.593816e-01%)
Noelle:     Loop "  %2368 = icmp sgt i64 %indvars.iv705, %2365" (0.000000e+00%)
Noelle:     Loop "  %2386 = icmp slt i64 %indvars.iv701, %2384" (0.000000e+00%)
Noelle:     Loop "  %2454 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2163 = icmp sgt i64 %indvars.iv699, %2160" (0.000000e+00%)
Noelle:     Loop "  %2185 = icmp slt i64 %indvars.iv695, %2183" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2231 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2273 = icmp slt i64 %indvars.iv690, %2271" (0.000000e+00%)
Noelle:     Loop "  %2281 = icmp slt i64 %indvars.iv688, %2271" (0.000000e+00%)
Noelle:     Loop "  %2298 = icmp slt i64 %indvars.iv686, %2296" (0.000000e+00%)
Noelle:     Loop "  %2305 = icmp slt i64 %indvars.iv684, %2295" (0.000000e+00%)
Noelle:     Loop "  %2321 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.779342e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.508330e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.227304e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.519283e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.338856e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.091911e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.163702e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.098592e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.835436e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.059691e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.864843e-02%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv67, %64" (6.611423e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.156518e-01%)
Noelle:     Loop "  %141 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv61, %184" (0.000000e+00%)
Noelle:     Loop "  %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.571098e+00%)
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv, -1" (8.707746e-01%)
Noelle:     Loop "  %342 = icmp slt i64 %indvars.iv55, %340" (3.755267e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.140005e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.069620e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.555648e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.173397e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.508097e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.416937e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.085935e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.155921e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.940305e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.377404e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.768008e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.747637e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.710934e-02%)
Noelle:     Loop "  %336 = icmp slt i64 %indvars.iv86, %spec.select" (5.479919e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.310169e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.985644e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (7.023123e-02%)
Noelle:     Loop "  %713 = icmp slt i64 %indvars.iv100, %spec.select" (5.557486e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.273935e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.923095e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.116719e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.767555e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.036708e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.224213e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.088865e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.902801e-01%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv16, %95" (4.049395e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.527779e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.021734e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.649476e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (5.021757e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.663457e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.318211e-01%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (2.388653e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %133 = load i32, i32* %123, align 8, !tbaa !83" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.574908e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.066073e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.562799e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (3.460123e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (7.109946e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.210073e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.959242e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.241101e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.499910e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv, %77" (7.449344e-03%)
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (4.003054e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.711335e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.047907e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.975254e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.352426e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.255660e-01%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.133185e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.553168e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.542646e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.059278e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.726769e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.418102e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.418102e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.788993e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.825055e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.596601e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.114748e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.114748e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.366632e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.366632e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.042880e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.768098e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.734139e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.996905e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.968364e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.390202e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.357965e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.456153e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.942436e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.583218e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.726382e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.828777e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %56 = icmp sgt i32 %55, 65535" (0.000000e+00%)
Noelle:     Loop "  %229 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (3.972817e-06%)
Noelle:     Loop "  %338 = load i32, i32* %336, align 4, !tbaa !83" (3.644786e-08%)
Noelle:     Loop "  %347 = sext i32 %346 to i64" (3.360493e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  br label %NodeBlock4" (8.958366e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.398688e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.409182e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.548467e-03%)
Noelle:     Loop "  %8 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.501801e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.707523e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.838476e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.251537e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.155381e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.931445e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.519276e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.207809e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.184847e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (9.023469e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.620734e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count4.pre-phi" (1.573148e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.273018e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.644786e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.977449e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.847095e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.202779e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.611512e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.300370e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.745899e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.610313e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.522500e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.514190e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.170444e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.071597e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (6.018270e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.467566e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.747486e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.722161e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.321808e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.136086e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.823039e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.117279e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.241931e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.470482e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.322212e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.077472e-04%)
Noelle:     Loop "  %50 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %65 = load i32, i32* %63, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv, %73" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.256397e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.174042e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.385019e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.091425e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.600061e-05%)
Noelle:     Loop "  br label %NodeBlock" (1.589127e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.344926e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.332534e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.227564e-05%)
Noelle:     Loop "  %399 = icmp sgt i64 %indvars.iv44, %397" (5.758762e-07%)
Noelle:     Loop "  %507 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.644786e-08%)
Noelle:     Loop "  %520 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.644786e-08%)
Noelle:     Loop "  %533 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.553699e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.240904e-04%)
Noelle:     Loop "  %558 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.775786e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.184993e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.325373e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.325373e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.068197e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (2.011557e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.400585e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.328418e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.528799e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.703878e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.578192e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.518206e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.117667e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.209645e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.895289e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.944987e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.438279e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.989112e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.531456e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.739550e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.549892e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.756187e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.259767e-07%)
Noelle:     Loop "  %164 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.528799e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.602377e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.303505e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (3.010593e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %184 = sext i32 %183 to i64" (0.000000e+00%)
Noelle:     Loop "  %320 = add nsw i32 %319, 2" (5.416152e-06%)
Noelle:     Loop "  %325 = add nsw i32 %324, 2" (4.089450e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %372 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %354 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.899238e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.537371e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.076199e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.217358e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.215901e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.076199e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.671287e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.559968e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.863473e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.915829e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.758762e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.649418e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.665326e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.389651e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.601695e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (1.005961e-06%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (1.049698e-06%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %443 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %476 = icmp slt i64 %indvars.iv57, %472" (0.000000e+00%)
Noelle:     Loop "  %493 = icmp slt i32 %.36, %492" (0.000000e+00%)
Noelle:     Loop "  %576 = load i32, i32* %7, align 4, !tbaa !30" (1.457914e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.913817e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.196136e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.956909e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (4.009264e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.717682e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (4.009264e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.551350e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.811117e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.831657e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock16" (0.000000e+00%)
Noelle:     Loop "  %20 = icmp slt i32 %.02, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %13 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i64 %indvars.iv84, %197" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %198 = icmp slt i64 %indvars.iv90, %197" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %249 = sext i32 %.pre31 to i64" (0.000000e+00%)
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv, %286" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %7 = sext i32 %.pre to i64" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %24 = sext i32 %.pre to i64" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock31" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %.pre-phi" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in1, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %.pre-phi" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock38" (0.000000e+00%)
Noelle:     Loop "  br label %NodeBlock31" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (1.472662e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %430 = icmp slt i64 %indvars.iv, %428" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.395836e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.538442e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %62 = add nsw i32 %61, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %72" (0.000000e+00%)
Noelle:     Loop "  %75 = icmp sgt i64 %indvars.iv, %71" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Inliner: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-deadcode baseline_pre.bc baseline_pre.bc
NOELLE: DeadFunctions: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.Jw74iMLqNR (.ll version is /tmp/tmp.D20Ft7Wep1)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.QhKpbcJZg7 (.ll version is /tmp/tmp.Zp2Kv15P94)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.Jw74iMLqNR -o /tmp/tmp.QhKpbcJZg7
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.Jw74iMLqNR -o /tmp/tmp.QhKpbcJZg7
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.Jw74iMLqNR -o /tmp/tmp.QhKpbcJZg7
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DeadFunction.so -noelle-dfe /tmp/tmp.Jw74iMLqNR -o /tmp/tmp.QhKpbcJZg7
DeadFunctionEliminator: Start
DeadFunctionEliminator:   Inline functions that are invoked only by one call instruction and that do not escape into memory
DeadFunctionEliminator:   Get the islands
DeadFunctionEliminator:   Identify the islands reachable from the entry points
DeadFunctionEliminator:     Island
DeadFunctionEliminator:       llvm.lifetime.start.p0i8
DeadFunctionEliminator:       main
DeadFunctionEliminator:       pixel_avg_weight_wxh
DeadFunctionEliminator:       pixel_avg
DeadFunctionEliminator:       x264_frame_filter
DeadFunctionEliminator:       x264_predict_8x8_filter
DeadFunctionEliminator:       x264_predict_16x16_init
DeadFunctionEliminator:       predict_16x16_v
DeadFunctionEliminator:       predict_16x16_h
DeadFunctionEliminator:       predict_16x16_dc
DeadFunctionEliminator:       predict_16x16_p
DeadFunctionEliminator:       predict_16x16_dc_left
DeadFunctionEliminator:       predict_16x16_dc_top
DeadFunctionEliminator:       predict_16x16_dc_128
DeadFunctionEliminator:       x264_clip_uint8.650
DeadFunctionEliminator:       x264_predict_8x8c_init
DeadFunctionEliminator:       predict_8x8c_v
DeadFunctionEliminator:       predict_8x8c_h
DeadFunctionEliminator:       predict_8x8c_dc
DeadFunctionEliminator:       x264_picture_clean
DeadFunctionEliminator:       x264_free
DeadFunctionEliminator:       x264_nal_encode
DeadFunctionEliminator:       x264_realloc
DeadFunctionEliminator:       x264_reduce_fraction
DeadFunctionEliminator:       x264_slurp_file
DeadFunctionEliminator:       ftell
DeadFunctionEliminator:       x264_param2string
DeadFunctionEliminator:       x264_mdate
DeadFunctionEliminator:       gettimeofday
DeadFunctionEliminator:       x264_encoder_open
DeadFunctionEliminator:       x264_validate_parameters
DeadFunctionEliminator:       mbcmp_init
DeadFunctionEliminator:       llvm.pow.f64
DeadFunctionEliminator:       x264_clip3.593
DeadFunctionEliminator:       x264_clip3f
DeadFunctionEliminator:       llvm.log.f64
DeadFunctionEliminator:       x264_quant_8x8_ssse3
DeadFunctionEliminator:       x264_denoise_dct_ssse3
DeadFunctionEliminator:       x264_decimate_score15_ssse3
DeadFunctionEliminator:       x264_decimate_score16_ssse3
DeadFunctionEliminator:       x264_decimate_score64_ssse3
DeadFunctionEliminator:       x264_coeff_last_internal
DeadFunctionEliminator:       x264_decimate_score_internal
DeadFunctionEliminator:       x264_rd_cost_part
DeadFunctionEliminator:       x264_rd_cost_mb
DeadFunctionEliminator:       x264_rd_cost_subpart
DeadFunctionEliminator:       ssd_plane
DeadFunctionEliminator:       x264_partition_size_cabac
DeadFunctionEliminator:       x264_partition_size_cavlc
DeadFunctionEliminator:       cavlc_mb8x8_mvd
DeadFunctionEliminator:       cavlc_mb_mvd
DeadFunctionEliminator:       x264_macroblock_luma_write_cavlc
DeadFunctionEliminator:       array_non_zero_count_mmx
DeadFunctionEliminator:       block_residual_write_cavlc
DeadFunctionEliminator:       x264_mb_predict_non_zero_code
DeadFunctionEliminator:       bs_write_vlc
DeadFunctionEliminator:       bs_size_se
DeadFunctionEliminator:       bs_size_ue_big
DeadFunctionEliminator:       x264_cabac_mb8x8_mvd
DeadFunctionEliminator:       x264_cabac_mb_mvd
DeadFunctionEliminator:       block_residual_write_cabac
DeadFunctionEliminator:       array_non_zero_int_mmx
DeadFunctionEliminator:       array_non_zero_int_c
DeadFunctionEliminator:       x264_cabac_mb_cbf_ctxidxinc
DeadFunctionEliminator:       x264_cabac_size_decision
DeadFunctionEliminator:       x264_cabac_mb_mvd_cpn
DeadFunctionEliminator:       pack16to32_mask.785
DeadFunctionEliminator:       x264_macroblock_cache_mvd
DeadFunctionEliminator:       x264_macroblock_cache_rect4.786
DeadFunctionEliminator:       sum_satd
DeadFunctionEliminator:       sum_sa8d
DeadFunctionEliminator:       x264_subpartition_size_cabac
DeadFunctionEliminator:       x264_subpartition_size_cavlc
DeadFunctionEliminator:       ssd_mb
DeadFunctionEliminator:       x264_macroblock_size_cabac
DeadFunctionEliminator:       x264_macroblock_size_cavlc
DeadFunctionEliminator:       bs_size_ue
DeadFunctionEliminator:       x264_mb_predict_intra4x4_mode
DeadFunctionEliminator:       bs_size_te
DeadFunctionEliminator:       x264_mb_transform_8x8_allowed
DeadFunctionEliminator:       cavlc_qp_delta
DeadFunctionEliminator:       x264_cabac_mb_type
DeadFunctionEliminator:       x264_cabac_mb_transform_size
DeadFunctionEliminator:       x264_cabac_mb_intra4x4_pred_mode
DeadFunctionEliminator:       x264_cabac_mb_intra_chroma_pred_mode
DeadFunctionEliminator:       x264_cabac_mb_ref
DeadFunctionEliminator:       x264_cabac_mb_sub_p_partition
DeadFunctionEliminator:       x264_cabac_mb_sub_b_partition
DeadFunctionEliminator:       x264_cabac_mb_cbp_luma
DeadFunctionEliminator:       x264_cabac_mb_cbp_chroma
DeadFunctionEliminator:       x264_cabac_mb_qp_delta
DeadFunctionEliminator:       x264_cabac_size_decision_noup
DeadFunctionEliminator:       x264_cabac_mb_type_intra
DeadFunctionEliminator:       x264_rdo_init
DeadFunctionEliminator:       x264_cabac_size_decision2
DeadFunctionEliminator:       x264_quant_dc_trellis
DeadFunctionEliminator:       quant_trellis_cabac
DeadFunctionEliminator:       x264_cabac_size_decision_noup2
DeadFunctionEliminator:       x264_quant_4x4_trellis
DeadFunctionEliminator:       x264_quant_8x8_trellis
DeadFunctionEliminator:       x264_macroblock_analyse
DeadFunctionEliminator:       x264_mb_analyse_init
DeadFunctionEliminator:       x264_mb_cache_fenc_satd
DeadFunctionEliminator:       x264_mb_analyse_intra
DeadFunctionEliminator:       x264_intra_rd
DeadFunctionEliminator:       x264_intra_rd_refine
DeadFunctionEliminator:       x264_macroblock_probe_pskip
DeadFunctionEliminator:       x264_mb_analyse_load_costs
DeadFunctionEliminator:       x264_mb_analyse_inter_p16x16
DeadFunctionEliminator:       x264_mb_analyse_inter_p8x8_mixed_ref
DeadFunctionEliminator:       x264_mb_analyse_inter_p8x8
DeadFunctionEliminator:       x264_mb_analyse_inter_p4x4
DeadFunctionEliminator:       x264_mb_analyse_inter_b8x16
DeadFunctionEliminator:       x264_refine_bidir
DeadFunctionEliminator:       x264_mb_analyse_transform
DeadFunctionEliminator:       x264_psy_trellis_init
DeadFunctionEliminator:       x264_me_search
DeadFunctionEliminator:       x264_mb_cache_mv_b8x16
DeadFunctionEliminator:       x264_macroblock_cache_mv.800
DeadFunctionEliminator:       x264_mb_cache_mv_b16x8
DeadFunctionEliminator:       x264_mb_cache_mv_b8x8
DeadFunctionEliminator:       x264_macroblock_cache_skip
DeadFunctionEliminator:       x264_macroblock_cache_rect1.801
DeadFunctionEliminator:       x264_macroblock_cache_intra8x8_pred
DeadFunctionEliminator:       predict_8x8chroma_mode_available
DeadFunctionEliminator:       x264_mb_analyse_inter_p4x4_chroma
DeadFunctionEliminator:       predict_16x16_mode_available
DeadFunctionEliminator:       predict_4x4_mode_available
DeadFunctionEliminator:       x264_rd_cost_i4x4
DeadFunctionEliminator:       x264_rd_cost_i8x8
DeadFunctionEliminator:       x264_rd_cost_i8x8_chroma
DeadFunctionEliminator:       x264_i8x8_chroma_size_cabac
DeadFunctionEliminator:       x264_i8x8_chroma_size_cavlc
DeadFunctionEliminator:       x264_partition_i8x8_size_cabac
DeadFunctionEliminator:       x264_partition_i8x8_size_cavlc
DeadFunctionEliminator:       open_file_bsf
DeadFunctionEliminator:       set_param_bsf
DeadFunctionEliminator:       write_nalu_bsf
DeadFunctionEliminator:       set_eop_bsf
DeadFunctionEliminator:       close_file_bsf
DeadFunctionEliminator:       open_file_mkv
DeadFunctionEliminator:       x264_emms
DeadFunctionEliminator:       x264_cpu_mask_misalign_sse
DeadFunctionEliminator:       x264_slice_write
DeadFunctionEliminator:       x264_slice_header_write
DeadFunctionEliminator:       bs_align_1
DeadFunctionEliminator:       x264_cabac_pos
DeadFunctionEliminator:       x264_fdec_filter_row
DeadFunctionEliminator:       x264_bitstream_check_buffer
DeadFunctionEliminator:       set_param_mkv
DeadFunctionEliminator:       gcd
DeadFunctionEliminator:       write_nalu_mkv
DeadFunctionEliminator:       write_header_mkv
DeadFunctionEliminator:       set_eop_mkv
DeadFunctionEliminator:       close_file_mkv
DeadFunctionEliminator:       x264_param_default
DeadFunctionEliminator:       x264_log_default
DeadFunctionEliminator:       vfprintf
DeadFunctionEliminator:       x264_param_parse
DeadFunctionEliminator:       strdup
DeadFunctionEliminator:       x264_atobool
DeadFunctionEliminator:       __ctype_b_loc
DeadFunctionEliminator:       x264_atoi
DeadFunctionEliminator:       strtok_r
DeadFunctionEliminator:       strcasecmp
DeadFunctionEliminator:       x264_atof
DeadFunctionEliminator:       parse_enum
DeadFunctionEliminator:       strstr
DeadFunctionEliminator:       parse_cqm
DeadFunctionEliminator:       zigzag_scan_8x8_frame
DeadFunctionEliminator:       zigzag_scan_4x4_frame
DeadFunctionEliminator:       zigzag_sub_8x8_frame
DeadFunctionEliminator:       zigzag_sub_4x4_frame
DeadFunctionEliminator:       x264_zigzag_scan_4x4_frame_mmx
DeadFunctionEliminator:       x264_zigzag_scan_8x8_frame_mmxext
DeadFunctionEliminator:       x264_zigzag_scan_8x8_frame_sse2
DeadFunctionEliminator:       x264_zigzag_sub_4x4_frame_ssse3
DeadFunctionEliminator:       x264_zigzag_scan_8x8_frame_ssse3
DeadFunctionEliminator:       x264_zigzag_scan_4x4_frame_ssse3
DeadFunctionEliminator:       zigzag_interleave_8x8_cavlc
DeadFunctionEliminator:       x264_zigzag_interleave_8x8_cavlc_mmx
DeadFunctionEliminator:       x264_cpu_detect
DeadFunctionEliminator:       x264_cpu_cpuid
DeadFunctionEliminator:       x264_cabac_context_init
DeadFunctionEliminator:       x264_clip3.748
DeadFunctionEliminator:       x264_cabac_encode_init
DeadFunctionEliminator:       x264_cabac_encode_decision_c
DeadFunctionEliminator:       x264_cabac_encode_renorm
DeadFunctionEliminator:       x264_cabac_putbyte
DeadFunctionEliminator:       x264_cabac_encode_bypass
DeadFunctionEliminator:       x264_cabac_encode_ue_bypass
DeadFunctionEliminator:       x264_cabac_encode_terminal
DeadFunctionEliminator:       x264_cabac_encode_flush
DeadFunctionEliminator:       x264_cqm_init
DeadFunctionEliminator:       x264_cqm_delete
DeadFunctionEliminator:       x264_cqm_parse_file
DeadFunctionEliminator:       strcspn
DeadFunctionEliminator:       x264_cqm_parse_jmlist
DeadFunctionEliminator:       strpbrk
DeadFunctionEliminator:       x264_quant_init
DeadFunctionEliminator:       quant_8x8
DeadFunctionEliminator:       quant_4x4
DeadFunctionEliminator:       quant_4x4_dc
DeadFunctionEliminator:       quant_2x2_dc
DeadFunctionEliminator:       dequant_4x4
DeadFunctionEliminator:       dequant_4x4_dc
DeadFunctionEliminator:       dequant_8x8
DeadFunctionEliminator:       x264_denoise_dct
DeadFunctionEliminator:       x264_decimate_score15
DeadFunctionEliminator:       x264_decimate_score16
DeadFunctionEliminator:       x264_decimate_score64
DeadFunctionEliminator:       x264_coeff_last4
DeadFunctionEliminator:       x264_coeff_last15
DeadFunctionEliminator:       x264_coeff_last16
DeadFunctionEliminator:       x264_coeff_last64
DeadFunctionEliminator:       x264_quant_2x2_dc_mmxext
DeadFunctionEliminator:       x264_coeff_last4_mmxext
DeadFunctionEliminator:       x264_quant_4x4_dc_sse2
DeadFunctionEliminator:       x264_quant_4x4_sse2
DeadFunctionEliminator:       x264_quant_8x8_sse2
DeadFunctionEliminator:       x264_dequant_4x4_sse2
DeadFunctionEliminator:       x264_dequant_4x4dc_sse2
DeadFunctionEliminator:       x264_dequant_8x8_sse2
DeadFunctionEliminator:       x264_dequant_4x4_flat16_sse2
DeadFunctionEliminator:       x264_dequant_8x8_flat16_sse2
DeadFunctionEliminator:       x264_denoise_dct_sse2
DeadFunctionEliminator:       x264_decimate_score15_sse2
DeadFunctionEliminator:       x264_decimate_score16_sse2
DeadFunctionEliminator:       x264_decimate_score64_sse2
DeadFunctionEliminator:       x264_coeff_last15_sse2
DeadFunctionEliminator:       x264_coeff_last16_sse2
DeadFunctionEliminator:       x264_coeff_last64_sse2
DeadFunctionEliminator:       x264_quant_2x2_dc_ssse3
DeadFunctionEliminator:       x264_quant_4x4_dc_ssse3
DeadFunctionEliminator:       x264_quant_4x4_ssse3
DeadFunctionEliminator:       printf
DeadFunctionEliminator:       fflush
DeadFunctionEliminator:       Parse
DeadFunctionEliminator:       SigIntHandler
DeadFunctionEliminator:       signal
DeadFunctionEliminator:       Encode
DeadFunctionEliminator:       llvm.lifetime.end.p0i8
DeadFunctionEliminator:       x264_clip3
DeadFunctionEliminator:       fprintf
DeadFunctionEliminator:       parse_qpfile
DeadFunctionEliminator:       Encode_frame
DeadFunctionEliminator:       sprintf
DeadFunctionEliminator:       ftello
DeadFunctionEliminator:       __isoc99_fscanf
DeadFunctionEliminator:       fseeko
DeadFunctionEliminator:       fclose
DeadFunctionEliminator:       exit
DeadFunctionEliminator:       llvm.memcpy.p0i8.p0i8.i64
DeadFunctionEliminator:       llvm.memset.p0i8.i64
DeadFunctionEliminator:       getopt_long
DeadFunctionEliminator:       Help
DeadFunctionEliminator:       atoi
DeadFunctionEliminator:       mk_flushContextID
DeadFunctionEliminator:       strlen
DeadFunctionEliminator:       strncasecmp
DeadFunctionEliminator:       strcmp
DeadFunctionEliminator:       fopen
DeadFunctionEliminator:       __isoc99_sscanf
DeadFunctionEliminator:       strtol
DeadFunctionEliminator:       strtable_lookup
DeadFunctionEliminator:       mk_createWriter
DeadFunctionEliminator:       malloc
DeadFunctionEliminator:       mk_createContext
DeadFunctionEliminator:       free
DeadFunctionEliminator:       mk_destroyContexts
DeadFunctionEliminator:       mk_writeHeader
DeadFunctionEliminator:       mk_writeUInt
DeadFunctionEliminator:       mk_writeStr
DeadFunctionEliminator:       mk_closeContext
DeadFunctionEliminator:       mk_writeFloat
DeadFunctionEliminator:       mk_writeBin
DeadFunctionEliminator:       mk_flushContextData
DeadFunctionEliminator:       mk_appendContextData
DeadFunctionEliminator:       fwrite
DeadFunctionEliminator:       realloc
DeadFunctionEliminator:       mk_writeID
DeadFunctionEliminator:       x264_clip3.467
DeadFunctionEliminator:       strtod
DeadFunctionEliminator:       x264_log
DeadFunctionEliminator:       llvm.va_start
DeadFunctionEliminator:       llvm.va_end
DeadFunctionEliminator:       x264_picture_alloc
DeadFunctionEliminator:       x264_malloc
DeadFunctionEliminator:       memalign
DeadFunctionEliminator:       mk_writeSize
DeadFunctionEliminator:       mk_writeFloatRaw
DeadFunctionEliminator:       mk_startFrame
DeadFunctionEliminator:       mk_flushFrame
DeadFunctionEliminator:       mk_closeCluster
DeadFunctionEliminator:       mk_ebmlSizeSize
DeadFunctionEliminator:       mk_ebmlSIntSize
DeadFunctionEliminator:       mk_writeSInt
DeadFunctionEliminator:       mk_setFrameFlags
DeadFunctionEliminator:       mk_addFrameData
DeadFunctionEliminator:       mk_close
DeadFunctionEliminator:       fseek
DeadFunctionEliminator:       open_file_yuv
DeadFunctionEliminator:       fopen64
DeadFunctionEliminator:       get_frame_total_yuv
DeadFunctionEliminator:       fseeko64
DeadFunctionEliminator:       ftello64
DeadFunctionEliminator:       read_frame_yuv
DeadFunctionEliminator:       fread
DeadFunctionEliminator:       close_file_yuv
DeadFunctionEliminator:       open_file_y4m
DeadFunctionEliminator:       fgetc
DeadFunctionEliminator:       strncmp
DeadFunctionEliminator:       strchr
DeadFunctionEliminator:       get_frame_total_y4m
DeadFunctionEliminator:       read_frame_y4m
DeadFunctionEliminator:       close_file_y4m
DeadFunctionEliminator:       x264_encoder_reconfig
DeadFunctionEliminator:       x264_encoder_headers
DeadFunctionEliminator:       bs_init
DeadFunctionEliminator:       x264_nal_start
DeadFunctionEliminator:       x264_nal_end
DeadFunctionEliminator:       bs_pos
DeadFunctionEliminator:       endian_fix
DeadFunctionEliminator:       x264_encoder_encode
DeadFunctionEliminator:       x264_thread_sync_context
DeadFunctionEliminator:       x264_reference_update
DeadFunctionEliminator:       x264_encoder_frame_end
DeadFunctionEliminator:       x264_reference_reset
DeadFunctionEliminator:       x264_reference_build_list
DeadFunctionEliminator:       x264_slice_init
DeadFunctionEliminator:       bs_write
DeadFunctionEliminator:       bs_rbsp_trailing
DeadFunctionEliminator:       x264_slices_write
DeadFunctionEliminator:       x264_pixel_sad_16x16
DeadFunctionEliminator:       x264_pixel_sad_16x8
DeadFunctionEliminator:       x264_pixel_sad_8x16
DeadFunctionEliminator:       x264_pixel_sad_8x8
DeadFunctionEliminator:       x264_pixel_sad_8x4
DeadFunctionEliminator:       x264_pixel_sad_4x8
DeadFunctionEliminator:       x264_pixel_sad_4x4
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8
DeadFunctionEliminator:       x264_pixel_sad_x3_8x16
DeadFunctionEliminator:       x264_pixel_sad_x3_8x8
DeadFunctionEliminator:       x264_pixel_sad_x3_8x4
DeadFunctionEliminator:       x264_pixel_sad_x3_4x8
DeadFunctionEliminator:       x264_pixel_sad_x3_4x4
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8
DeadFunctionEliminator:       x264_pixel_sad_x4_8x16
DeadFunctionEliminator:       bs_write_ue_big
DeadFunctionEliminator:       bs_flush
DeadFunctionEliminator:       __assert_fail
DeadFunctionEliminator:       bs_write1
DeadFunctionEliminator:       bs_write_se
DeadFunctionEliminator:       endian_fix32
DeadFunctionEliminator:       x264_slice_header_init
DeadFunctionEliminator:       x264_thread_sync_stat
DeadFunctionEliminator:       x264_psnr
DeadFunctionEliminator:       snprintf
DeadFunctionEliminator:       x264_frame_dump
DeadFunctionEliminator:       x264_encoder_close
DeadFunctionEliminator:       x264_print_intra
DeadFunctionEliminator:       x264_frame_init_lowres
DeadFunctionEliminator:       x264_mc_init
DeadFunctionEliminator:       mc_luma
DeadFunctionEliminator:       get_ref
DeadFunctionEliminator:       mc_chroma
DeadFunctionEliminator:       pixel_avg_16x16
DeadFunctionEliminator:       pixel_avg_16x8
DeadFunctionEliminator:       pixel_avg_8x16
DeadFunctionEliminator:       pixel_avg_8x8
DeadFunctionEliminator:       pixel_avg_8x4
DeadFunctionEliminator:       pixel_avg_4x8
DeadFunctionEliminator:       pixel_avg_4x4
DeadFunctionEliminator:       pixel_avg_4x2
DeadFunctionEliminator:       pixel_avg_2x4
DeadFunctionEliminator:       pixel_avg_2x2
DeadFunctionEliminator:       mc_copy_w16
DeadFunctionEliminator:       x264_pixel_satd_x3_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_16x8_mmxext
DeadFunctionEliminator:       mc_copy_w8
DeadFunctionEliminator:       mc_copy_w4
DeadFunctionEliminator:       plane_copy
DeadFunctionEliminator:       hpel_filter
DeadFunctionEliminator:       prefetch_fenc_null
DeadFunctionEliminator:       prefetch_ref_null
DeadFunctionEliminator:       memcpy
DeadFunctionEliminator:       memzero_aligned
DeadFunctionEliminator:       frame_init_lowres_core
DeadFunctionEliminator:       x264_clip_uint8
DeadFunctionEliminator:       mc_copy
DeadFunctionEliminator:       pixel_avg_wxh
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x8_sse2
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x16_sse2
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x8_sse2
DeadFunctionEliminator:       x264_pixel_ads4_sse2
DeadFunctionEliminator:       x264_pixel_ads2_sse2
DeadFunctionEliminator:       x264_pixel_ads1_sse2
DeadFunctionEliminator:       x264_pixel_var_8x8_sse2
DeadFunctionEliminator:       x264_intra_sad_x3_16x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16_sse2_misalign
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8_sse2_misalign
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16_sse2_misalign
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8_sse2_misalign
DeadFunctionEliminator:       x264_pixel_ssd_16x16_sse2
DeadFunctionEliminator:       x264_pixel_ssd_16x8_sse2
DeadFunctionEliminator:       x264_pixel_ssd_8x16_sse2
DeadFunctionEliminator:       x264_pixel_ssd_8x8_sse2
DeadFunctionEliminator:       x264_pixel_ssd_8x4_sse2
DeadFunctionEliminator:       x264_pixel_satd_16x16_sse2
DeadFunctionEliminator:       x264_pixel_satd_16x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_8x16_sse2
DeadFunctionEliminator:       x264_pixel_satd_8x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_8x4_sse2
DeadFunctionEliminator:       x264_pixel_satd_4x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_16x16_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_16x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_8x16_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_8x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_8x4_sse2
DeadFunctionEliminator:       x264_pixel_satd_x3_4x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x4_16x16_sse2
DeadFunctionEliminator:       x264_pixel_satd_x4_16x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x4_8x16_sse2
DeadFunctionEliminator:       predict_8x8c_p
DeadFunctionEliminator:       predict_8x8c_dc_left
DeadFunctionEliminator:       predict_8x8c_dc_top
DeadFunctionEliminator:       predict_8x8c_dc_128
DeadFunctionEliminator:       x264_predict_8x8_init
DeadFunctionEliminator:       predict_8x8_v
DeadFunctionEliminator:       predict_8x8_h
DeadFunctionEliminator:       predict_8x8_dc
DeadFunctionEliminator:       predict_8x8_ddl
DeadFunctionEliminator:       predict_8x8_ddr
DeadFunctionEliminator:       predict_8x8_vr
DeadFunctionEliminator:       predict_8x8_hd
DeadFunctionEliminator:       predict_8x8_vl
DeadFunctionEliminator:       predict_8x8_hu
DeadFunctionEliminator:       predict_8x8_dc_left
DeadFunctionEliminator:       predict_8x8_dc_top
DeadFunctionEliminator:       predict_8x8_dc_128
DeadFunctionEliminator:       pack8to16
DeadFunctionEliminator:       pack16to32
DeadFunctionEliminator:       x264_predict_4x4_init
DeadFunctionEliminator:       predict_4x4_v
DeadFunctionEliminator:       predict_4x4_h
DeadFunctionEliminator:       predict_4x4_dc
DeadFunctionEliminator:       predict_4x4_ddl
DeadFunctionEliminator:       predict_4x4_ddr
DeadFunctionEliminator:       predict_4x4_vr
DeadFunctionEliminator:       predict_4x4_hd
DeadFunctionEliminator:       predict_4x4_vl
DeadFunctionEliminator:       predict_4x4_hu
DeadFunctionEliminator:       predict_4x4_dc_left
DeadFunctionEliminator:       predict_4x4_dc_top
DeadFunctionEliminator:       predict_4x4_dc_128
DeadFunctionEliminator:       x264_pixel_ssd_wxh
DeadFunctionEliminator:       x264_pixel_ssim_wxh
DeadFunctionEliminator:       x264_pixel_init
DeadFunctionEliminator:       x264_dct_init
DeadFunctionEliminator:       sub4x4_dct
DeadFunctionEliminator:       add4x4_idct
DeadFunctionEliminator:       sub8x8_dct
DeadFunctionEliminator:       add8x8_idct
DeadFunctionEliminator:       sub16x16_dct
DeadFunctionEliminator:       add16x16_idct
DeadFunctionEliminator:       sub8x8_dct8
DeadFunctionEliminator:       add8x8_idct8
DeadFunctionEliminator:       sub16x16_dct8
DeadFunctionEliminator:       add16x16_idct8
DeadFunctionEliminator:       dct4x4dc
DeadFunctionEliminator:       idct4x4dc
DeadFunctionEliminator:       x264_sub4x4_dct_mmx
DeadFunctionEliminator:       x264_add4x4_idct_mmx
DeadFunctionEliminator:       x264_dct4x4dc_mmx
DeadFunctionEliminator:       x264_idct4x4dc_mmx
DeadFunctionEliminator:       x264_sub8x8_dct8_sse2
DeadFunctionEliminator:       x264_sub16x16_dct8_sse2
DeadFunctionEliminator:       x264_add8x8_idct8_sse2
DeadFunctionEliminator:       x264_add16x16_idct8_sse2
DeadFunctionEliminator:       x264_sub8x8_dct_sse2
DeadFunctionEliminator:       x264_sub16x16_dct_sse2
DeadFunctionEliminator:       x264_add8x8_idct_sse2
DeadFunctionEliminator:       x264_add16x16_idct_sse2
DeadFunctionEliminator:       x264_clip_uint8.729
DeadFunctionEliminator:       pixel_sub_wxh
DeadFunctionEliminator:       x264_dct_init_weights
DeadFunctionEliminator:       x264_zigzag_init
DeadFunctionEliminator:       zigzag_scan_8x8_field
DeadFunctionEliminator:       zigzag_scan_4x4_field
DeadFunctionEliminator:       zigzag_sub_8x8_field
DeadFunctionEliminator:       zigzag_sub_4x4_field
DeadFunctionEliminator:       x264_zigzag_scan_4x4_field_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x8
DeadFunctionEliminator:       x264_pixel_sad_x4_8x4
DeadFunctionEliminator:       x264_pixel_sad_x4_4x8
DeadFunctionEliminator:       x264_pixel_sad_x4_4x4
DeadFunctionEliminator:       x264_pixel_ssd_16x16
DeadFunctionEliminator:       x264_pixel_ssd_16x8
DeadFunctionEliminator:       x264_pixel_ssd_8x16
DeadFunctionEliminator:       x264_pixel_ssd_8x8
DeadFunctionEliminator:       x264_pixel_ssd_8x4
DeadFunctionEliminator:       x264_pixel_ssd_4x8
DeadFunctionEliminator:       x264_pixel_ssd_4x4
DeadFunctionEliminator:       x264_pixel_satd_16x16
DeadFunctionEliminator:       x264_pixel_satd_16x8
DeadFunctionEliminator:       x264_pixel_satd_8x16
DeadFunctionEliminator:       x264_pixel_satd_8x8
DeadFunctionEliminator:       x264_pixel_satd_8x4
DeadFunctionEliminator:       x264_pixel_satd_4x8
DeadFunctionEliminator:       x264_pixel_satd_4x4
DeadFunctionEliminator:       x264_pixel_satd_x3_16x16
DeadFunctionEliminator:       x264_pixel_satd_x3_16x8
DeadFunctionEliminator:       x264_pixel_satd_x3_8x16
DeadFunctionEliminator:       x264_pixel_satd_x3_8x8
DeadFunctionEliminator:       x264_pixel_satd_x3_8x4
DeadFunctionEliminator:       x264_pixel_satd_x3_4x8
DeadFunctionEliminator:       x264_pixel_satd_x3_4x4
DeadFunctionEliminator:       x264_pixel_satd_x4_16x16
DeadFunctionEliminator:       x264_pixel_satd_x4_16x8
DeadFunctionEliminator:       x264_pixel_satd_x4_8x16
DeadFunctionEliminator:       x264_pixel_satd_x4_8x8
DeadFunctionEliminator:       x264_pixel_satd_x4_8x4
DeadFunctionEliminator:       x264_pixel_satd_x4_4x8
DeadFunctionEliminator:       x264_pixel_satd_x4_4x4
DeadFunctionEliminator:       x264_pixel_sa8d_16x16
DeadFunctionEliminator:       x264_pixel_sa8d_16x8
DeadFunctionEliminator:       x264_pixel_sa8d_8x16
DeadFunctionEliminator:       x264_pixel_sa8d_8x8
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x16
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x8
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x16
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x8
DeadFunctionEliminator:       x264_pixel_ads4
DeadFunctionEliminator:       x264_pixel_ads2
DeadFunctionEliminator:       x264_pixel_ads1
DeadFunctionEliminator:       x264_pixel_var_16x16
DeadFunctionEliminator:       x264_pixel_var_8x8
DeadFunctionEliminator:       ssim_4x4x2_core
DeadFunctionEliminator:       ssim_end4
DeadFunctionEliminator:       x264_pixel_ssd_16x16_mmx
DeadFunctionEliminator:       x264_pixel_ssd_16x8_mmx
DeadFunctionEliminator:       x264_pixel_ssd_8x16_mmx
DeadFunctionEliminator:       x264_pixel_ssd_8x8_mmx
DeadFunctionEliminator:       x264_pixel_ssd_8x4_mmx
DeadFunctionEliminator:       x264_pixel_ssd_4x8_mmx
DeadFunctionEliminator:       x264_pixel_ssd_4x4_mmx
DeadFunctionEliminator:       x264_pixel_sad_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_satd_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_satd_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x3_16x16_mmxext
DeadFunctionEliminator:       x264_mb_analyse_inter_p8x4
DeadFunctionEliminator:       x264_mb_analyse_inter_p4x8
DeadFunctionEliminator:       x264_mb_cache_mv_p8x8
DeadFunctionEliminator:       x264_mb_analyse_inter_p16x8
DeadFunctionEliminator:       x264_mb_analyse_inter_p8x16
DeadFunctionEliminator:       x264_mb_analyse_intra_chroma
DeadFunctionEliminator:       x264_mb_analyse_p_rd
DeadFunctionEliminator:       x264_mb_analyse_transform_rd
DeadFunctionEliminator:       x264_macroblock_cache_ref.799
DeadFunctionEliminator:       x264_analyse_update_cache
DeadFunctionEliminator:       x264_macroblock_probe_bskip
DeadFunctionEliminator:       x264_mb_analyse_inter_direct
DeadFunctionEliminator:       x264_mb_analyse_inter_b16x16
DeadFunctionEliminator:       x264_mb_analyse_b_rd
DeadFunctionEliminator:       x264_mb_analyse_inter_b8x8
DeadFunctionEliminator:       x264_mb_analyse_inter_b16x8
DeadFunctionEliminator:       x264_pixel_satd_x4_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_satd_x4_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_ads4_mmxext
DeadFunctionEliminator:       x264_pixel_ads2_mmxext
DeadFunctionEliminator:       x264_pixel_ads1_mmxext
DeadFunctionEliminator:       x264_pixel_var_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_var_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x16_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x8_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_8x4_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_8x16_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x3_8x8_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x16_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_sad_x4_8x8_cache64_mmxext
DeadFunctionEliminator:       x264_intra_satd_x3_16x16_mmxext
DeadFunctionEliminator:       x264_intra_sad_x3_16x16_mmxext
DeadFunctionEliminator:       x264_intra_satd_x3_8x8c_mmxext
DeadFunctionEliminator:       x264_intra_satd_x3_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_sad_16x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_16x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8_sse2
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x16_sse2
DeadFunctionEliminator:       cavlc_intra4x4_pred_size
DeadFunctionEliminator:       x264_partition_i4x4_size_cabac
DeadFunctionEliminator:       x264_partition_i4x4_size_cavlc
DeadFunctionEliminator:       x264_clip3.813
DeadFunctionEliminator:       x264_slicetype_decide
DeadFunctionEliminator:       x264_slicetype_analyse
DeadFunctionEliminator:       x264_lowres_context_init
DeadFunctionEliminator:       x264_slicetype_frame_cost
DeadFunctionEliminator:       scenecut
DeadFunctionEliminator:       x264_slicetype_path_search
DeadFunctionEliminator:       x264_slicetype_path
DeadFunctionEliminator:       strspn
DeadFunctionEliminator:       x264_slicetype_path_cost
DeadFunctionEliminator:       x264_slicetype_mb_cost
DeadFunctionEliminator:       x264_median_mv_mmxext.824
DeadFunctionEliminator:       x264_rc_analyse_slice
DeadFunctionEliminator:       x264_me_search_ref
DeadFunctionEliminator:       x264_clip3.828
DeadFunctionEliminator:       pack16to32_mask.829
DeadFunctionEliminator:       x264_predictor_difference_mmxext
DeadFunctionEliminator:       refine_subpel
DeadFunctionEliminator:       x264_me_refine_qpel
DeadFunctionEliminator:       x264_me_refine_bidir_satd
DeadFunctionEliminator:       x264_me_refine_bidir
DeadFunctionEliminator:       x264_me_refine_bidir_rd
DeadFunctionEliminator:       x264_me_refine_qpel_rd
DeadFunctionEliminator:       x264_macroblock_cache_mv.841
DeadFunctionEliminator:       x264_macroblock_cache_mvd.842
DeadFunctionEliminator:       x264_macroblock_cache_rect4.843
DeadFunctionEliminator:       x264_adaptive_quant_frame
DeadFunctionEliminator:       ac_energy_mb
DeadFunctionEliminator:       llvm.log.f32
DeadFunctionEliminator:       x264_adaptive_quant
DeadFunctionEliminator:       x264_clip3.848
DeadFunctionEliminator:       x264_ratecontrol_new
DeadFunctionEliminator:       x264_clip3f.856
DeadFunctionEliminator:       qp2qscale
DeadFunctionEliminator:       parse_zones
DeadFunctionEliminator:       init_pass2
DeadFunctionEliminator:       strcpy
DeadFunctionEliminator:       llvm.exp.f64
DeadFunctionEliminator:       qscale2bits
DeadFunctionEliminator:       get_qscale
DeadFunctionEliminator:       get_diff_limited_q
DeadFunctionEliminator:       clip_qscale
DeadFunctionEliminator:       vbv_pass2
DeadFunctionEliminator:       count_expected_bits
DeadFunctionEliminator:       llvm.fabs.f64
DeadFunctionEliminator:       qscale2qp
DeadFunctionEliminator:       find_underflow
DeadFunctionEliminator:       fix_underflow
DeadFunctionEliminator:       predict_size
DeadFunctionEliminator:       get_zone
DeadFunctionEliminator:       parse_zone
DeadFunctionEliminator:       x264_ratecontrol_summary
DeadFunctionEliminator:       x264_ratecontrol_delete
DeadFunctionEliminator:       rename
DeadFunctionEliminator:       x264_ratecontrol_set_estimated_size
DeadFunctionEliminator:       x264_ratecontrol_get_estimated_size
DeadFunctionEliminator:       x264_ratecontrol_start
DeadFunctionEliminator:       update_vbv_plan
DeadFunctionEliminator:       rate_estimate_qscale
DeadFunctionEliminator:       accum_p_qp_update
DeadFunctionEliminator:       llvm.sqrt.f64
DeadFunctionEliminator:       x264_ratecontrol_mb
DeadFunctionEliminator:       row_bits_so_far
DeadFunctionEliminator:       update_predictor
DeadFunctionEliminator:       x264_pixel_satd_x4_8x8_sse2
DeadFunctionEliminator:       x264_pixel_satd_x4_8x4_sse2
DeadFunctionEliminator:       x264_pixel_satd_x4_4x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_16x16_sse2_aligned
DeadFunctionEliminator:       x264_pixel_sad_16x8_sse2_aligned
DeadFunctionEliminator:       x264_pixel_var_16x16_sse2
DeadFunctionEliminator:       x264_pixel_ssim_4x4x2_core_sse2
DeadFunctionEliminator:       x264_pixel_ssim_end4_sse2
DeadFunctionEliminator:       x264_pixel_sa8d_16x16_sse2
DeadFunctionEliminator:       x264_pixel_sa8d_8x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_8x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_8x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_8x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_x3_8x4_sse2
DeadFunctionEliminator:       x264_pixel_sad_x4_8x16_sse2
DeadFunctionEliminator:       x264_pixel_sad_x4_8x8_sse2
DeadFunctionEliminator:       x264_pixel_sad_x4_8x4_sse2
DeadFunctionEliminator:       x264_pixel_sad_16x16_sse3
DeadFunctionEliminator:       x264_pixel_sad_16x8_sse3
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16_sse3
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8_sse3
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16_sse3
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8_sse3
DeadFunctionEliminator:       x264_pixel_satd_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_16x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_8x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_8x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_8x4_ssse3
DeadFunctionEliminator:       x264_pixel_satd_4x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_4x4_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_16x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_8x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_8x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_8x4_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_4x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x3_4x4_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_16x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_8x16_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_8x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_8x4_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_4x8_ssse3
DeadFunctionEliminator:       x264_pixel_satd_x4_4x4_ssse3
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_hadamard_ac_16x8_ssse3
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x16_ssse3
DeadFunctionEliminator:       x264_pixel_hadamard_ac_8x8_ssse3
DeadFunctionEliminator:       x264_pixel_ads4_ssse3
DeadFunctionEliminator:       x264_pixel_ads2_ssse3
DeadFunctionEliminator:       x264_pixel_ads1_ssse3
DeadFunctionEliminator:       x264_pixel_sa8d_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_sa8d_8x8_ssse3
DeadFunctionEliminator:       x264_intra_satd_x3_16x16_ssse3
DeadFunctionEliminator:       x264_intra_sad_x3_16x16_ssse3
DeadFunctionEliminator:       x264_intra_satd_x3_8x8c_ssse3
DeadFunctionEliminator:       x264_intra_satd_x3_4x4_ssse3
DeadFunctionEliminator:       x264_pixel_sad_16x16_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_sad_16x8_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_sad_x3_16x16_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_sad_x3_16x8_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_sad_x4_16x16_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_sad_x4_16x8_cache64_ssse3
DeadFunctionEliminator:       x264_pixel_satd_16x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_16x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_8x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_8x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_8x4_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_4x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_16x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_16x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_8x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_8x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_8x4_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x3_4x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_16x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_16x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_8x16_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_8x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_8x4_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_satd_x4_4x8_ssse3_phadd
DeadFunctionEliminator:       x264_pixel_ssd_4x8_sse4
DeadFunctionEliminator:       x264_pixel_ssd_4x4_sse4
DeadFunctionEliminator:       ssim_end1
DeadFunctionEliminator:       pixel_hadamard_ac
DeadFunctionEliminator:       pixel_sa8d_wxh
DeadFunctionEliminator:       pixel_satd_wxh
DeadFunctionEliminator:       x264_mb_predict_mv
DeadFunctionEliminator:       x264_median_mv_mmxext
DeadFunctionEliminator:       x264_mb_predict_mv_16x16
DeadFunctionEliminator:       x264_mb_predict_mv_pskip
DeadFunctionEliminator:       x264_mb_predict_mv_direct16x16
DeadFunctionEliminator:       x264_mb_predict_mv_direct16x16_spatial
DeadFunctionEliminator:       x264_mb_predict_mv_direct16x16_temporal
DeadFunctionEliminator:       x264_macroblock_cache_ref
DeadFunctionEliminator:       x264_macroblock_cache_mv
DeadFunctionEliminator:       pack16to32_mask
DeadFunctionEliminator:       x264_macroblock_cache_rect4
DeadFunctionEliminator:       x264_macroblock_cache_rect1
DeadFunctionEliminator:       x264_mb_load_mv_direct8x8
DeadFunctionEliminator:       x264_mb_predict_mv_ref16x16
DeadFunctionEliminator:       x264_mb_mc_8x8
DeadFunctionEliminator:       x264_mb_mc_0xywh
DeadFunctionEliminator:       x264_mb_mc_1xywh
DeadFunctionEliminator:       x264_mb_mc_01xywh
DeadFunctionEliminator:       x264_mb_mc_direct8x8
DeadFunctionEliminator:       x264_clip3.664
DeadFunctionEliminator:       x264_mb_mc
DeadFunctionEliminator:       x264_macroblock_cache_init
DeadFunctionEliminator:       x264_macroblock_cache_end
DeadFunctionEliminator:       x264_macroblock_slice_init
DeadFunctionEliminator:       setup_inverse_delta_pocs
DeadFunctionEliminator:       x264_prefetch_fenc
DeadFunctionEliminator:       x264_macroblock_cache_load
DeadFunctionEliminator:       copy_column8
DeadFunctionEliminator:       x264_macroblock_load_pic_pointers
DeadFunctionEliminator:       x264_macroblock_cache_save
DeadFunctionEliminator:       x264_macroblock_store_pic
DeadFunctionEliminator:       pack8to32
DeadFunctionEliminator:       x264_macroblock_bipred_init
DeadFunctionEliminator:       x264_frame_new
DeadFunctionEliminator:       x264_frame_delete
DeadFunctionEliminator:       x264_frame_copy_picture
DeadFunctionEliminator:       x264_frame_expand_border
DeadFunctionEliminator:       plane_expand_border
DeadFunctionEliminator:       x264_frame_expand_border_filtered
DeadFunctionEliminator:       x264_frame_expand_border_lowres
DeadFunctionEliminator:       x264_frame_expand_border_mod16
DeadFunctionEliminator:       x264_frame_deblock_row
DeadFunctionEliminator:       munge_cavlc_nnz_row
DeadFunctionEliminator:       munge_cavlc_nnz
DeadFunctionEliminator:       deblock_edge_intra
DeadFunctionEliminator:       deblock_edge
DeadFunctionEliminator:       restore_cavlc_nnz_row
DeadFunctionEliminator:       x264_frame_deblock
DeadFunctionEliminator:       x264_deblock_init
DeadFunctionEliminator:       deblock_v_luma_c
DeadFunctionEliminator:       deblock_h_luma_c
DeadFunctionEliminator:       deblock_v_chroma_c
DeadFunctionEliminator:       deblock_h_chroma_c
DeadFunctionEliminator:       deblock_v_luma_intra_c
DeadFunctionEliminator:       deblock_h_luma_intra_c
DeadFunctionEliminator:       deblock_v_chroma_intra_c
DeadFunctionEliminator:       deblock_h_chroma_intra_c
DeadFunctionEliminator:       x264_deblock_v_chroma_mmxext
DeadFunctionEliminator:       x264_deblock_h_chroma_mmxext
DeadFunctionEliminator:       x264_deblock_v_chroma_intra_mmxext
DeadFunctionEliminator:       x264_deblock_h_chroma_intra_mmxext
DeadFunctionEliminator:       x264_deblock_v_luma_sse2
DeadFunctionEliminator:       x264_deblock_h_luma_sse2
DeadFunctionEliminator:       x264_deblock_v_luma_intra_sse2
DeadFunctionEliminator:       x264_deblock_h_luma_intra_sse2
DeadFunctionEliminator:       deblock_chroma_intra_c
DeadFunctionEliminator:       deblock_luma_intra_c
DeadFunctionEliminator:       deblock_chroma_c
DeadFunctionEliminator:       x264_clip3.703
DeadFunctionEliminator:       x264_clip_uint8.704
DeadFunctionEliminator:       deblock_luma_c
DeadFunctionEliminator:       x264_frame_cond_broadcast
DeadFunctionEliminator:       x264_frame_push
DeadFunctionEliminator:       x264_frame_pop
DeadFunctionEliminator:       x264_frame_unshift
DeadFunctionEliminator:       x264_frame_shift
DeadFunctionEliminator:       x264_frame_push_unused
DeadFunctionEliminator:       x264_frame_pop_unused
DeadFunctionEliminator:       x264_frame_sort
DeadFunctionEliminator:       predict_row_size_sum
DeadFunctionEliminator:       predict_row_size
DeadFunctionEliminator:       x264_ratecontrol_qp
DeadFunctionEliminator:       x264_ratecontrol_slice_type
DeadFunctionEliminator:       x264_ratecontrol_end
DeadFunctionEliminator:       update_vbv
DeadFunctionEliminator:       x264_thread_sync_ratecontrol
DeadFunctionEliminator:       x264_sps_init
DeadFunctionEliminator:       x264_sps_write
DeadFunctionEliminator:       bs_write.943
DeadFunctionEliminator:       bs_write_ue_big.944
DeadFunctionEliminator:       bs_write_se.945
DeadFunctionEliminator:       bs_write1.946
DeadFunctionEliminator:       bs_write32
DeadFunctionEliminator:       bs_rbsp_trailing.947
DeadFunctionEliminator:       bs_flush.948
DeadFunctionEliminator:       endian_fix.949
DeadFunctionEliminator:       endian_fix32.950
DeadFunctionEliminator:       x264_pps_init
DeadFunctionEliminator:       transpose
DeadFunctionEliminator:       x264_pps_write
DeadFunctionEliminator:       scaling_list_write
DeadFunctionEliminator:       bs_size_se.962
DeadFunctionEliminator:       bs_size_ue_big.963
DeadFunctionEliminator:       x264_sei_version_write
DeadFunctionEliminator:       x264_validate_levels
DeadFunctionEliminator:       x264_mb_encode_i4x4
DeadFunctionEliminator:       x264_quant_4x4
DeadFunctionEliminator:       array_non_zero_int_mmx.982
DeadFunctionEliminator:       array_non_zero_int_c.983
DeadFunctionEliminator:       x264_mb_encode_i8x8
DeadFunctionEliminator:       x264_quant_8x8
DeadFunctionEliminator:       x264_mb_encode_8x8_chroma
DeadFunctionEliminator:       dct2x2dc
DeadFunctionEliminator:       zigzag_scan_2x2_dc
DeadFunctionEliminator:       idct_dequant_2x2_dc
DeadFunctionEliminator:       x264_predict_lossless_8x8_chroma
DeadFunctionEliminator:       x264_predict_lossless_4x4
DeadFunctionEliminator:       x264_predict_lossless_8x8
DeadFunctionEliminator:       x264_predict_lossless_16x16
DeadFunctionEliminator:       x264_macroblock_encode
DeadFunctionEliminator:       x264_macroblock_encode_pskip
DeadFunctionEliminator:       x264_macroblock_encode_skip
DeadFunctionEliminator:       x264_mb_encode_i16x16
DeadFunctionEliminator:       x264_clip3.1001
DeadFunctionEliminator:       x264_macroblock_probe_skip
DeadFunctionEliminator:       x264_noise_reduction_update
DeadFunctionEliminator:       x264_macroblock_encode_p8x8
DeadFunctionEliminator:       x264_macroblock_encode_p4x4
DeadFunctionEliminator:       x264_cabac_mb_skip
DeadFunctionEliminator:       x264_cabac_encode_decision_asm
DeadFunctionEliminator:       x264_macroblock_write_cabac
DeadFunctionEliminator:       x264_cabac_pos.1016
DeadFunctionEliminator:       x264_cabac_mb_type.1017
DeadFunctionEliminator:       x264_cabac_mb_transform_size.1018
DeadFunctionEliminator:       x264_mb_predict_intra4x4_mode.1019
DeadFunctionEliminator:       x264_cabac_mb_intra4x4_pred_mode.1022
DeadFunctionEliminator:       x264_cabac_mb_intra_chroma_pred_mode.1023
DeadFunctionEliminator:       x264_cabac_mb_ref.1024
DeadFunctionEliminator:       x264_cabac_mb_mvd.1025
DeadFunctionEliminator:       x264_cabac_mb_sub_p_partition.1026
DeadFunctionEliminator:       x264_cabac_mb8x8_mvd.1027
DeadFunctionEliminator:       x264_cabac_mb_sub_b_partition.1028
DeadFunctionEliminator:       x264_cabac_mb_cbp_luma.1032
DeadFunctionEliminator:       x264_cabac_mb_cbp_chroma.1033
DeadFunctionEliminator:       x264_mb_transform_8x8_allowed.1034
DeadFunctionEliminator:       x264_cabac_mb_qp_delta.1035
DeadFunctionEliminator:       block_residual_write_cabac.1036
DeadFunctionEliminator:       x264_cabac_mb_cbf_ctxidxinc.1041
DeadFunctionEliminator:       x264_cabac_mb_mvd_cpn.1048
DeadFunctionEliminator:       pack16to32_mask.1051
DeadFunctionEliminator:       x264_macroblock_cache_mvd.1052
DeadFunctionEliminator:       x264_macroblock_cache_rect4.1053
DeadFunctionEliminator:       x264_cabac_mb_type_intra.1056
DeadFunctionEliminator:       x264_macroblock_write_cavlc
DeadFunctionEliminator:       bs_pos.1063
DeadFunctionEliminator:       bs_write1.1065
DeadFunctionEliminator:       bs_write_ue
DeadFunctionEliminator:       bs_align_0
DeadFunctionEliminator:       x264_mb_predict_intra4x4_mode.1066
DeadFunctionEliminator:       bs_write.1069
DeadFunctionEliminator:       bs_write_te
DeadFunctionEliminator:       bs_write_se.1072
DeadFunctionEliminator:       cavlc_mb8x8_mvd.1074
DeadFunctionEliminator:       x264_mb_transform_8x8_allowed.1083
DeadFunctionEliminator:       cavlc_qp_delta.1084
DeadFunctionEliminator:       block_residual_write_cavlc.1085
DeadFunctionEliminator:       array_non_zero_count_mmx.1086
DeadFunctionEliminator:       x264_macroblock_luma_write_cavlc.1087
DeadFunctionEliminator:       x264_mb_predict_non_zero_code.1088
DeadFunctionEliminator:       bs_write_vlc.1090
DeadFunctionEliminator:       cavlc_mb_mvd.1093
DeadFunctionEliminator:       endian_fix.1095
DeadFunctionEliminator:       bs_flush.1096
DeadFunctionEliminator:       endian_fix32.1097
DeadFunctionEliminator:       x264_mc_init_mmx
DeadFunctionEliminator:       x264_mc_copy_w16_mmx
DeadFunctionEliminator:       x264_mc_copy_w8_mmx
DeadFunctionEliminator:       x264_mc_copy_w4_mmx
DeadFunctionEliminator:       x264_memcpy_aligned_mmx
DeadFunctionEliminator:       x264_memzero_aligned_mmx
DeadFunctionEliminator:       mc_luma_mmxext
DeadFunctionEliminator:       get_ref_mmxext
DeadFunctionEliminator:       x264_mc_chroma_mmxext
DeadFunctionEliminator:       x264_pixel_avg_16x16_mmxext
DeadFunctionEliminator:       x264_pixel_avg_16x8_mmxext
DeadFunctionEliminator:       x264_pixel_avg_8x16_mmxext
DeadFunctionEliminator:       x264_pixel_avg_8x8_mmxext
DeadFunctionEliminator:       x264_pixel_avg_8x4_mmxext
DeadFunctionEliminator:       x264_pixel_avg_4x8_mmxext
DeadFunctionEliminator:       x264_pixel_avg_4x4_mmxext
DeadFunctionEliminator:       x264_pixel_avg_4x2_mmxext
DeadFunctionEliminator:       x264_plane_copy_mmxext
DeadFunctionEliminator:       x264_hpel_filter_mmxext
DeadFunctionEliminator:       x264_frame_init_lowres_core_mmxext
DeadFunctionEliminator:       x264_prefetch_fenc_mmxext
DeadFunctionEliminator:       x264_prefetch_ref_mmxext
DeadFunctionEliminator:       x264_memcpy_aligned_sse2
DeadFunctionEliminator:       x264_memzero_aligned_sse2
DeadFunctionEliminator:       x264_hpel_filter_sse2_amd
DeadFunctionEliminator:       x264_mc_copy_w16_aligned_sse2
DeadFunctionEliminator:       x264_pixel_avg_16x16_sse2
DeadFunctionEliminator:       x264_pixel_avg_16x8_sse2
DeadFunctionEliminator:       x264_pixel_avg_8x16_sse2
DeadFunctionEliminator:       x264_pixel_avg_8x8_sse2
DeadFunctionEliminator:       x264_pixel_avg_8x4_sse2
DeadFunctionEliminator:       x264_hpel_filter_sse2
DeadFunctionEliminator:       x264_hpel_filter_sse2_misalign
DeadFunctionEliminator:       x264_frame_init_lowres_core_sse2
DeadFunctionEliminator:       x264_mc_chroma_sse2
DeadFunctionEliminator:       mc_luma_sse2
DeadFunctionEliminator:       get_ref_sse2
DeadFunctionEliminator:       mc_luma_cache64_sse2
DeadFunctionEliminator:       get_ref_cache64_sse2
DeadFunctionEliminator:       get_ref_sse2_misalign
DeadFunctionEliminator:       x264_pixel_avg_16x16_ssse3
DeadFunctionEliminator:       x264_pixel_avg_16x8_ssse3
DeadFunctionEliminator:       x264_pixel_avg_8x16_ssse3
DeadFunctionEliminator:       x264_pixel_avg_8x8_ssse3
DeadFunctionEliminator:       x264_pixel_avg_8x4_ssse3
DeadFunctionEliminator:       x264_pixel_avg_4x8_ssse3
DeadFunctionEliminator:       x264_pixel_avg_4x4_ssse3
DeadFunctionEliminator:       x264_pixel_avg_4x2_ssse3
DeadFunctionEliminator:       x264_hpel_filter_ssse3
DeadFunctionEliminator:       x264_frame_init_lowres_core_ssse3
DeadFunctionEliminator:       x264_mc_chroma_ssse3
DeadFunctionEliminator:       x264_pixel_avg2_w4_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w8_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w16_sse2
DeadFunctionEliminator:       x264_pixel_avg2_w20_sse2_misalign
DeadFunctionEliminator:       x264_pixel_avg2_w8_cache64_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w16_cache64_sse2
DeadFunctionEliminator:       x264_pixel_avg2_w20_cache64_sse2
DeadFunctionEliminator:       x264_mc_copy_w16_sse2
DeadFunctionEliminator:       x264_pixel_avg2_w20_sse2
DeadFunctionEliminator:       x264_hpel_filter_v_sse2
DeadFunctionEliminator:       x264_hpel_filter_c_sse2_misalign
DeadFunctionEliminator:       x264_hpel_filter_h_sse2
DeadFunctionEliminator:       x264_sfence
DeadFunctionEliminator:       x264_hpel_filter_v_mmxext
DeadFunctionEliminator:       x264_hpel_filter_c_mmxext
DeadFunctionEliminator:       x264_hpel_filter_h_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w12_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w16_mmxext
DeadFunctionEliminator:       x264_pixel_avg2_w20_mmxext
DeadFunctionEliminator:       x264_intra_sa8d_x3_8x8_sse2
DeadFunctionEliminator:       x264_intra_sa8d_x3_8x8_core_sse2
DeadFunctionEliminator:       x264_intra_sa8d_x3_8x8_ssse3
DeadFunctionEliminator:       x264_intra_sa8d_x3_8x8_core_ssse3
DeadFunctionEliminator:       x264_predict_16x16_init_mmx
DeadFunctionEliminator:       predict_16x16_dc_left.1108
DeadFunctionEliminator:       predict_16x16_v_mmx
DeadFunctionEliminator:       predict_16x16_dc_mmxext
DeadFunctionEliminator:       predict_16x16_dc_top_mmxext
DeadFunctionEliminator:       predict_16x16_p_mmxext
DeadFunctionEliminator:       predict_16x16_h_mmxext
DeadFunctionEliminator:       predict_16x16_dc_sse2
DeadFunctionEliminator:       predict_16x16_v_sse2
DeadFunctionEliminator:       predict_16x16_dc_top_sse2
DeadFunctionEliminator:       predict_16x16_p_sse2
DeadFunctionEliminator:       predict_16x16_h_ssse3
DeadFunctionEliminator:       predict_16x16_p_core_sse2
DeadFunctionEliminator:       predict_16x16_dc_core_sse2
DeadFunctionEliminator:       predict_16x16_p_core_mmxext
DeadFunctionEliminator:       predict_16x16_dc_core_mmxext
DeadFunctionEliminator:       x264_predict_8x8c_init_mmx
DeadFunctionEliminator:       predict_8x8c_dc_left.1111
DeadFunctionEliminator:       predict_8x8c_dc_top.1112
DeadFunctionEliminator:       predict_8x8c_v_mmx
DeadFunctionEliminator:       predict_8x8c_h_mmxext
DeadFunctionEliminator:       predict_8x8c_p_mmxext
DeadFunctionEliminator:       predict_8x8c_dc_mmxext
DeadFunctionEliminator:       predict_8x8c_h_ssse3
DeadFunctionEliminator:       predict_8x8c_dc_core_mmxext
DeadFunctionEliminator:       predict_8x8c_p_core_mmxext
DeadFunctionEliminator:       x264_predict_8x8_init_mmx
DeadFunctionEliminator:       predict_8x8_v_mmxext
DeadFunctionEliminator:       predict_8x8_h_mmxext
DeadFunctionEliminator:       predict_8x8_dc_mmxext
DeadFunctionEliminator:       predict_8x8_dc_top_mmxext
DeadFunctionEliminator:       predict_8x8_dc_left_mmxext
DeadFunctionEliminator:       predict_8x8_vr_mmxext
DeadFunctionEliminator:       predict_8x8_ddl_sse2
DeadFunctionEliminator:       predict_8x8_vl_sse2
DeadFunctionEliminator:       predict_8x8_ddr_sse2
DeadFunctionEliminator:       predict_8x8_vr_core_mmxext
DeadFunctionEliminator:       x264_predict_4x4_init_mmx
DeadFunctionEliminator:       predict_4x4_ddr.1117
DeadFunctionEliminator:       predict_4x4_vr.1118
DeadFunctionEliminator:       predict_4x4_hd.1119
DeadFunctionEliminator:       predict_4x4_hu.1120
DeadFunctionEliminator:       predict_4x4_ddl_mmxext
DeadFunctionEliminator:       predict_4x4_vl_mmxext
DeadFunctionEliminator:       predict_4x4_dc_mmxext
DeadFunctionEliminator:       puts
DeadFunctionEliminator:       fputc
DeadFunctionEliminator:       putchar
DeadFunctionEliminator:       bcmp
DeadFunctionEliminator:       llvm.exp2.f64
DeadFunctionEliminator:       memchr
DeadFunctionEliminator:       llvm.fabs.f32
DeadFunctionEliminator:   Identify the functions that can be deleted
DeadFunctionEliminator: Exit
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.554082e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.901625e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.016611e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.426608e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.784978e-06%)
Noelle:     Loop "  %149 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %148, i64 0, i32 1" (7.511067e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.843850e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.087882e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.499331e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.406311e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.862751e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.337859e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.690364e-04%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.019454e-03%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.690364e-04%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.488215e-03%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.569393e-03%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.411415e-04%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.518408e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.804585e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.071996e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.217140e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.471215e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.011455e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.117157e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.339640e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.254224e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.593969e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.963516e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.780664e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.586799e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.114441e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (3.475653e-03%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (8.531823e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.034878e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (9.487999e-01%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.114784e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.318824e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.074888e-02%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.517673e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.289929e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.243654e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.550167e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.744909e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.480352e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.190596e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.491250e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.306660e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.050812e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.147634e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.062537e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.821035e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.044150e-01%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.829976e-02%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv67, %64" (6.577842e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.150644e-01%)
Noelle:     Loop "  %141 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv61, %184" (0.000000e+00%)
Noelle:     Loop "  %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.613710e+00%)
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv, -1" (8.663518e-01%)
Noelle:     Loop "  %342 = icmp slt i64 %indvars.iv55, %340" (3.736193e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.129136e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.043871e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.542668e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.162358e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.500437e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.409740e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.080419e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.109416e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.920292e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.360250e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.759028e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.738761e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.671769e-02%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.452085e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.283198e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.960321e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.987452e-02%)
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.529258e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.247148e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.898090e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.095810e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.743340e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.031443e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.207837e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.063018e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.888057e-01%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv16, %95" (4.028828e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.514940e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.016544e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.620782e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.996251e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.655008e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.311516e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.546592e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.055579e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.554861e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.494570e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.420472e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.595774e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (3.341985e-02%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.183610e-01%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.437683e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.939133e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.224639e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.442129e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv, %77" (7.411508e-03%)
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.982722e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.672168e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.042584e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.965222e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.345557e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.479978e-02%)
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.249282e-01%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.122350e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.509725e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.509415e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.028502e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.712920e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.410900e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.410900e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.764669e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.800548e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.573254e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.104007e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.104007e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.354612e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.354612e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.022346e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.754039e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.689777e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.986763e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.953287e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.383140e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.351068e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.448757e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.927491e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.565018e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.717613e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.814409e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %54 = icmp sgt i32 %53, 65535" (0.000000e+00%)
Noelle:     Loop "  %227 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (4.148457e-06%)
Noelle:     Loop "  %334 = load i32, i32* %332, align 4, !tbaa !83" (3.626273e-08%)
Noelle:     Loop "  %342 = sext i32 %341 to i64" (3.343424e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %Pivot5 = icmp ult i64 %indvars.iv16, 14" (8.911422e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.376346e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.396945e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.525364e-03%)
Noelle:     Loop "  %7 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.484015e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.658217e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.798664e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.219784e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.144433e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.921635e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.506480e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.201674e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.178829e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (8.977638e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.608789e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count" (1.565158e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.256394e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.626273e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.947088e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.812317e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.196670e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.583011e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.288686e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.706556e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.571659e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.514767e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.506499e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.128945e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.030600e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (5.987703e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.424558e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.703056e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.713414e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.289699e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.109999e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.788384e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.091288e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.215306e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.427459e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.279943e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.071999e-04%)
Noelle:     Loop "  %49 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %62, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp slt i64 %indvars.iv, %72" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.239858e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.163000e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.377984e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.050327e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.430928e-05%)
Noelle:     Loop "  %Pivot = icmp ult i64 %indvars.iv58, 17" (1.420049e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.338095e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.325766e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.221329e-05%)
Noelle:     Loop "  %396 = icmp sgt i64 %indvars.iv44, %394" (5.729512e-07%)
Noelle:     Loop "  %504 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.626273e-08%)
Noelle:     Loop "  %516 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.626273e-08%)
Noelle:     Loop "  %528 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.545808e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.234601e-04%)
Noelle:     Loop "  %553 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.736292e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.178974e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.313562e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.313562e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.057693e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (2.001340e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.383313e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.311513e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.485480e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.654590e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.570176e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.490178e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.076436e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.162868e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.885662e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.930029e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.400499e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.958693e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.498282e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.720557e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.536941e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.742188e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.248290e-07%)
Noelle:     Loop "  %163 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.485480e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.589159e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.291805e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.995302e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %183 = sext i32 %182 to i64" (0.000000e+00%)
Noelle:     Loop "  %319 = add nsw i32 %318, 2" (5.388642e-06%)
Noelle:     Loop "  %323 = add nsw i32 %322, 2" (4.068679e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %370 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %352 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.848959e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.529562e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.060575e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.211175e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.209725e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.060575e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.642481e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.443257e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.843850e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.901019e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.729512e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.620724e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.641630e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.372434e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.558005e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (1.000851e-06%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (8.558005e-07%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %441 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %474 = icmp slt i64 %indvars.iv57, %470" (0.000000e+00%)
Noelle:     Loop "  %491 = icmp slt i32 %.36, %490" (0.000000e+00%)
Noelle:     Loop "  %574 = load i32, i32* %7, align 4, !tbaa !30" (1.450509e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.863464e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.164665e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.931732e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.988901e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.698799e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.988901e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.538391e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.786681e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.802038e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %Pivot17 = icmp slt i8 %11, 80" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i32 %.02, %12" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %218 = icmp slt i64 %indvars.iv84, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %197 = icmp slt i64 %indvars.iv90, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %248 = icmp slt i64 %indvars.iv92, %.pre-phi30" (0.000000e+00%)
Noelle:     Loop "  %286 = icmp slt i64 %indvars.iv, %284" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %8 = icmp slt i64 %indvars.iv, %6" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %23" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %153" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in2, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in3, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %210" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39 = icmp ult i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us15 = icmp ult i64 %indvars.iv24.us14, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us = icmp ult i64 %indvars.iv24.us9, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32.us = icmp ult i64 %indvars.iv24.us.us, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv24.us, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (2.792545e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us.us = icmp eq i64 %indvars.iv69.us.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %483 = icmp slt i64 %indvars.iv, %481" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.388746e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.530628e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw i32 %60, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %71" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv, %70" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.554082e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.901625e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.016611e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.426608e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.784978e-06%)
Noelle:     Loop "  %149 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %148, i64 0, i32 1" (7.511067e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.843850e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.087882e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.499331e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.406311e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.862751e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.337859e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.690364e-04%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.019454e-03%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.690364e-04%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.488215e-03%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.569393e-03%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.411415e-04%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.518408e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.804585e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.071996e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.217140e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.471215e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.011455e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.117157e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.339640e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.254224e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.593969e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.963516e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.780664e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.586799e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.114441e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (3.475653e-03%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (8.531823e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.034878e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (9.487999e-01%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.114784e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.318824e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.074888e-02%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.517673e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.289929e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.243654e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.550167e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.744909e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.480352e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.190596e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.491250e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.306660e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.050812e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.147634e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.062537e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.821035e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.044150e-01%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.829976e-02%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv67, %64" (6.577842e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.150644e-01%)
Noelle:     Loop "  %141 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv61, %184" (0.000000e+00%)
Noelle:     Loop "  %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.613710e+00%)
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv, -1" (8.663518e-01%)
Noelle:     Loop "  %342 = icmp slt i64 %indvars.iv55, %340" (3.736193e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.129136e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.043871e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.542668e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.162358e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.500437e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.409740e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.080419e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.109416e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.920292e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.360250e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.759028e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.738761e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.671769e-02%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.452085e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.283198e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.960321e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.987452e-02%)
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.529258e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.247148e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.898090e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.095810e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.743340e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.031443e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.207837e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.063018e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.888057e-01%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv16, %95" (4.028828e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.514940e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.016544e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.620782e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.996251e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.655008e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.311516e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.546592e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.055579e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.554861e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.494570e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.420472e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.595774e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (3.341985e-02%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.183610e-01%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.437683e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.939133e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.224639e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.442129e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv, %77" (7.411508e-03%)
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.982722e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.672168e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.042584e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.965222e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.345557e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.479978e-02%)
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.249282e-01%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.122350e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.509725e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.509415e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.028502e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.712920e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.410900e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.410900e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.764669e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.800548e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.573254e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.104007e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.104007e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.354612e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.354612e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.022346e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.754039e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.689777e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.986763e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.953287e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.383140e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.351068e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.448757e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.927491e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.565018e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.717613e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.814409e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %54 = icmp sgt i32 %53, 65535" (0.000000e+00%)
Noelle:     Loop "  %227 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (4.148457e-06%)
Noelle:     Loop "  %334 = load i32, i32* %332, align 4, !tbaa !83" (3.626273e-08%)
Noelle:     Loop "  %342 = sext i32 %341 to i64" (3.343424e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %Pivot5 = icmp ult i64 %indvars.iv16, 14" (8.911422e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.376346e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.396945e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.525364e-03%)
Noelle:     Loop "  %7 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.484015e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.658217e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.798664e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.219784e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.144433e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.921635e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.506480e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.201674e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.178829e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (8.977638e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.608789e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count" (1.565158e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.256394e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.626273e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.947088e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.812317e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.196670e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.583011e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.288686e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.706556e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.571659e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.514767e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.506499e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.128945e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.030600e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (5.987703e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.424558e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.703056e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.713414e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.289699e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.109999e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.788384e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.091288e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.215306e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.427459e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.279943e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.071999e-04%)
Noelle:     Loop "  %49 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %62, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp slt i64 %indvars.iv, %72" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.239858e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.163000e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.377984e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.050327e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.430928e-05%)
Noelle:     Loop "  %Pivot = icmp ult i64 %indvars.iv58, 17" (1.420049e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.338095e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.325766e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.221329e-05%)
Noelle:     Loop "  %396 = icmp sgt i64 %indvars.iv44, %394" (5.729512e-07%)
Noelle:     Loop "  %504 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.626273e-08%)
Noelle:     Loop "  %516 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.626273e-08%)
Noelle:     Loop "  %528 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.545808e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.234601e-04%)
Noelle:     Loop "  %553 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.736292e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.178974e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.313562e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.313562e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.057693e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (2.001340e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.383313e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.311513e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.485480e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.654590e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.570176e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.490178e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.076436e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.162868e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.885662e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.930029e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.400499e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.958693e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.498282e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.720557e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.536941e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.742188e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.248290e-07%)
Noelle:     Loop "  %163 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.485480e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.589159e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.291805e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.995302e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %183 = sext i32 %182 to i64" (0.000000e+00%)
Noelle:     Loop "  %319 = add nsw i32 %318, 2" (5.388642e-06%)
Noelle:     Loop "  %323 = add nsw i32 %322, 2" (4.068679e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %370 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %352 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.848959e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.529562e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.060575e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.211175e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.209725e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.060575e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.642481e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.443257e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.843850e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.901019e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.729512e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.620724e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.641630e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.372434e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.558005e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (1.000851e-06%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (8.558005e-07%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %441 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %474 = icmp slt i64 %indvars.iv57, %470" (0.000000e+00%)
Noelle:     Loop "  %491 = icmp slt i32 %.36, %490" (0.000000e+00%)
Noelle:     Loop "  %574 = load i32, i32* %7, align 4, !tbaa !30" (1.450509e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.863464e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.164665e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.931732e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.988901e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.698799e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.988901e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.538391e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.786681e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.802038e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %Pivot17 = icmp slt i8 %11, 80" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i32 %.02, %12" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %218 = icmp slt i64 %indvars.iv84, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %197 = icmp slt i64 %indvars.iv90, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %248 = icmp slt i64 %indvars.iv92, %.pre-phi30" (0.000000e+00%)
Noelle:     Loop "  %286 = icmp slt i64 %indvars.iv, %284" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %8 = icmp slt i64 %indvars.iv, %6" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %23" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %153" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in2, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in3, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %210" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39 = icmp ult i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us15 = icmp ult i64 %indvars.iv24.us14, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us = icmp ult i64 %indvars.iv24.us9, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32.us = icmp ult i64 %indvars.iv24.us.us, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv24.us, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (2.792545e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us.us = icmp eq i64 %indvars.iv69.us.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %483 = icmp slt i64 %indvars.iv, %481" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.388746e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.530628e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw i32 %60, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %71" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv, %70" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: DeadFunctions: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
noelle-enable baseline_pre.bc baseline_pre.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: Enablers: Start
noelle-fixedpoint baseline_pre.bc baseline_pre.bc "noelle-parallel-load" -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint: Start
NOELLE: FixedPoint:   Loader: noelle-parallel-load
NOELLE: FixedPoint:   Options: -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier
NOELLE: FixedPoint:   Input: baseline_pre.bc
NOELLE: FixedPoint:   Output: baseline_pre.bc
NOELLE: FixedPoint:   Temporary input: /tmp/tmp.RNARlSFZGc (.ll version is /tmp/tmp.SUMEbet8xP)
NOELLE: FixedPoint:   Temporary output: /tmp/tmp.iiTBei7fYA (.ll version is /tmp/tmp.lzGRuabSLG)
NOELLE: FixedPoint:   Normalize the code
noelle-norm /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
NOELLE: FixedPoint:   Run until a fixed point is reached
NOELLE: FixedPoint:     Invocation 0
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.546454e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.895665e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.016535e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.426057e-06%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.784771e-06%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %149 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %148, i64 0, i32 1" (7.503387e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.843565e-06%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.087801e-07%)
Noelle:  Disable loop "7" as cold code
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.491585e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.406058e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.862538e-02%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.337759e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.689719e-04%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.019379e-03%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.689719e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.488105e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.411014e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.569277e-03%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "21" as cold code
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.518295e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.804451e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.071916e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.217050e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.471106e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.011380e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.117074e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.339541e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.253908e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.593257e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.963073e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.780309e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:  Disable loop "55" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.586236e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.114358e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:  Disable loop "58" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:  Disable loop "60" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:  Disable loop "61" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.097985e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.006657e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.243741e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.399246e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:  Disable loop "66" as cold code
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:  Disable loop "67" as cold code
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:  Disable loop "68" as cold code
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.766342e-02%)
Noelle:  Disable loop "69" as cold code
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.780391e-03%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.824953e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.517561e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.289834e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.243561e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:  Disable loop "75" as cold code
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.549532e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:  Disable loop "77" as cold code
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:  Disable loop "78" as cold code
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:  Disable loop "79" as cold code
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:  Disable loop "80" as cold code
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:  Disable loop "81" as cold code
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:  Disable loop "82" as cold code
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:  Disable loop "83" as cold code
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:  Disable loop "84" as cold code
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:  Disable loop "85" as cold code
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:  Disable loop "87" as cold code
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:  Disable loop "88" as cold code
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.744408e-02%)
Noelle:  Disable loop "89" as cold code
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.479945e-02%)
Noelle:  Disable loop "90" as cold code
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.190062e-02%)
Noelle:  Disable loop "91" as cold code
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.490842e-02%)
Noelle:  Disable loop "92" as cold code
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.306192e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.050214e-02%)
Noelle:  Disable loop "94" as cold code
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.147400e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.062013e-02%)
Noelle:  Disable loop "96" as cold code
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.820825e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.043924e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:  Disable loop "99" as cold code
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.829469e-02%)
Noelle:  Disable loop "100" as cold code
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv67, %64" (6.577354e-03%)
Noelle:  Disable loop "101" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.150559e-01%)
Noelle:     Loop "  %141 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:  Disable loop "103" as cold code
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:  Disable loop "104" as cold code
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv61, %184" (0.000000e+00%)
Noelle:  Disable loop "105" as cold code
Noelle:     Loop "  %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.608372e+00%)
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv, -1" (8.662875e-01%)
Noelle:     Loop "  %342 = icmp slt i64 %indvars.iv55, %340" (3.735916e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:  Disable loop "109" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "110" as cold code
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.128978e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:  Disable loop "112" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.043497e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.542479e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.162197e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.500326e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Disable loop "117" as cold code
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:  Disable loop "118" as cold code
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:  Disable loop "119" as cold code
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.409635e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.080339e-03%)
Noelle:  Disable loop "121" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.108740e-04%)
Noelle:  Disable loop "122" as cold code
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.920001e-03%)
Noelle:  Disable loop "123" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.360001e-03%)
Noelle:  Disable loop "124" as cold code
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.758898e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Disable loop "126" as cold code
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.738631e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "128" as cold code
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.671199e-02%)
Noelle:  Disable loop "129" as cold code
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.451681e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.282805e-02%)
Noelle:  Disable loop "131" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.959953e-02%)
Noelle:  Disable loop "132" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:  Disable loop "133" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.986933e-02%)
Noelle:  Disable loop "134" as cold code
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.528848e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.246759e-02%)
Noelle:  Disable loop "136" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.897727e-02%)
Noelle:  Disable loop "137" as cold code
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.095506e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.742988e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:  Disable loop "140" as cold code
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.031366e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.207599e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.062642e-02%)
Noelle:  Disable loop "143" as cold code
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:  Disable loop "144" as cold code
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.887843e-01%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv16, %95" (4.028528e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.514753e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:  Disable loop "148" as cold code
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:  Disable loop "149" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "150" as cold code
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.016469e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.620365e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.995880e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.654885e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.311418e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:  Disable loop "156" as cold code
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.546180e-02%)
Noelle:  Disable loop "157" as cold code
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:  Disable loop "158" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.055427e-02%)
Noelle:  Disable loop "159" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.554746e-02%)
Noelle:  Disable loop "160" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.494237e-02%)
Noelle:  Disable loop "161" as cold code
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:  Disable loop "162" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.419996e-02%)
Noelle:  Disable loop "163" as cold code
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:  Disable loop "164" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "165" as cold code
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "166" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Disable loop "167" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.455647e-02%)
Noelle:  Disable loop "168" as cold code
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.076489e-03%)
Noelle:  Disable loop "169" as cold code
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Disable loop "170" as cold code
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.183225e-01%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.437502e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.938840e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.224400e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.442022e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv, %77" (7.410958e-03%)
Noelle:  Disable loop "176" as cold code
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Disable loop "177" as cold code
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:  Disable loop "178" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.982426e-02%)
Noelle:  Disable loop "179" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "180" as cold code
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.671599e-02%)
Noelle:  Disable loop "181" as cold code
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.042507e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.965076e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.345457e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:  Disable loop "185" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Disable loop "186" as cold code
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:  Disable loop "187" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Disable loop "188" as cold code
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.249189e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.479645e-02%)
Noelle:  Disable loop "190" as cold code
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.122192e-02%)
Noelle:  Disable loop "191" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.509093e-03%)
Noelle:  Disable loop "192" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.508932e-03%)
Noelle:  Disable loop "193" as cold code
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:  Disable "x264_cabac_mb_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Disable "x264_cabac_mb_cbp_chroma" as cold function
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Disable "x264_macroblock_cache_ref.799" as cold function
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Disable "zigzag_scan_2x2_dc" as cold function
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Disable "x264_cabac_encode_terminal" as cold function
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Disable "x264_macroblock_cache_mvd" as cold function
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:  Disable "x264_macroblock_cache_rect1.801" as cold function
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Disable "x264_cabac_encode_renorm" as cold function
Noelle:  Function "predict_4x4_h"
Noelle:  Disable "predict_4x4_h" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1019" as cold function
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Disable "x264_cabac_pos.1016" as cold function
Noelle:  Function "bs_size_ue"
Noelle:  Disable "bs_size_ue" as cold function
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:  Disable "predict_8x8c_dc_left.1111" as cold function
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Disable "x264_mb_predict_mv" as cold function
Noelle:  Function "x264_ratecontrol_mb"
Noelle:  Disable "x264_ratecontrol_mb" as cold function
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Disable "x264_cabac_mb_type_intra.1056" as cold function
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:  Disable "x264_cabac_mb_mvd_cpn.1048" as cold function
Noelle:  Function "plane_expand_border"
Noelle:  Disable "plane_expand_border" as cold function
Noelle:  Function "bs_size_ue_big"
Noelle:  Disable "bs_size_ue_big" as cold function
Noelle:  Function "x264_cabac_pos"
Noelle:  Disable "x264_cabac_pos" as cold function
Noelle:  Function "predict_4x4_v"
Noelle:  Disable "predict_4x4_v" as cold function
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:  Disable "predict_16x16_dc_left.1108" as cold function
Noelle:  Function "mc_luma_sse2"
Noelle:  Disable "mc_luma_sse2" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Disable "x264_macroblock_cache_mvd.1052" as cold function
Noelle:  Function "bs_size_te"
Noelle:  Disable "bs_size_te" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:  Disable "x264_macroblock_cache_rect4.1053" as cold function
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Disable "x264_cabac_mb_intra_chroma_pred_mode.1023" as cold function
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:  Disable "x264_cabac_mb_qp_delta.1035" as cold function
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Disable "x264_predictor_difference_mmxext" as cold function
Noelle:  Function "bs_pos"
Noelle:  Disable "bs_pos" as cold function
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Disable "x264_mb_predict_mv_pskip" as cold function
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:  Disable "x264_bitstream_check_buffer" as cold function
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Disable "x264_cabac_mb_cbp_luma.1032" as cold function
Noelle:  Function "x264_cabac_mb_ref"
Noelle:  Disable "x264_cabac_mb_ref" as cold function
Noelle:  Function "x264_frame_expand_border"
Noelle:  Disable "x264_frame_expand_border" as cold function
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:  Disable "predict_8x8c_dc_top.1112" as cold function
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:  Disable "x264_frame_expand_border_filtered" as cold function
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Disable "x264_cabac_mb_intra4x4_pred_mode.1022" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:  Disable "x264_mb_transform_8x8_allowed" as cold function
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Disable "x264_median_mv_mmxext" as cold function
Noelle:  Function "sum_sa8d"
Noelle:  Disable "sum_sa8d" as cold function
Noelle:  Function "sum_satd"
Noelle:  Disable "sum_satd" as cold function
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Disable "x264_cabac_mb_skip" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Disable "x264_cabac_mb_cbp_chroma.1033" as cold function
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:  Disable "x264_mb_analyse_load_costs" as cold function
Noelle:  Function "x264_cabac_context_init"
Noelle:  Disable "x264_cabac_context_init" as cold function
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Disable "predict_16x16_mode_available" as cold function
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Disable "predict_8x8chroma_mode_available" as cold function
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Disable "x264_macroblock_encode_pskip" as cold function
Noelle:  Function "pack16to32_mask.829"
Noelle:  Disable "pack16to32_mask.829" as cold function
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:  Disable "x264_cabac_mb_ref.1024" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1034" as cold function
Noelle:  Function "x264_encoder_open"
Noelle:  Disable "x264_encoder_open" as cold function
Noelle:  Function "x264_clip3.664"
Noelle:  Disable "x264_clip3.664" as cold function
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Disable "predict_4x4_dc_left" as cold function
Noelle:  Function "x264_rdo_init"
Noelle:  Disable "x264_rdo_init" as cold function
Noelle:  Function "x264_clip3.813"
Noelle:  Disable "x264_clip3.813" as cold function
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Disable "x264_mb_analyse_transform_rd" as cold function
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Disable "x264_ratecontrol_qp" as cold function
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Disable "predict_4x4_dc_top" as cold function
Noelle:  Function "x264_clip3.748"
Noelle:  Disable "x264_clip3.748" as cold function
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Disable "x264_macroblock_encode_skip" as cold function
Noelle:  Function "x264_encoder_frame_end"
Noelle:  Disable "x264_encoder_frame_end" as cold function
Noelle:  Function "pack16to32_mask.785"
Noelle:  Disable "pack16to32_mask.785" as cold function
Noelle:  Function "x264_frame_filter"
Noelle:  Disable "x264_frame_filter" as cold function
Noelle:  Function "x264_clip3.1001"
Noelle:  Disable "x264_clip3.1001" as cold function
Noelle:  Function "bs_size_se"
Noelle:  Disable "bs_size_se" as cold function
Noelle:  Function "x264_noise_reduction_update"
Noelle:  Disable "x264_noise_reduction_update" as cold function
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Disable "pack16to32_mask.1051" as cold function
Noelle:  Function "x264_cqm_init"
Noelle:  Disable "x264_cqm_init" as cold function
Noelle:  Function "x264_reference_build_list"
Noelle:  Disable "x264_reference_build_list" as cold function
Noelle:  Function "x264_slice_header_write"
Noelle:  Disable "x264_slice_header_write" as cold function
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Disable "x264_cabac_size_decision2" as cold function
Noelle:  Function "predict_8x8c_dc_128"
Noelle:  Disable "predict_8x8c_dc_128" as cold function
Noelle:  Function "predict_16x16_dc_128"
Noelle:  Disable "predict_16x16_dc_128" as cold function
Noelle:  Function "pack8to32"
Noelle:  Disable "pack8to32" as cold function
Noelle:  Function "x264_slice_init"
Noelle:  Disable "x264_slice_init" as cold function
Noelle:  Function "bs_write_ue_big"
Noelle:  Disable "bs_write_ue_big" as cold function
Noelle:  Function "bs_write"
Noelle:  Disable "bs_write" as cold function
Noelle:  Function "x264_macroblock_slice_init"
Noelle:  Disable "x264_macroblock_slice_init" as cold function
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:  Disable "x264_frame_expand_border_mod16" as cold function
Noelle:  Function "x264_encoder_close"
Noelle:  Disable "x264_encoder_close" as cold function
Noelle:  Function "x264_reference_update"
Noelle:  Disable "x264_reference_update" as cold function
Noelle:  Function "x264_frame_delete"
Noelle:  Disable "x264_frame_delete" as cold function
Noelle:  Function "x264_slice_header_init"
Noelle:  Disable "x264_slice_header_init" as cold function
Noelle:  Function "x264_ratecontrol_start"
Noelle:  Disable "x264_ratecontrol_start" as cold function
Noelle:  Function "x264_ratecontrol_end"
Noelle:  Disable "x264_ratecontrol_end" as cold function
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:  Disable "setup_inverse_delta_pocs" as cold function
Noelle:  Function "bs_write_se"
Noelle:  Disable "bs_write_se" as cold function
Noelle:  Function "x264_cabac_encode_flush"
Noelle:  Disable "x264_cabac_encode_flush" as cold function
Noelle:  Function "x264_frame_copy_picture"
Noelle:  Disable "x264_frame_copy_picture" as cold function
Noelle:  Function "bs_write.943"
Noelle:  Disable "bs_write.943" as cold function
Noelle:  Function "x264_frame_shift"
Noelle:  Disable "x264_frame_shift" as cold function
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Disable "x264_frame_pop_unused" as cold function
Noelle:  Function "x264_free"
Noelle:  Disable "x264_free" as cold function
Noelle:  Function "x264_sei_version_write"
Noelle:  Disable "x264_sei_version_write" as cold function
Noelle:  Function "x264_frame_push"
Noelle:  Disable "x264_frame_push" as cold function
Noelle:  Function "read_frame_y4m"
Noelle:  Disable "read_frame_y4m" as cold function
Noelle:  Function "x264_sps_write"
Noelle:  Disable "x264_sps_write" as cold function
Noelle:  Function "bs_align_1"
Noelle:  Disable "bs_align_1" as cold function
Noelle:  Function "x264_slicetype_decide"
Noelle:  Disable "x264_slicetype_decide" as cold function
Noelle:  Function "x264_nal_end"
Noelle:  Disable "x264_nal_end" as cold function
Noelle:  Function "x264_frame_push_unused"
Noelle:  Disable "x264_frame_push_unused" as cold function
Noelle:  Function "x264_nal_start"
Noelle:  Disable "x264_nal_start" as cold function
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Disable "bs_write_ue_big.944" as cold function
Noelle:  Function "bs_write1"
Noelle:  Disable "bs_write1" as cold function
Noelle:  Function "bs_init"
Noelle:  Disable "bs_init" as cold function
Noelle:  Function "x264_frame_pop"
Noelle:  Disable "x264_frame_pop" as cold function
Noelle:  Function "bs_flush"
Noelle:  Disable "bs_flush" as cold function
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Disable "predict_4x4_dc_128" as cold function
Noelle:  Function "Parse"
Noelle:  Disable "Parse" as cold function
Noelle:  Function "x264_pps_write"
Noelle:  Disable "x264_pps_write" as cold function
Noelle:  Function "get_zone"
Noelle:  Disable "get_zone" as cold function
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Disable "x264_cabac_encode_init" as cold function
Noelle:  Function "x264_frame_new"
Noelle:  Disable "x264_frame_new" as cold function
Noelle:  Function "x264_param_parse"
Noelle:  Disable "x264_param_parse" as cold function
Noelle:  Function "update_vbv"
Noelle:  Disable "update_vbv" as cold function
Noelle:  Function "x264_validate_parameters"
Noelle:  Disable "x264_validate_parameters" as cold function
Noelle:  Function "x264_dct_init_weights"
Noelle:  Disable "x264_dct_init_weights" as cold function
Noelle:  Function "x264_log"
Noelle:  Disable "x264_log" as cold function
Noelle:  Function "x264_reference_reset"
Noelle:  Disable "x264_reference_reset" as cold function
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Disable "x264_thread_sync_stat" as cold function
Noelle:  Function "endian_fix"
Noelle:  Disable "endian_fix" as cold function
Noelle:  Function "x264_validate_levels"
Noelle:  Disable "x264_validate_levels" as cold function
Noelle:  Function "x264_clip3.848"
Noelle:  Disable "x264_clip3.848" as cold function
Noelle:  Function "bs_write1.946"
Noelle:  Disable "bs_write1.946" as cold function
Noelle:  Function "open_file_y4m"
Noelle:  Disable "open_file_y4m" as cold function
Noelle:  Function "x264_macroblock_cache_end"
Noelle:  Disable "x264_macroblock_cache_end" as cold function
Noelle:  Function "write_nalu_bsf"
Noelle:  Disable "write_nalu_bsf" as cold function
Noelle:  Function "bs_write_se.945"
Noelle:  Disable "bs_write_se.945" as cold function
Noelle:  Function "x264_sps_init"
Noelle:  Disable "x264_sps_init" as cold function
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Disable "bs_rbsp_trailing.947" as cold function
Noelle:  Function "x264_cqm_delete"
Noelle:  Disable "x264_cqm_delete" as cold function
Noelle:  Function "bs_write32"
Noelle:  Disable "bs_write32" as cold function
Noelle:  Function "x264_ratecontrol_new"
Noelle:  Disable "x264_ratecontrol_new" as cold function
Noelle:  Function "x264_malloc"
Noelle:  Disable "x264_malloc" as cold function
Noelle:  Function "x264_pixel_init"
Noelle:  Disable "x264_pixel_init" as cold function
Noelle:  Function "x264_macroblock_cache_init"
Noelle:  Disable "x264_macroblock_cache_init" as cold function
Noelle:  Function "endian_fix.949"
Noelle:  Disable "endian_fix.949" as cold function
Noelle:  Function "x264_param_default"
Noelle:  Disable "x264_param_default" as cold function
Noelle:  Function "bs_flush.948"
Noelle:  Disable "bs_flush.948" as cold function
Noelle:  Function "x264_param2string"
Noelle:  Disable "x264_param2string" as cold function
Noelle:  Function "x264_cpu_detect"
Noelle:  Disable "x264_cpu_detect" as cold function
Noelle:  Function "x264_mc_init"
Noelle:  Disable "x264_mc_init" as cold function
Noelle:  Function "set_eop_bsf"
Noelle:  Disable "set_eop_bsf" as cold function
Noelle:  Function "x264_pps_init"
Noelle:  Disable "x264_pps_init" as cold function
Noelle:  Function "x264_clip3.593"
Noelle:  Disable "x264_clip3.593" as cold function
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Disable "x264_mc_init_mmx" as cold function
Noelle:  Function "x264_quant_init"
Noelle:  Disable "x264_quant_init" as cold function
Noelle:  Function "parse_enum"
Noelle:  Disable "parse_enum" as cold function
Noelle:  Function "qp2qscale"
Noelle:  Disable "qp2qscale" as cold function
Noelle:  Function "x264_frame_sort"
Noelle:  Disable "x264_frame_sort" as cold function
Noelle:  Function "x264_atobool"
Noelle:  Disable "x264_atobool" as cold function
Noelle:  Function "x264_atoi"
Noelle:  Disable "x264_atoi" as cold function
Noelle:  Function "mbcmp_init"
Noelle:  Disable "mbcmp_init" as cold function
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Disable "x264_predict_8x8_init" as cold function
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Disable "x264_predict_16x16_init" as cold function
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Disable "x264_predict_4x4_init" as cold function
Noelle:  Function "x264_dct_init"
Noelle:  Disable "x264_dct_init" as cold function
Noelle:  Function "x264_ratecontrol_delete"
Noelle:  Disable "x264_ratecontrol_delete" as cold function
Noelle:  Function "x264_reduce_fraction"
Noelle:  Disable "x264_reduce_fraction" as cold function
Noelle:  Function "x264_zigzag_init"
Noelle:  Disable "x264_zigzag_init" as cold function
Noelle:  Function "x264_print_intra"
Noelle:  Disable "x264_print_intra" as cold function
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Disable "x264_predict_8x8c_init" as cold function
Noelle:  Function "x264_picture_alloc"
Noelle:  Disable "x264_picture_alloc" as cold function
Noelle:  Function "get_frame_total_y4m"
Noelle:  Disable "get_frame_total_y4m" as cold function
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Disable "x264_predict_16x16_init_mmx" as cold function
Noelle:  Function "x264_deblock_init"
Noelle:  Disable "x264_deblock_init" as cold function
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Disable "x264_predict_8x8_init_mmx" as cold function
Noelle:  Function "x264_mdate"
Noelle:  Disable "x264_mdate" as cold function
Noelle:  Function "endian_fix32"
Noelle:  Disable "endian_fix32" as cold function
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Disable "x264_predict_8x8c_init_mmx" as cold function
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Disable "x264_predict_4x4_init_mmx" as cold function
Noelle:  Function "x264_clip3f"
Noelle:  Disable "x264_clip3f" as cold function
Noelle:  Function "parse_zones"
Noelle:  Disable "parse_zones" as cold function
Noelle:  Function "x264_picture_clean"
Noelle:  Disable "x264_picture_clean" as cold function
Noelle:  Function "close_file_bsf"
Noelle:  Disable "close_file_bsf" as cold function
Noelle:  Function "close_file_y4m"
Noelle:  Disable "close_file_y4m" as cold function
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Disable "x264_ratecontrol_summary" as cold function
Noelle:  Function "open_file_bsf"
Noelle:  Disable "open_file_bsf" as cold function
Noelle:  Function "x264_clip3"
Noelle:  Disable "x264_clip3" as cold function
Noelle:  Function "set_param_bsf"
Noelle:  Disable "set_param_bsf" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3" as cold function
Noelle:  Function "row_bits_so_far"
Noelle:  Disable "row_bits_so_far" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Disable "x264_macroblock_cache_mvd.842" as cold function
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:  Disable "x264_slicetype_mb_cost" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3" as cold function
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Disable "x264_median_mv_mmxext.824" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x8_sse2" as cold function
Noelle:  Function "accum_p_qp_update"
Noelle:  Disable "accum_p_qp_update" as cold function
Noelle:  Function "update_predictor"
Noelle:  Disable "update_predictor" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x4_ssse3" as cold function
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Disable "x264_me_refine_qpel" as cold function
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Disable "x264_me_refine_bidir_satd" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x4_ssse3" as cold function
Noelle:  Function "x264_me_refine_bidir"
Noelle:  Disable "x264_me_refine_bidir" as cold function
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Disable "x264_me_refine_bidir_rd" as cold function
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:  Disable "x264_me_refine_qpel_rd" as cold function
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Disable "x264_macroblock_cache_mv.841" as cold function
Noelle:  Function "x264_rc_analyse_slice"
Noelle:  Disable "x264_rc_analyse_slice" as cold function
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:  Disable "predict_16x16_p_mmxext" as cold function
Noelle:  Function "x264_clip3f.856"
Noelle:  Disable "x264_clip3f.856" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x4_mmxext" as cold function
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Disable "x264_partition_i4x4_size_cabac" as cold function
Noelle:  Function "ac_energy_mb"
Noelle:  Disable "ac_energy_mb" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x8_mmxext" as cold function
Noelle:  Function "x264_adaptive_quant"
Noelle:  Disable "x264_adaptive_quant" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x4_mmxext" as cold function
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Disable "cavlc_intra4x4_pred_size" as cold function
Noelle:  Function "predict_size"
Noelle:  Disable "predict_size" as cold function
Noelle:  Function "fix_underflow"
Noelle:  Disable "fix_underflow" as cold function
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Disable "x264_partition_i4x4_size_cavlc" as cold function
Noelle:  Function "find_underflow"
Noelle:  Disable "find_underflow" as cold function
Noelle:  Function "qscale2qp"
Noelle:  Disable "qscale2qp" as cold function
Noelle:  Function "count_expected_bits"
Noelle:  Disable "count_expected_bits" as cold function
Noelle:  Function "vbv_pass2"
Noelle:  Disable "vbv_pass2" as cold function
Noelle:  Function "clip_qscale"
Noelle:  Disable "clip_qscale" as cold function
Noelle:  Function "get_diff_limited_q"
Noelle:  Disable "get_diff_limited_q" as cold function
Noelle:  Function "get_qscale"
Noelle:  Disable "get_qscale" as cold function
Noelle:  Function "qscale2bits"
Noelle:  Disable "qscale2bits" as cold function
Noelle:  Function "init_pass2"
Noelle:  Disable "init_pass2" as cold function
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Disable "x264_ratecontrol_get_estimated_size" as cold function
Noelle:  Function "x264_slicetype_path"
Noelle:  Disable "x264_slicetype_path" as cold function
Noelle:  Function "rate_estimate_qscale"
Noelle:  Disable "rate_estimate_qscale" as cold function
Noelle:  Function "update_vbv_plan"
Noelle:  Disable "update_vbv_plan" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:  Disable "x264_macroblock_cache_rect4.843" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:  Disable "x264_mb_analyse_inter_b8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:  Disable "x264_mb_analyse_inter_b16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x8_mmxext" as cold function
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:  Disable "x264_adaptive_quant_frame" as cold function
Noelle:  Function "x264_slicetype_path_cost"
Noelle:  Disable "x264_slicetype_path_cost" as cold function
Noelle:  Function "x264_slicetype_path_search"
Noelle:  Disable "x264_slicetype_path_search" as cold function
Noelle:  Function "scenecut"
Noelle:  Disable "scenecut" as cold function
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Disable "x264_ratecontrol_set_estimated_size" as cold function
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:  Disable "x264_slicetype_frame_cost" as cold function
Noelle:  Function "x264_lowres_context_init"
Noelle:  Disable "x264_lowres_context_init" as cold function
Noelle:  Function "x264_slicetype_analyse"
Noelle:  Disable "x264_slicetype_analyse" as cold function
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Disable "predict_8x8_vr_mmxext" as cold function
Noelle:  Function "parse_zone"
Noelle:  Disable "parse_zone" as cold function
Noelle:  Function "x264_frame_unshift"
Noelle:  Disable "x264_frame_unshift" as cold function
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Disable "array_non_zero_count_mmx.1086" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:  Disable "x264_macroblock_luma_write_cavlc.1087" as cold function
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Disable "bs_size_ue_big.963" as cold function
Noelle:  Function "bs_size_se.962"
Noelle:  Disable "bs_size_se.962" as cold function
Noelle:  Function "scaling_list_write"
Noelle:  Disable "scaling_list_write" as cold function
Noelle:  Function "transpose"
Noelle:  Disable "transpose" as cold function
Noelle:  Function "endian_fix32.950"
Noelle:  Disable "endian_fix32.950" as cold function
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Disable "x264_thread_sync_ratecontrol" as cold function
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:  Disable "x264_ratecontrol_slice_type" as cold function
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Disable "x264_clip_uint8.729" as cold function
Noelle:  Function "predict_row_size"
Noelle:  Disable "predict_row_size" as cold function
Noelle:  Function "predict_row_size_sum"
Noelle:  Disable "predict_row_size_sum" as cold function
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:  Disable "block_residual_write_cavlc.1085" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Disable "x264_mb_predict_non_zero_code.1088" as cold function
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Disable "bs_write_vlc.1090" as cold function
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Disable "x264_frame_cond_broadcast" as cold function
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Disable "cavlc_mb_mvd.1093" as cold function
Noelle:  Function "deblock_luma_c"
Noelle:  Disable "deblock_luma_c" as cold function
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Disable "x264_clip_uint8.704" as cold function
Noelle:  Function "x264_clip3.703"
Noelle:  Disable "x264_clip3.703" as cold function
Noelle:  Function "deblock_chroma_c"
Noelle:  Disable "deblock_chroma_c" as cold function
Noelle:  Function "deblock_luma_intra_c"
Noelle:  Disable "deblock_luma_intra_c" as cold function
Noelle:  Function "deblock_chroma_intra_c"
Noelle:  Disable "deblock_chroma_intra_c" as cold function
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Disable "deblock_h_chroma_intra_c" as cold function
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Disable "deblock_v_chroma_intra_c" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1066" as cold function
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Disable "x264_cabac_mb_transform_size.1018" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Disable "x264_cabac_mb_sub_p_partition.1026" as cold function
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Disable "x264_macroblock_encode_p4x4" as cold function
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:  Disable "x264_macroblock_encode_p8x8" as cold function
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:  Disable "x264_macroblock_probe_skip" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Disable "x264_cabac_mb8x8_mvd.1027" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Disable "x264_cabac_mb_sub_b_partition.1028" as cold function
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:  Disable "x264_macroblock_write_cavlc" as cold function
Noelle:  Function "bs_pos.1063"
Noelle:  Disable "bs_pos.1063" as cold function
Noelle:  Function "bs_write1.1065"
Noelle:  Disable "bs_write1.1065" as cold function
Noelle:  Function "bs_write_ue"
Noelle:  Disable "bs_write_ue" as cold function
Noelle:  Function "bs_align_0"
Noelle:  Disable "bs_align_0" as cold function
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Disable "deblock_h_luma_intra_c" as cold function
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Disable "x264_predict_lossless_16x16" as cold function
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Disable "x264_predict_lossless_8x8" as cold function
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Disable "x264_predict_lossless_4x4" as cold function
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Disable "x264_predict_lossless_8x8_chroma" as cold function
Noelle:  Function "bs_write.1069"
Noelle:  Disable "bs_write.1069" as cold function
Noelle:  Function "bs_write_te"
Noelle:  Disable "bs_write_te" as cold function
Noelle:  Function "bs_write_se.1072"
Noelle:  Disable "bs_write_se.1072" as cold function
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Disable "cavlc_mb8x8_mvd.1074" as cold function
Noelle:  Function "x264_quant_8x8"
Noelle:  Disable "x264_quant_8x8" as cold function
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Disable "x264_mb_encode_i8x8" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1083" as cold function
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Disable "cavlc_qp_delta.1084" as cold function
Noelle:  Function "pixel_satd_wxh"
Noelle:  Disable "pixel_satd_wxh" as cold function
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Disable "x264_mb_mc_8x8" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Disable "x264_mb_load_mv_direct8x8" as cold function
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:  Disable "x264_macroblock_cache_rect1" as cold function
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:  Disable "x264_macroblock_cache_rect4" as cold function
Noelle:  Function "pack16to32_mask"
Noelle:  Disable "pack16to32_mask" as cold function
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Disable "x264_macroblock_cache_mv" as cold function
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Disable "x264_macroblock_cache_ref" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_temporal" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_spatial" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:  Disable "x264_mb_predict_mv_direct16x16" as cold function
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:  Disable "predict_16x16_dc_mmxext" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_sse2" as cold function
Noelle:  Function "pixel_sa8d_wxh"
Noelle:  Disable "pixel_sa8d_wxh" as cold function
Noelle:  Function "pixel_hadamard_ac"
Noelle:  Disable "pixel_hadamard_ac" as cold function
Noelle:  Function "ssim_end1"
Noelle:  Disable "ssim_end1" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3_phadd" as cold function
Noelle:  Function "mc_luma_mmxext"
Noelle:  Disable "mc_luma_mmxext" as cold function
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Disable "deblock_v_luma_intra_c" as cold function
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Disable "deblock_h_chroma_c" as cold function
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Disable "deblock_v_chroma_c" as cold function
Noelle:  Function "deblock_h_luma_c"
Noelle:  Disable "deblock_h_luma_c" as cold function
Noelle:  Function "deblock_v_luma_c"
Noelle:  Disable "deblock_v_luma_c" as cold function
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:  Disable "restore_cavlc_nnz_row" as cold function
Noelle:  Function "endian_fix.1095"
Noelle:  Disable "endian_fix.1095" as cold function
Noelle:  Function "bs_flush.1096"
Noelle:  Disable "bs_flush.1096" as cold function
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Disable "munge_cavlc_nnz" as cold function
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:  Disable "munge_cavlc_nnz_row" as cold function
Noelle:  Function "endian_fix32.1097"
Noelle:  Disable "endian_fix32.1097" as cold function
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:  Disable "x264_frame_expand_border_lowres" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:  Disable "x264_macroblock_bipred_init" as cold function
Noelle:  Function "get_ref_mmxext"
Noelle:  Disable "get_ref_mmxext" as cold function
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:  Disable "x264_hpel_filter_mmxext" as cold function
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:  Disable "x264_hpel_filter_sse2_amd" as cold function
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:  Disable "x264_hpel_filter_sse2_misalign" as cold function
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Disable "mc_luma_cache64_sse2" as cold function
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Disable "get_ref_cache64_sse2" as cold function
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Disable "get_ref_sse2_misalign" as cold function
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Disable "x264_mb_mc_direct8x8" as cold function
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Disable "x264_mb_mc_01xywh" as cold function
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Disable "x264_mb_mc_1xywh" as cold function
Noelle:  Function "strtable_lookup"
Noelle:  Disable "strtable_lookup" as cold function
Noelle:  Function "x264_decimate_score64"
Noelle:  Disable "x264_decimate_score64" as cold function
Noelle:  Function "x264_coeff_last4"
Noelle:  Disable "x264_coeff_last4" as cold function
Noelle:  Function "x264_coeff_last15"
Noelle:  Disable "x264_coeff_last15" as cold function
Noelle:  Function "x264_coeff_last16"
Noelle:  Disable "x264_coeff_last16" as cold function
Noelle:  Function "x264_coeff_last64"
Noelle:  Disable "x264_coeff_last64" as cold function
Noelle:  Function "parse_qpfile"
Noelle:  Disable "parse_qpfile" as cold function
Noelle:  Function "Help"
Noelle:  Disable "Help" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "mk_flushContextID"
Noelle:  Disable "mk_flushContextID" as cold function
Noelle:  Function "x264_decimate_score16"
Noelle:  Disable "x264_decimate_score16" as cold function
Noelle:  Function "mk_createWriter"
Noelle:  Disable "mk_createWriter" as cold function
Noelle:  Function "mk_createContext"
Noelle:  Disable "mk_createContext" as cold function
Noelle:  Function "mk_destroyContexts"
Noelle:  Disable "mk_destroyContexts" as cold function
Noelle:  Function "mk_writeHeader"
Noelle:  Disable "mk_writeHeader" as cold function
Noelle:  Function "mk_writeUInt"
Noelle:  Disable "mk_writeUInt" as cold function
Noelle:  Function "mk_writeStr"
Noelle:  Disable "mk_writeStr" as cold function
Noelle:  Function "mk_closeContext"
Noelle:  Disable "mk_closeContext" as cold function
Noelle:  Function "mk_writeFloat"
Noelle:  Disable "mk_writeFloat" as cold function
Noelle:  Function "quant_8x8"
Noelle:  Disable "quant_8x8" as cold function
Noelle:  Function "parse_cqm"
Noelle:  Disable "parse_cqm" as cold function
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Disable "zigzag_scan_8x8_frame" as cold function
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Disable "zigzag_scan_4x4_frame" as cold function
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Disable "zigzag_sub_8x8_frame" as cold function
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Disable "zigzag_sub_4x4_frame" as cold function
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:  Disable "zigzag_interleave_8x8_cavlc" as cold function
Noelle:  Function "x264_cqm_parse_file"
Noelle:  Disable "x264_cqm_parse_file" as cold function
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:  Disable "x264_cqm_parse_jmlist" as cold function
Noelle:  Function "mk_writeBin"
Noelle:  Disable "mk_writeBin" as cold function
Noelle:  Function "quant_4x4"
Noelle:  Disable "quant_4x4" as cold function
Noelle:  Function "quant_4x4_dc"
Noelle:  Disable "quant_4x4_dc" as cold function
Noelle:  Function "quant_2x2_dc"
Noelle:  Disable "quant_2x2_dc" as cold function
Noelle:  Function "dequant_4x4"
Noelle:  Disable "dequant_4x4" as cold function
Noelle:  Function "dequant_4x4_dc"
Noelle:  Disable "dequant_4x4_dc" as cold function
Noelle:  Function "dequant_8x8"
Noelle:  Disable "dequant_8x8" as cold function
Noelle:  Function "x264_denoise_dct"
Noelle:  Disable "x264_denoise_dct" as cold function
Noelle:  Function "x264_decimate_score15"
Noelle:  Disable "x264_decimate_score15" as cold function
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:  Disable "x264_pixel_sad_4x8" as cold function
Noelle:  Function "close_file_yuv"
Noelle:  Disable "close_file_yuv" as cold function
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Disable "x264_encoder_reconfig" as cold function
Noelle:  Function "x264_thread_sync_context"
Noelle:  Disable "x264_thread_sync_context" as cold function
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Disable "bs_rbsp_trailing" as cold function
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:  Disable "x264_pixel_sad_16x16" as cold function
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:  Disable "x264_pixel_sad_16x8" as cold function
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:  Disable "x264_pixel_sad_8x16" as cold function
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:  Disable "x264_pixel_sad_8x8" as cold function
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:  Disable "x264_pixel_sad_8x4" as cold function
Noelle:  Function "read_frame_yuv"
Noelle:  Disable "read_frame_yuv" as cold function
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:  Disable "x264_pixel_sad_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Disable "x264_pixel_sad_x3_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Disable "x264_pixel_sad_x3_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Disable "x264_pixel_sad_x3_8x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Disable "x264_pixel_sad_x3_8x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Disable "x264_pixel_sad_x3_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Disable "x264_pixel_sad_x3_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Disable "x264_pixel_sad_x3_4x4" as cold function
Noelle:  Function "mk_closeCluster"
Noelle:  Disable "mk_closeCluster" as cold function
Noelle:  Function "mk_flushContextData"
Noelle:  Disable "mk_flushContextData" as cold function
Noelle:  Function "mk_appendContextData"
Noelle:  Disable "mk_appendContextData" as cold function
Noelle:  Function "mk_writeID"
Noelle:  Disable "mk_writeID" as cold function
Noelle:  Function "x264_clip3.467"
Noelle:  Disable "x264_clip3.467" as cold function
Noelle:  Function "mk_writeSize"
Noelle:  Disable "mk_writeSize" as cold function
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Disable "mk_writeFloatRaw" as cold function
Noelle:  Function "mk_startFrame"
Noelle:  Disable "mk_startFrame" as cold function
Noelle:  Function "mk_flushFrame"
Noelle:  Disable "mk_flushFrame" as cold function
Noelle:  Function "x264_atof"
Noelle:  Disable "x264_atof" as cold function
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Disable "mk_ebmlSizeSize" as cold function
Noelle:  Function "mk_ebmlSIntSize"
Noelle:  Disable "mk_ebmlSIntSize" as cold function
Noelle:  Function "mk_writeSInt"
Noelle:  Disable "mk_writeSInt" as cold function
Noelle:  Function "mk_setFrameFlags"
Noelle:  Disable "mk_setFrameFlags" as cold function
Noelle:  Function "mk_addFrameData"
Noelle:  Disable "mk_addFrameData" as cold function
Noelle:  Function "mk_close"
Noelle:  Disable "mk_close" as cold function
Noelle:  Function "open_file_yuv"
Noelle:  Disable "open_file_yuv" as cold function
Noelle:  Function "get_frame_total_yuv"
Noelle:  Disable "get_frame_total_yuv" as cold function
Noelle:  Function "bs_write_vlc"
Noelle:  Disable "bs_write_vlc" as cold function
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Disable "x264_rd_cost_subpart" as cold function
Noelle:  Function "x264_partition_size_cabac"
Noelle:  Disable "x264_partition_size_cabac" as cold function
Noelle:  Function "x264_partition_size_cavlc"
Noelle:  Disable "x264_partition_size_cavlc" as cold function
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Disable "cavlc_mb8x8_mvd" as cold function
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Disable "cavlc_mb_mvd" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:  Disable "x264_macroblock_luma_write_cavlc" as cold function
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Disable "array_non_zero_count_mmx" as cold function
Noelle:  Function "block_residual_write_cavlc"
Noelle:  Disable "block_residual_write_cavlc" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Disable "x264_mb_predict_non_zero_code" as cold function
Noelle:  Function "x264_rd_cost_part"
Noelle:  Disable "x264_rd_cost_part" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Disable "x264_cabac_mb8x8_mvd" as cold function
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Disable "array_non_zero_int_mmx" as cold function
Noelle:  Function "array_non_zero_int_c"
Noelle:  Disable "array_non_zero_int_c" as cold function
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Disable "x264_subpartition_size_cabac" as cold function
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Disable "x264_subpartition_size_cavlc" as cold function
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:  Disable "x264_macroblock_size_cavlc" as cold function
Noelle:  Function "cavlc_qp_delta"
Noelle:  Disable "cavlc_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Disable "x264_cabac_mb_transform_size" as cold function
Noelle:  Function "predict_16x16_dc_top"
Noelle:  Disable "predict_16x16_dc_top" as cold function
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:  Disable "pixel_avg_weight_wxh" as cold function
Noelle:  Function "pixel_avg"
Noelle:  Disable "pixel_avg" as cold function
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Disable "x264_predict_8x8_filter" as cold function
Noelle:  Function "predict_16x16_v"
Noelle:  Disable "predict_16x16_v" as cold function
Noelle:  Function "predict_16x16_h"
Noelle:  Disable "predict_16x16_h" as cold function
Noelle:  Function "predict_16x16_dc"
Noelle:  Disable "predict_16x16_dc" as cold function
Noelle:  Function "predict_16x16_p"
Noelle:  Disable "predict_16x16_p" as cold function
Noelle:  Function "predict_16x16_dc_left"
Noelle:  Disable "predict_16x16_dc_left" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Disable "x264_cabac_mb_sub_p_partition" as cold function
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Disable "x264_clip_uint8.650" as cold function
Noelle:  Function "predict_8x8c_v"
Noelle:  Disable "predict_8x8c_v" as cold function
Noelle:  Function "predict_8x8c_h"
Noelle:  Disable "predict_8x8c_h" as cold function
Noelle:  Function "predict_8x8c_dc"
Noelle:  Disable "predict_8x8c_dc" as cold function
Noelle:  Function "x264_realloc"
Noelle:  Disable "x264_realloc" as cold function
Noelle:  Function "x264_slurp_file"
Noelle:  Disable "x264_slurp_file" as cold function
Noelle:  Function "x264_coeff_last_internal"
Noelle:  Disable "x264_coeff_last_internal" as cold function
Noelle:  Function "x264_decimate_score_internal"
Noelle:  Disable "x264_decimate_score_internal" as cold function
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Disable "x264_partition_i8x8_size_cabac" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Disable "x264_mb_cache_mv_b8x8" as cold function
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Disable "x264_macroblock_cache_skip" as cold function
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Disable "x264_macroblock_cache_intra8x8_pred" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Disable "x264_mb_analyse_inter_p4x4_chroma" as cold function
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Disable "x264_rd_cost_i4x4" as cold function
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Disable "x264_rd_cost_i8x8" as cold function
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Disable "x264_rd_cost_i8x8_chroma" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:  Disable "x264_i8x8_chroma_size_cabac" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:  Disable "x264_i8x8_chroma_size_cavlc" as cold function
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Disable "x264_mb_cache_mv_b16x8" as cold function
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:  Disable "x264_partition_i8x8_size_cavlc" as cold function
Noelle:  Function "open_file_mkv"
Noelle:  Disable "open_file_mkv" as cold function
Noelle:  Function "set_param_mkv"
Noelle:  Disable "set_param_mkv" as cold function
Noelle:  Function "gcd"
Noelle:  Disable "gcd" as cold function
Noelle:  Function "write_nalu_mkv"
Noelle:  Disable "write_nalu_mkv" as cold function
Noelle:  Function "write_header_mkv"
Noelle:  Disable "write_header_mkv" as cold function
Noelle:  Function "set_eop_mkv"
Noelle:  Disable "set_eop_mkv" as cold function
Noelle:  Function "close_file_mkv"
Noelle:  Disable "close_file_mkv" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:  Disable "x264_mb_analyse_inter_p8x8_mixed_ref" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Disable "x264_cabac_mb_sub_b_partition" as cold function
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Disable "x264_quant_dc_trellis" as cold function
Noelle:  Function "quant_trellis_cabac"
Noelle:  Disable "quant_trellis_cabac" as cold function
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Disable "x264_cabac_size_decision_noup2" as cold function
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Disable "x264_quant_4x4_trellis" as cold function
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Disable "x264_quant_8x8_trellis" as cold function
Noelle:  Function "x264_intra_rd_refine"
Noelle:  Disable "x264_intra_rd_refine" as cold function
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Disable "x264_macroblock_probe_pskip" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Disable "x264_pixel_sad_x4_16x16" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:  Disable "x264_mb_analyse_inter_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:  Disable "x264_mb_analyse_inter_p4x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:  Disable "x264_mb_analyse_inter_b8x16" as cold function
Noelle:  Function "x264_refine_bidir"
Noelle:  Disable "x264_refine_bidir" as cold function
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Disable "x264_mb_analyse_transform" as cold function
Noelle:  Function "x264_psy_trellis_init"
Noelle:  Disable "x264_psy_trellis_init" as cold function
Noelle:  Function "x264_me_search"
Noelle:  Disable "x264_me_search" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Disable "x264_mb_cache_mv_b8x16" as cold function
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:  Disable "x264_pixel_ssd_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Disable "x264_pixel_sad_x4_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Disable "x264_pixel_sad_x4_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Disable "x264_pixel_sad_x4_4x4" as cold function
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:  Disable "x264_pixel_ssd_16x16" as cold function
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:  Disable "x264_pixel_ssd_16x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:  Disable "x264_pixel_ssd_8x16" as cold function
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:  Disable "x264_pixel_ssd_8x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:  Disable "x264_pixel_ssd_8x4" as cold function
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:  Disable "x264_pixel_ssd_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Disable "x264_pixel_sad_x4_8x8" as cold function
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Disable "x264_pixel_satd_16x16" as cold function
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Disable "x264_pixel_satd_16x8" as cold function
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Disable "x264_pixel_satd_8x16" as cold function
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Disable "x264_pixel_satd_8x8" as cold function
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Disable "x264_pixel_satd_8x4" as cold function
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Disable "x264_pixel_satd_4x8" as cold function
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Disable "x264_pixel_satd_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Disable "x264_pixel_satd_x3_16x16" as cold function
Noelle:  Function "sub16x16_dct8"
Noelle:  Disable "sub16x16_dct8" as cold function
Noelle:  Function "sub4x4_dct"
Noelle:  Disable "sub4x4_dct" as cold function
Noelle:  Function "add4x4_idct"
Noelle:  Disable "add4x4_idct" as cold function
Noelle:  Function "sub8x8_dct"
Noelle:  Disable "sub8x8_dct" as cold function
Noelle:  Function "add8x8_idct"
Noelle:  Disable "add8x8_idct" as cold function
Noelle:  Function "sub16x16_dct"
Noelle:  Disable "sub16x16_dct" as cold function
Noelle:  Function "add16x16_idct"
Noelle:  Disable "add16x16_idct" as cold function
Noelle:  Function "sub8x8_dct8"
Noelle:  Disable "sub8x8_dct8" as cold function
Noelle:  Function "add8x8_idct8"
Noelle:  Disable "add8x8_idct8" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Disable "x264_pixel_satd_x3_16x8" as cold function
Noelle:  Function "add16x16_idct8"
Noelle:  Disable "add16x16_idct8" as cold function
Noelle:  Function "dct4x4dc"
Noelle:  Disable "dct4x4dc" as cold function
Noelle:  Function "idct4x4dc"
Noelle:  Disable "idct4x4dc" as cold function
Noelle:  Function "pixel_sub_wxh"
Noelle:  Disable "pixel_sub_wxh" as cold function
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Disable "zigzag_scan_8x8_field" as cold function
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Disable "zigzag_scan_4x4_field" as cold function
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Disable "zigzag_sub_8x8_field" as cold function
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Disable "zigzag_sub_4x4_field" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Disable "x264_pixel_hadamard_ac_8x16" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Disable "x264_pixel_hadamard_ac_8x8" as cold function
Noelle:  Function "x264_pixel_ads4"
Noelle:  Disable "x264_pixel_ads4" as cold function
Noelle:  Function "x264_pixel_ads2"
Noelle:  Disable "x264_pixel_ads2" as cold function
Noelle:  Function "x264_pixel_ads1"
Noelle:  Disable "x264_pixel_ads1" as cold function
Noelle:  Function "x264_pixel_var_16x16"
Noelle:  Disable "x264_pixel_var_16x16" as cold function
Noelle:  Function "x264_pixel_var_8x8"
Noelle:  Disable "x264_pixel_var_8x8" as cold function
Noelle:  Function "ssim_4x4x2_core"
Noelle:  Disable "ssim_4x4x2_core" as cold function
Noelle:  Function "ssim_end4"
Noelle:  Disable "ssim_end4" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Disable "x264_pixel_hadamard_ac_16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:  Disable "x264_mb_analyse_inter_p8x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:  Disable "x264_mb_analyse_inter_p4x8" as cold function
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Disable "x264_mb_cache_mv_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:  Disable "x264_mb_analyse_inter_p16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:  Disable "x264_mb_analyse_inter_p8x16" as cold function
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Disable "x264_macroblock_probe_bskip" as cold function
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:  Disable "x264_mb_analyse_inter_direct" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:  Disable "x264_mb_analyse_inter_b16x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Disable "x264_pixel_satd_x4_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Disable "x264_pixel_satd_x3_8x16" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Disable "x264_pixel_satd_x3_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Disable "x264_pixel_satd_x3_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Disable "x264_pixel_satd_x3_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Disable "x264_pixel_satd_x3_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Disable "x264_pixel_satd_x4_16x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Disable "x264_pixel_satd_x4_16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Disable "x264_pixel_satd_x4_8x16" as cold function
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:  Disable "x264_pixel_ssim_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Disable "x264_pixel_satd_x4_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Disable "x264_pixel_satd_x4_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Disable "x264_pixel_satd_x4_4x4" as cold function
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Disable "x264_pixel_sa8d_16x16" as cold function
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Disable "x264_pixel_sa8d_16x8" as cold function
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Disable "x264_pixel_sa8d_8x16" as cold function
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Disable "x264_pixel_sa8d_8x8" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Disable "x264_pixel_hadamard_ac_16x16" as cold function
Noelle:  Function "mc_copy_w8"
Noelle:  Disable "mc_copy_w8" as cold function
Noelle:  Function "mc_copy_w16"
Noelle:  Disable "mc_copy_w16" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x8_mmxext" as cold function
Noelle:  Function "pixel_avg_2x2"
Noelle:  Disable "pixel_avg_2x2" as cold function
Noelle:  Function "mc_copy_w4"
Noelle:  Disable "mc_copy_w4" as cold function
Noelle:  Function "plane_copy"
Noelle:  Disable "plane_copy" as cold function
Noelle:  Function "hpel_filter"
Noelle:  Disable "hpel_filter" as cold function
Noelle:  Function "prefetch_fenc_null"
Noelle:  Disable "prefetch_fenc_null" as cold function
Noelle:  Function "prefetch_ref_null"
Noelle:  Disable "prefetch_ref_null" as cold function
Noelle:  Function "memzero_aligned"
Noelle:  Disable "memzero_aligned" as cold function
Noelle:  Function "frame_init_lowres_core"
Noelle:  Disable "frame_init_lowres_core" as cold function
Noelle:  Function "x264_clip_uint8"
Noelle:  Disable "x264_clip_uint8" as cold function
Noelle:  Function "pixel_avg_16x16"
Noelle:  Disable "pixel_avg_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Disable "x264_pixel_sad_x4_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Disable "x264_pixel_sad_x4_8x16" as cold function
Noelle:  Function "x264_psnr"
Noelle:  Disable "x264_psnr" as cold function
Noelle:  Function "x264_frame_dump"
Noelle:  Disable "x264_frame_dump" as cold function
Noelle:  Function "x264_frame_init_lowres"
Noelle:  Disable "x264_frame_init_lowres" as cold function
Noelle:  Function "mc_luma"
Noelle:  Disable "mc_luma" as cold function
Noelle:  Function "get_ref"
Noelle:  Disable "get_ref" as cold function
Noelle:  Function "mc_chroma"
Noelle:  Disable "mc_chroma" as cold function
Noelle:  Function "mc_copy"
Noelle:  Disable "mc_copy" as cold function
Noelle:  Function "pixel_avg_16x8"
Noelle:  Disable "pixel_avg_16x8" as cold function
Noelle:  Function "pixel_avg_8x16"
Noelle:  Disable "pixel_avg_8x16" as cold function
Noelle:  Function "pixel_avg_8x8"
Noelle:  Disable "pixel_avg_8x8" as cold function
Noelle:  Function "pixel_avg_8x4"
Noelle:  Disable "pixel_avg_8x4" as cold function
Noelle:  Function "pixel_avg_4x8"
Noelle:  Disable "pixel_avg_4x8" as cold function
Noelle:  Function "pixel_avg_4x4"
Noelle:  Disable "pixel_avg_4x4" as cold function
Noelle:  Function "pixel_avg_4x2"
Noelle:  Disable "pixel_avg_4x2" as cold function
Noelle:  Function "pixel_avg_2x4"
Noelle:  Disable "pixel_avg_2x4" as cold function
Noelle:  Function "pack16to32"
Noelle:  Disable "pack16to32" as cold function
Noelle:  Function "predict_8x8_vr"
Noelle:  Disable "predict_8x8_vr" as cold function
Noelle:  Function "predict_8x8_hd"
Noelle:  Disable "predict_8x8_hd" as cold function
Noelle:  Function "predict_8x8_vl"
Noelle:  Disable "predict_8x8_vl" as cold function
Noelle:  Function "predict_8x8_hu"
Noelle:  Disable "predict_8x8_hu" as cold function
Noelle:  Function "predict_8x8_dc_left"
Noelle:  Disable "predict_8x8_dc_left" as cold function
Noelle:  Function "predict_8x8_dc_top"
Noelle:  Disable "predict_8x8_dc_top" as cold function
Noelle:  Function "predict_8x8_dc_128"
Noelle:  Disable "predict_8x8_dc_128" as cold function
Noelle:  Function "pack8to16"
Noelle:  Disable "pack8to16" as cold function
Noelle:  Function "predict_8x8_ddr"
Noelle:  Disable "predict_8x8_ddr" as cold function
Noelle:  Function "predict_4x4_dc"
Noelle:  Disable "predict_4x4_dc" as cold function
Noelle:  Function "predict_4x4_ddl"
Noelle:  Disable "predict_4x4_ddl" as cold function
Noelle:  Function "predict_4x4_ddr"
Noelle:  Disable "predict_4x4_ddr" as cold function
Noelle:  Function "predict_4x4_vr"
Noelle:  Disable "predict_4x4_vr" as cold function
Noelle:  Function "predict_4x4_hd"
Noelle:  Disable "predict_4x4_hd" as cold function
Noelle:  Function "predict_4x4_vl"
Noelle:  Disable "predict_4x4_vl" as cold function
Noelle:  Function "predict_4x4_hu"
Noelle:  Disable "predict_4x4_hu" as cold function
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:  Disable "x264_pixel_ssd_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x8_sse2" as cold function
Noelle:  Function "pixel_avg_wxh"
Noelle:  Disable "pixel_avg_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x16_sse2" as cold function
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Disable "x264_mb_analyse_b_rd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x16_sse2" as cold function
Noelle:  Function "predict_8x8c_p"
Noelle:  Disable "predict_8x8c_p" as cold function
Noelle:  Function "predict_8x8c_dc_left"
Noelle:  Disable "predict_8x8c_dc_left" as cold function
Noelle:  Function "predict_8x8c_dc_top"
Noelle:  Disable "predict_8x8c_dc_top" as cold function
Noelle:  Function "predict_8x8_v"
Noelle:  Disable "predict_8x8_v" as cold function
Noelle:  Function "predict_8x8_h"
Noelle:  Disable "predict_8x8_h" as cold function
Noelle:  Function "predict_8x8_dc"
Noelle:  Disable "predict_8x8_dc" as cold function
Noelle:  Function "predict_8x8_ddl"
Noelle:  Disable "predict_8x8_ddl" as cold function
EnablersManager:   Try to improve all 68 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_analyse"
EnablersManager:     Entry instruction =   %exitcond165 = icmp eq i32 %.1, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_mb_analysis_t, align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond165 = icmp eq i32 %.1, 2"
LICM:     Invariant = "  store i32 1, i32* %5, align 4, !tbaa !30
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond165, label %.loopexit110, label %431
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode"
EnablersManager:     Entry instruction =   %.b9 = load i1, i1* @b_ctrl_c, align 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [200 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4"
LICM:     Invariant = "  %142 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !43
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %143 = getelementptr [6 x i8], [6 x i8]* @.str.266, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !43
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %139 = getelementptr [36 x i8], [36 x i8]* @.str.265, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Invariant = "  %136 = getelementptr [66 x i8], [66 x i8]* @.str.264, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "x264_encoder_encode"
EnablersManager:     Entry instruction =   %149 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %148, i64 0, i32 1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %149 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %148, i64 0, i32 1"
LICM:     Invariant = "  %300 = getelementptr [90 x i8], [90 x i8]* @.str.16.604, i64 0, i64 0
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "x264_slice_write"
EnablersManager:     Entry instruction =   %51 = mul nsw i32 %.07, %50
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %51 = mul nsw i32 %.07, %50"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %54, label %55, label %152, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond20 = icmp eq i64 %indvars.iv18, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond20, label %._crit_edge108.loopexit1, label %207, !prof !86
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac"
EnablersManager:     Entry instruction =   %76 = icmp slt i64 %indvars.iv19, %41
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %76 = icmp slt i64 %indvars.iv19, %41"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %76, label %77, label %.loopexit11.loopexit1, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_inter_p16x16"
EnablersManager:     Entry instruction =   %78 = load i32, i32* %11, align 16, !tbaa !31
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [8 x [2 x i16]], align 4
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %struct.x264_me_t, align 16
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %80, label %81, label %173, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond17 = icmp eq i64 %indvars.iv15, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond17, label %._crit_edge108.loopexit, label %192, !prof !83
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac"
EnablersManager:     Entry instruction =   %indvars.iv.next = add nsw i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %115, label %144, label %117, !prof !77
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond21 = icmp eq i64 %indvars.iv19, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond21, label %._crit_edge120.loopexit, label %260, !prof !90
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %330 = icmp sgt i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %330 = icmp sgt i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %330, label %331, label %338, !prof !103
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %328 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 14, i64 %indvars.iv57
Mem2Reg:     SCC:
Internal nodes: 1
	  store i32 %337, i32* %328, align 4, !tbaa !62
External nodes: 2
	  br i1 %335, label %336, label %.._crit_edge94_crit_edge, !prof !104
	  %337 = trunc i64 %indvars.iv to i32
Edges: 3

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %330
Mem2Reg:  checking for last value entering block: label %330
Mem2Reg:  Last value entering block: label %330	  %331 = phi i32 
Mem2Reg:  checking for last value entering block: label %333
Mem2Reg:  Last value entering block: label %333	  %331 = phi i32 
Mem2Reg:  checking for last value entering block: label %338
Mem2Reg:  Last value entering block: label %338	  %331 = phi i32 
Mem2Reg:  Value updated:   %339 = trunc i64 %indvars.iv to i32
Mem2Reg:  checking for last value entering block: label %.._crit_edge94_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge94_crit_edge	  %331 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge94
Mem2Reg:  Last value entering block: label %._crit_edge94	  %340 = phi i32 [ %331, %.._crit_edge94_crit_edge ], [ %339, %338 ]
Mem2Reg:  Removing
  store i32 %339, i32* %328, align 4, !tbaa !62
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %345 = icmp slt i64 %indvars.iv55, %343
EnablersManager:     The current loop belongs to the function x264_mb_analyse_intra , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57
EnablersManager:     The current loop belongs to the function x264_mb_analyse_intra , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %130 = icmp slt i32 %.3, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %130 = icmp slt i32 %.3, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %130, label %131, label %133, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %indvars.iv.next = add nsw i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %123, label %139, label %124, !prof !77
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %78 = icmp slt i64 %indvars.iv22, %42
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %78 = icmp slt i64 %indvars.iv22, %42"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %78, label %79, label %.loopexit14.loopexit1, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond24 = icmp eq i64 %indvars.iv22, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond24, label %._crit_edge120.loopexit2, label %275, !prof !93
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit612.loopexit, label %1765, !prof !247
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1761 = shl nsw i64 %indvars.iv662, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1761 = shl nsw i64 %indvars.iv662, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1762, label %.preheader, label %1800, !prof !246
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond12, label %.us-lcssa.us.loopexit1, label %96, !prof !81
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond15 = icmp eq i64 %indvars.iv13, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond15, label %.us-lcssa.us.loopexit, label %75, !prof !74
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond18 = icmp eq i64 %indvars.iv16, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond18, label %.loopexit.loopexit, label %141, !prof !87
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond21 = icmp eq i64 %indvars.iv19, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [4 x [4 x [4 x i16]]], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [2 x [2 x i16]], align 16 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond21, label %148, label %40, !prof !63
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_fdec_filter_row"
EnablersManager:     Entry instruction =   %67 = icmp slt i32 %.01, %1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %67 = icmp slt i32 %.01, %1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %67, label %68, label %._crit_edge17.loopexit, !prof !81
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %335 = icmp slt i64 %indvars.iv86, %spec.select
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %335, label %336, label %503, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %710 = icmp slt i64 %indvars.iv100, %spec.select
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %710, label %711, label %880, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73"
LICM:     Invariant = "  store i32 0, i32* %3, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 0, i32* %4, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 50529027, i32* %4, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %82, label %83, label %885, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %18 = icmp ult i64 %indvars.iv33, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %18 = icmp ult i64 %indvars.iv33, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %18, label %19, label %._crit_edge83.loopexit, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond60 = icmp eq i64 %indvars.iv58, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond60, label %497, label %486, !prof !134
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond63 = icmp eq i64 %indvars.iv61, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond63, label %504, label %444, !prof !131
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %164, label %152, !prof !93
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %434, label %423, !prof !130
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 24
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %._crit_edge107.loopexit, label %226, !prof !90
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond81 = icmp eq i64 %indvars.iv79, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond81, label %.us-lcssa34.us.us, label %339, !prof !107
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond84 = icmp eq i64 %indvars.iv82, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond84, label %.us-lcssa36.us.loopexit, label %.split33.us.us, !prof !106
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_i16x16"
EnablersManager:     Entry instruction =   %exitcond4 = icmp eq i64 %indvars.iv2, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [4 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond4, label %59, label %46, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode_frame"
EnablersManager:     Entry instruction =   %22 = icmp slt i64 %indvars.iv, %19
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.x264_nal_t*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %22 = icmp slt i64 %indvars.iv, %19"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %22, label %23, label %47, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_nal_encode"
EnablersManager:     Entry instruction =   %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %25, label %26, label %37, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %89 = icmp slt i64 %indvars.iv707, %87
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp slt i64 %indvars.iv707, %87"
LICM:     Invariant = "  store i32 16, i32* %9, align 4, !tbaa !66
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %121, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond99 = icmp eq i64 %indvars.iv97, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond99, label %123, label %117
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1426 = icmp slt i64 %indvars.iv670, %1424
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1426, label %1427, label %.loopexit614, !prof !207
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:       Loop IV related SCEVs have been simplified
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 24
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %._crit_edge119.loopexit, label %294, !prof !97
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode"
EnablersManager:     Entry instruction =   %148 = load i8*, i8** %40, align 8, !tbaa !50
EnablersManager:     The current loop belongs to the function Encode , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond13 = icmp eq i64 %indvars.iv11, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond13, label %38, label %25, !prof !66
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond16 = icmp eq i64 %indvars.iv14, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond16, label %39, label %22, !prof !65
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "copy_column8"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %9, label %4, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "refine_subpel"
EnablersManager:     Entry instruction =   %258 = icmp sgt i32 %.179, 0
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [2 x [576 x i8]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i32, align 4 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %258 = icmp sgt i32 %.179, 0"
LICM:     Invariant = "  store i32 16, i32* %12, align 4, !tbaa !72
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %258, label %259, label %..loopexit_crit_edge, !prof !91
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "refine_subpel"
EnablersManager:     Entry instruction =   %111 = icmp sgt i32 %.078, 0
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [2 x [576 x i8]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [4 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca [4 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %111 = icmp sgt i32 %.078, 0"
LICM:     Invariant = "  store i32 32, i32* %10, align 4, !tbaa !72
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %111, label %112, label %.._crit_edge138_crit_edge, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %exitcond15 = icmp eq i64 %indvars.iv13, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [2 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4"
LICM:     Invariant = "  %113 = load %struct.x264_frame_t*, %struct.x264_frame_t** %101, align 8, !tbaa !66
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %96 = icmp slt i64 %indvars.iv16, %95
EnablersManager:     The current loop belongs to the function x264_macroblock_load_pic_pointers , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "predict_16x16_p_sse2"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 9
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 9"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %28, label %3, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "predict_8x8c_p_mmxext"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 5
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 5"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %28, label %3, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_i16x16"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [4 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %100, label %93, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1558 = icmp slt i64 %indvars.iv666, %1556
EnablersManager:     The current loop belongs to the function x264_me_search_ref , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %118 = icmp slt i64 %indvars.iv18, %95
EnablersManager:     The current loop belongs to the function x264_macroblock_load_pic_pointers , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "x264_cabac_mb_type"
EnablersManager:     Entry instruction =   %90 = icmp slt i64 %indvars.iv, %88
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %90 = icmp slt i64 %indvars.iv, %88"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %90, label %91, label %.loopexit.loopexit
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond75 = icmp eq i64 %indvars.iv73, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond75, label %389, label %384, !prof !118
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond78 = icmp eq i64 %indvars.iv76, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond78, label %.loopexit29.loopexit, label %377, !prof !116
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_rect4.786"
EnablersManager:     Entry instruction =   %32 = icmp slt i64 %indvars.iv8, %24
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %32 = icmp slt i64 %indvars.iv8, %24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %32, label %33, label %36, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_rect4.786"
EnablersManager:     Entry instruction =   %27 = icmp slt i64 %indvars.iv10, %25
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %27 = icmp slt i64 %indvars.iv10, %25"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %27, label %28, label %.loopexit.loopexit1, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %59, label %46, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond10 = icmp eq i64 %indvars.iv8, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond10, label %60, label %43, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra_chroma"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv5, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [4 x i32], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x i32], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %72, label %56, !prof !75
Mem2Reg:   The loop has 2SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %9 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 16
Mem2Reg:     SCC:
Internal nodes: 4
	  %69 = load i32, i32* %9, align 4, !tbaa !31
	  %70 = icmp slt i32 %67, %69
	  br i1 %70, label %71, label %.._crit_edge10_crit_edge, !prof !76
	  store i32 %67, i32* %9, align 4, !tbaa !31
External nodes: 5
	  br i1 %exitcond, label %72, label %56, !prof !75
	  %67 = add nsw i32 %64, %66
	  br label %._crit_edge10
	  store i32 %58, i32* %53, align 8, !tbaa !77
	  br label %._crit_edge10
Edges: 14

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %56
Mem2Reg:  checking for last value entering block: label %56
Mem2Reg:  Last value entering block: label %56	  %57 = phi i32 
Mem2Reg:  checking for last value entering block: label %58
Mem2Reg:  Last value entering block: label %58	  %57 = phi i32 
Mem2Reg:  checking for last value entering block: label %73
Mem2Reg:  Last value entering block: label %73	  %57 = phi i32 
Mem2Reg:  Value updated:   %69 = add nsw i32 %66, %68
Mem2Reg:  checking for last value entering block: label %.._crit_edge10_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge10_crit_edge	  %57 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge10
Mem2Reg:  Last value entering block: label %._crit_edge10	  %74 = phi i32 [ %57, %.._crit_edge10_crit_edge ], [ %69, %73 ]
Mem2Reg:  Removing
  %71 = load i32, i32* %9, align 4, !tbaa !31
Mem2Reg:  Removing
  store i32 %69, i32* %9, align 4, !tbaa !31
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_load"
EnablersManager:     Entry instruction =   %exitcond8 = icmp eq i64 %indvars.iv18, %359
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond8, label %527, label %361, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %82 = icmp ult i64 %indvars.iv43, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %82 = icmp ult i64 %indvars.iv43, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %82, label %83, label %._crit_edge96.loopexit, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "predict_16x16_dc_sse2"
EnablersManager:     Entry instruction =   %3 = icmp ult i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %3 = icmp ult i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %3, label %4, label %17, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv65, 4
EnablersManager:     The current loop belongs to the function x264_mb_analyse_intra , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "x264_cabac_encode_ue_bypass"
EnablersManager:     Entry instruction =   %25 = sub nsw i32 %.1, %.0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %25 = sub nsw i32 %.1, %.0"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %35, label %._crit_edge.._crit_edge_crit_edge, label %36, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.546454e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.895665e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.016535e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.426057e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.784771e-06%)
Noelle:     Loop "  %149 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %148, i64 0, i32 1" (7.503387e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.843565e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.087801e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.491585e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.406058e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.862538e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.337759e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.689719e-04%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.019379e-03%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.689719e-04%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.488105e-03%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.411014e-04%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.569277e-03%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.518295e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.804451e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.071916e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.217050e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.471106e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.011380e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.117074e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.339541e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.253908e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.593257e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.963073e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.780309e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.586236e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.114358e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.097985e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.006657e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.243741e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.399246e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.766342e-02%)
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.780391e-03%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.824953e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.517561e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.289834e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.243561e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.549532e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.744408e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.479945e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.190062e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.490842e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.306192e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.050214e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.147400e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.062013e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.820825e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.043924e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.829469e-02%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv67, %64" (6.577354e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.150559e-01%)
Noelle:     Loop "  %141 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv61, %184" (0.000000e+00%)
Noelle:     Loop "  %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.608372e+00%)
Noelle:     Loop "  %330 = icmp sgt i64 %indvars.iv, -1" (8.662875e-01%)
Noelle:     Loop "  %342 = icmp slt i64 %indvars.iv55, %340" (3.735916e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.128978e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.043497e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.542479e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.162197e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.500326e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.409635e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.080339e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.108740e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.920001e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.360001e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.758898e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.738631e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.671199e-02%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.451681e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.282805e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.959953e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.986933e-02%)
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.528848e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.246759e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.897727e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.095506e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.742988e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.031366e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.207599e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.062642e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.887843e-01%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv16, %95" (4.028528e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.514753e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.016469e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.620365e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.995880e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.654885e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.311418e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.546180e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.055427e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.554746e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.494237e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.419996e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.455647e-02%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.076489e-03%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.183225e-01%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.437502e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.938840e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.224400e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.442022e-01%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv, %77" (7.410958e-03%)
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.982426e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.671599e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.042507e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.965076e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.345457e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.249189e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.479645e-02%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.122192e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.509093e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.508932e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.028054e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.712718e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.410795e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.410795e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.764316e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.800191e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.572915e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.103851e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.103851e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.354437e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.354437e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.022047e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.753834e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.689132e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.986615e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.953068e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.383038e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.350967e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.448650e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.927274e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.564754e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.717486e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.814200e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %54 = icmp sgt i32 %53, 65535" (0.000000e+00%)
Noelle:     Loop "  %227 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (4.249677e-06%)
Noelle:     Loop "  %332 = load i32, i32* %330, align 4, !tbaa !83" (3.626004e-08%)
Noelle:     Loop "  %340 = sext i32 %339 to i64" (3.343176e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %Pivot5 = icmp ult i64 %indvars.iv16, 14" (8.911225e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.376022e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.396767e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.525029e-03%)
Noelle:     Loop "  %7 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.483756e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.657500e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.798085e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.219323e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.144274e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.921492e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.506294e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.201585e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.178741e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (8.976971e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.608670e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count" (1.565041e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.256152e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.626004e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.946647e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.811812e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.196581e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.582596e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.288516e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.705984e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.571097e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.514655e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.506387e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.128341e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.030004e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (5.987258e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.423933e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.702410e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.713287e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.289232e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.109620e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.787880e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.090910e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.214919e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.426834e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.279328e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.071919e-04%)
Noelle:     Loop "  %49 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %62, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp slt i64 %indvars.iv, %72" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.239617e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.162839e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.377882e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.049730e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.430821e-05%)
Noelle:     Loop "  %Pivot = icmp ult i64 %indvars.iv58, 17" (1.419943e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.337996e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.325667e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.221238e-05%)
Noelle:     Loop "  %396 = icmp sgt i64 %indvars.iv44, %394" (5.729087e-07%)
Noelle:     Loop "  %504 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.626004e-08%)
Noelle:     Loop "  %516 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.626004e-08%)
Noelle:     Loop "  %528 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.545693e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.234509e-04%)
Noelle:     Loop "  %553 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.735718e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.178887e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.313391e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.313391e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.057540e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (2.001192e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.383062e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.311267e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.484850e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.653874e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.570060e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.489770e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.075837e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.162188e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.885522e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.929811e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.399950e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.958250e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.497800e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.720280e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.536753e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.741984e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.248123e-07%)
Noelle:     Loop "  %163 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.484850e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.588967e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.291635e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.995080e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %183 = sext i32 %182 to i64" (0.000000e+00%)
Noelle:     Loop "  %319 = add nsw i32 %318, 2" (5.388242e-06%)
Noelle:     Loop "  %323 = add nsw i32 %322, 2" (4.068377e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %370 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %352 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.848228e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.529449e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.060348e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.211085e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.209635e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.060348e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.642063e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.428646e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.843565e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.900803e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.729087e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.620307e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.641285e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.372184e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.557370e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (1.000777e-06%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (8.557370e-07%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %441 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %474 = icmp slt i64 %indvars.iv57, %470" (0.000000e+00%)
Noelle:     Loop "  %491 = icmp slt i32 %.36, %490" (0.000000e+00%)
Noelle:     Loop "  %574 = load i32, i32* %7, align 4, !tbaa !30" (1.450402e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.862732e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.164207e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.931366e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.988605e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.698524e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.988605e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.538203e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.786326e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.801607e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %Pivot17 = icmp slt i8 %11, 80" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i32 %.02, %12" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %218 = icmp slt i64 %indvars.iv84, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %197 = icmp slt i64 %indvars.iv90, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %248 = icmp slt i64 %indvars.iv92, %.pre-phi30" (0.000000e+00%)
Noelle:     Loop "  %286 = icmp slt i64 %indvars.iv, %284" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %8 = icmp slt i64 %indvars.iv, %6" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %23" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %153" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in1, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %210" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us15 = icmp ult i64 %indvars.iv24.us14, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us = icmp ult i64 %indvars.iv24.us9, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv24.us, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (2.573719e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us.us = icmp eq i64 %indvars.iv69.us.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %483 = icmp slt i64 %indvars.iv, %481" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.388643e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.530515e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw i32 %60, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %71" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv, %70" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.544089e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.893817e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.015191e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.416233e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.781088e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1" (7.501138e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.838480e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.086362e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.489351e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.401552e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.858752e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.335990e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.678224e-04%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.018030e-03%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.678224e-04%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.486136e-03%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.403856e-04%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.567201e-03%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.516287e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.802064e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.070499e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.215440e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.469160e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.010042e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.115597e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.337769e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.248281e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.580567e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.955185e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.773986e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.576201e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.112884e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.096532e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.005325e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.240773e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.397395e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.762682e-02%)
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.776713e-03%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.815925e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.515553e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.288127e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.241916e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.538223e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.735486e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.472696e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.180551e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.483579e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.297850e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.039565e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.143236e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.052671e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.817094e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.039897e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.820435e-02%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv67, %64" (6.568654e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.149037e-01%)
Noelle:     Loop "  %141 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv61, %184" (0.000000e+00%)
Noelle:     Loop "  %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.736957e+00%)
Noelle:     Loop "  %332 = icmp sgt i64 %indvars.iv, -1" (9.675699e-01%)
Noelle:     Loop "  %345 = icmp slt i64 %indvars.iv55, %343" (3.730974e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.126161e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.036825e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.539116e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.159337e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.498341e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.407770e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.078910e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.096691e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.914815e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.355556e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.756571e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.736332e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.661052e-02%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.444469e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.275817e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.953392e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.977691e-02%)
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.521534e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.239818e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.891248e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.090088e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.736714e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.030002e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.203355e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.055945e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.884023e-01%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv16, %95" (3.883676e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.302141e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.015124e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.612930e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.989271e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.652696e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.309684e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.538844e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.052708e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.552689e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.488291e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.411503e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.449753e-02%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.073743e-03%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.176369e-01%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.434278e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.933630e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.220134e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.477695e-01%)
Noelle:     Loop "  %81 = icmp slt i64 %indvars.iv, %79" (7.401155e-03%)
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.977158e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.661451e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.041128e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.962476e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.343678e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.247537e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.473720e-02%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.119385e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.497837e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.500321e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.020080e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.709130e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.408929e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.408929e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.758013e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.793842e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.566866e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.101068e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.101068e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.351323e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.351323e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.016727e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.750191e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.677638e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.983987e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.949162e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.381208e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.349180e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.446733e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.923402e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.560038e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.715214e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.810477e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %54 = icmp sgt i32 %53, 65535" (0.000000e+00%)
Noelle:     Loop "  %227 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (4.244055e-06%)
Noelle:     Loop "  %332 = load i32, i32* %330, align 4, !tbaa !83" (3.621208e-08%)
Noelle:     Loop "  %340 = sext i32 %339 to i64" (3.338754e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %Pivot5 = icmp ult i64 %indvars.iv16, 14" (8.899437e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.370233e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.393597e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.519043e-03%)
Noelle:     Loop "  %7 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.479148e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.644725e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.787769e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.211095e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.141437e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.918950e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.502979e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.199996e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.177182e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (8.965096e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.606542e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count" (1.562971e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.251845e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.621208e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.938781e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.802801e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.194999e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.575211e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.285489e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.695791e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.561082e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.512651e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.504395e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.117589e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.019382e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (5.979338e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.412790e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.690899e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.711021e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.280912e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.102861e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.778901e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.084176e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.208021e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.415687e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.268376e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.070501e-04%)
Noelle:     Loop "  %49 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %62, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp slt i64 %indvars.iv, %72" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.235332e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.159978e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.376059e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.039081e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.428929e-05%)
Noelle:     Loop "  %Pivot = icmp ult i64 %indvars.iv58, 17" (1.418065e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.336226e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.323914e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.219623e-05%)
Noelle:     Loop "  %396 = icmp sgt i64 %indvars.iv44, %394" (5.721508e-07%)
Noelle:     Loop "  %504 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.621208e-08%)
Noelle:     Loop "  %516 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.621208e-08%)
Noelle:     Loop "  %528 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.543648e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.232876e-04%)
Noelle:     Loop "  %553 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.725485e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.177327e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.310331e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.310331e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.054818e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (1.998545e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.378587e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.306887e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.473626e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.641103e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.567983e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.482508e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.065154e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.150068e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.883028e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.925936e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.390161e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.950369e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.489204e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.715359e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.533397e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.738357e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.245149e-07%)
Noelle:     Loop "  %163 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.473626e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.585542e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.288603e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.991118e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %183 = sext i32 %182 to i64" (0.000000e+00%)
Noelle:     Loop "  %319 = add nsw i32 %318, 2" (5.381115e-06%)
Noelle:     Loop "  %323 = add nsw i32 %322, 2" (4.062995e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %370 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %352 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.835200e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.527425e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.056299e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.209483e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.208035e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.056299e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.634599e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.426756e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.838480e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.896966e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.721508e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.612872e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.635146e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.367723e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.546050e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (9.994533e-07%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (8.546050e-07%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %441 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %474 = icmp slt i64 %indvars.iv57, %470" (0.000000e+00%)
Noelle:     Loop "  %491 = icmp slt i32 %.36, %490" (0.000000e+00%)
Noelle:     Loop "  %574 = load i32, i32* %7, align 4, !tbaa !30" (1.448483e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.849685e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.156053e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.924842e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.983328e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.693632e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.983328e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.534845e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.779994e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.793932e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %Pivot17 = icmp slt i8 %11, 80" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i32 %.02, %12" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %218 = icmp slt i64 %indvars.iv84, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %197 = icmp slt i64 %indvars.iv90, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %248 = icmp slt i64 %indvars.iv92, %.pre-phi30" (0.000000e+00%)
Noelle:     Loop "  %286 = icmp slt i64 %indvars.iv, %284" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %8 = icmp slt i64 %indvars.iv, %6" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %23" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %153" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in1, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %210" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us15 = icmp ult i64 %indvars.iv24.us14, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us = icmp ult i64 %indvars.iv24.us9, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv24.us, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (2.570314e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us.us = icmp eq i64 %indvars.iv69.us.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %483 = icmp slt i64 %indvars.iv, %481" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.386806e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.528490e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw i32 %60, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %71" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv, %70" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
NOELLE: FixedPoint:       There are 1 different instructions and -9 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.iiTBei7fYA -o /tmp/tmp.iiTBei7fYA
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.iiTBei7fYA -o /tmp/tmp.iiTBei7fYA
NOELLE: FixedPoint:     Invocation 1
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.543815e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.893603e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.014987e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.414749e-06%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.780531e-06%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1" (7.500883e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.837712e-06%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.086145e-07%)
Noelle:  Disable loop "7" as cold code
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.489098e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.400871e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.858179e-02%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.335722e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.676487e-04%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.017826e-03%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.676487e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.485839e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.402774e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.566887e-03%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "21" as cold code
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.515983e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.801703e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.070284e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.215197e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.468866e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.009839e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.115373e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.337501e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.247430e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.578649e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.953993e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.773030e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:  Disable loop "55" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.574684e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.112661e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:  Disable loop "58" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:  Disable loop "60" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:  Disable loop "61" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.096313e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.005124e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.240324e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.397115e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:  Disable loop "66" as cold code
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:  Disable loop "67" as cold code
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:  Disable loop "68" as cold code
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.762129e-02%)
Noelle:  Disable loop "69" as cold code
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.776157e-03%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.814560e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.515250e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.287870e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.241668e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:  Disable loop "75" as cold code
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.536513e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:  Disable loop "77" as cold code
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:  Disable loop "78" as cold code
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:  Disable loop "79" as cold code
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:  Disable loop "80" as cold code
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:  Disable loop "81" as cold code
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:  Disable loop "82" as cold code
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:  Disable loop "83" as cold code
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:  Disable loop "84" as cold code
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:  Disable loop "85" as cold code
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:  Disable loop "87" as cold code
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:  Disable loop "88" as cold code
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.734138e-02%)
Noelle:  Disable loop "89" as cold code
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.471601e-02%)
Noelle:  Disable loop "90" as cold code
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.179113e-02%)
Noelle:  Disable loop "91" as cold code
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.482481e-02%)
Noelle:  Disable loop "92" as cold code
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.296589e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.037955e-02%)
Noelle:  Disable loop "94" as cold code
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.142607e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.051259e-02%)
Noelle:  Disable loop "96" as cold code
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.816530e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.039289e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:  Disable loop "99" as cold code
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.819069e-02%)
Noelle:  Disable loop "100" as cold code
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv67, %64" (6.567338e-03%)
Noelle:  Disable loop "101" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.148807e-01%)
Noelle:     Loop "  %141 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:  Disable loop "103" as cold code
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:  Disable loop "104" as cold code
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv61, %184" (0.000000e+00%)
Noelle:  Disable loop "105" as cold code
Noelle:     Loop "  %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.753976e+00%)
Noelle:     Loop "  %332 = icmp sgt i64 %indvars.iv, -1" (9.673762e-01%)
Noelle:     Loop "  %345 = icmp slt i64 %indvars.iv55, %343" (3.730227e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:  Disable loop "109" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "110" as cold code
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.125736e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:  Disable loop "112" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.035817e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.538607e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.158905e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.498041e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Disable loop "117" as cold code
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:  Disable loop "118" as cold code
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:  Disable loop "119" as cold code
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.407489e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.078694e-03%)
Noelle:  Disable loop "121" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.094870e-04%)
Noelle:  Disable loop "122" as cold code
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.914031e-03%)
Noelle:  Disable loop "123" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.354884e-03%)
Noelle:  Disable loop "124" as cold code
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.756219e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Disable loop "126" as cold code
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.735984e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "128" as cold code
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.659518e-02%)
Noelle:  Disable loop "129" as cold code
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.443379e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.274761e-02%)
Noelle:  Disable loop "131" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.952400e-02%)
Noelle:  Disable loop "132" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:  Disable loop "133" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.976294e-02%)
Noelle:  Disable loop "134" as cold code
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.520429e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.238769e-02%)
Noelle:  Disable loop "136" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.890269e-02%)
Noelle:  Disable loop "137" as cold code
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.089270e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.735766e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:  Disable loop "140" as cold code
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.029796e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.202714e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.054933e-02%)
Noelle:  Disable loop "143" as cold code
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:  Disable loop "144" as cold code
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.883445e-01%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv16, %95" (3.882898e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.301680e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:  Disable loop "148" as cold code
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:  Disable loop "149" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "150" as cold code
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.014921e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.611806e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.988272e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.652365e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.309421e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:  Disable loop "156" as cold code
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.537735e-02%)
Noelle:  Disable loop "157" as cold code
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:  Disable loop "158" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.052297e-02%)
Noelle:  Disable loop "159" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.552378e-02%)
Noelle:  Disable loop "160" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.487393e-02%)
Noelle:  Disable loop "161" as cold code
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:  Disable loop "162" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.410220e-02%)
Noelle:  Disable loop "163" as cold code
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:  Disable loop "164" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "165" as cold code
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "166" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Disable loop "167" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.448862e-02%)
Noelle:  Disable loop "168" as cold code
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.073327e-03%)
Noelle:  Disable loop "169" as cold code
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Disable loop "170" as cold code
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.175332e-01%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.433790e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.932843e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.219490e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.477399e-01%)
Noelle:     Loop "  %81 = icmp slt i64 %indvars.iv, %79" (7.399673e-03%)
Noelle:  Disable loop "176" as cold code
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Disable loop "177" as cold code
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:  Disable loop "178" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.976362e-02%)
Noelle:  Disable loop "179" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "180" as cold code
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.659917e-02%)
Noelle:  Disable loop "181" as cold code
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.040919e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.962083e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.343409e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:  Disable loop "185" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Disable loop "186" as cold code
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:  Disable loop "187" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Disable loop "188" as cold code
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.247287e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.472824e-02%)
Noelle:  Disable loop "190" as cold code
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.118961e-02%)
Noelle:  Disable loop "191" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.496136e-03%)
Noelle:  Disable loop "192" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.499020e-03%)
Noelle:  Disable loop "193" as cold code
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:  Disable "x264_cabac_mb_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Disable "x264_cabac_mb_cbp_chroma" as cold function
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Disable "x264_macroblock_cache_ref.799" as cold function
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Disable "zigzag_scan_2x2_dc" as cold function
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Disable "x264_cabac_encode_terminal" as cold function
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Disable "x264_macroblock_cache_mvd" as cold function
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:  Disable "x264_macroblock_cache_rect1.801" as cold function
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Disable "x264_cabac_encode_renorm" as cold function
Noelle:  Function "predict_4x4_h"
Noelle:  Disable "predict_4x4_h" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1019" as cold function
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Disable "x264_cabac_pos.1016" as cold function
Noelle:  Function "bs_size_ue"
Noelle:  Disable "bs_size_ue" as cold function
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:  Disable "predict_8x8c_dc_left.1111" as cold function
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Disable "x264_mb_predict_mv" as cold function
Noelle:  Function "x264_ratecontrol_mb"
Noelle:  Disable "x264_ratecontrol_mb" as cold function
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Disable "x264_cabac_mb_type_intra.1056" as cold function
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:  Disable "x264_cabac_mb_mvd_cpn.1048" as cold function
Noelle:  Function "plane_expand_border"
Noelle:  Disable "plane_expand_border" as cold function
Noelle:  Function "bs_size_ue_big"
Noelle:  Disable "bs_size_ue_big" as cold function
Noelle:  Function "x264_cabac_pos"
Noelle:  Disable "x264_cabac_pos" as cold function
Noelle:  Function "predict_4x4_v"
Noelle:  Disable "predict_4x4_v" as cold function
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:  Disable "predict_16x16_dc_left.1108" as cold function
Noelle:  Function "mc_luma_sse2"
Noelle:  Disable "mc_luma_sse2" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Disable "x264_macroblock_cache_mvd.1052" as cold function
Noelle:  Function "bs_size_te"
Noelle:  Disable "bs_size_te" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:  Disable "x264_macroblock_cache_rect4.1053" as cold function
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Disable "x264_cabac_mb_intra_chroma_pred_mode.1023" as cold function
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:  Disable "x264_cabac_mb_qp_delta.1035" as cold function
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Disable "x264_predictor_difference_mmxext" as cold function
Noelle:  Function "bs_pos"
Noelle:  Disable "bs_pos" as cold function
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Disable "x264_mb_predict_mv_pskip" as cold function
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:  Disable "x264_bitstream_check_buffer" as cold function
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Disable "x264_cabac_mb_cbp_luma.1032" as cold function
Noelle:  Function "x264_cabac_mb_ref"
Noelle:  Disable "x264_cabac_mb_ref" as cold function
Noelle:  Function "x264_frame_expand_border"
Noelle:  Disable "x264_frame_expand_border" as cold function
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:  Disable "predict_8x8c_dc_top.1112" as cold function
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:  Disable "x264_frame_expand_border_filtered" as cold function
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Disable "x264_cabac_mb_intra4x4_pred_mode.1022" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:  Disable "x264_mb_transform_8x8_allowed" as cold function
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Disable "x264_median_mv_mmxext" as cold function
Noelle:  Function "sum_sa8d"
Noelle:  Disable "sum_sa8d" as cold function
Noelle:  Function "sum_satd"
Noelle:  Disable "sum_satd" as cold function
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Disable "x264_cabac_mb_skip" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Disable "x264_cabac_mb_cbp_chroma.1033" as cold function
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:  Disable "x264_mb_analyse_load_costs" as cold function
Noelle:  Function "x264_cabac_context_init"
Noelle:  Disable "x264_cabac_context_init" as cold function
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Disable "predict_16x16_mode_available" as cold function
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Disable "predict_8x8chroma_mode_available" as cold function
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Disable "x264_macroblock_encode_pskip" as cold function
Noelle:  Function "pack16to32_mask.829"
Noelle:  Disable "pack16to32_mask.829" as cold function
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:  Disable "x264_cabac_mb_ref.1024" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1034" as cold function
Noelle:  Function "x264_encoder_open"
Noelle:  Disable "x264_encoder_open" as cold function
Noelle:  Function "x264_clip3.664"
Noelle:  Disable "x264_clip3.664" as cold function
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Disable "predict_4x4_dc_left" as cold function
Noelle:  Function "x264_rdo_init"
Noelle:  Disable "x264_rdo_init" as cold function
Noelle:  Function "x264_clip3.813"
Noelle:  Disable "x264_clip3.813" as cold function
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Disable "x264_mb_analyse_transform_rd" as cold function
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Disable "x264_ratecontrol_qp" as cold function
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Disable "predict_4x4_dc_top" as cold function
Noelle:  Function "x264_clip3.748"
Noelle:  Disable "x264_clip3.748" as cold function
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Disable "x264_macroblock_encode_skip" as cold function
Noelle:  Function "x264_encoder_frame_end"
Noelle:  Disable "x264_encoder_frame_end" as cold function
Noelle:  Function "pack16to32_mask.785"
Noelle:  Disable "pack16to32_mask.785" as cold function
Noelle:  Function "x264_frame_filter"
Noelle:  Disable "x264_frame_filter" as cold function
Noelle:  Function "x264_clip3.1001"
Noelle:  Disable "x264_clip3.1001" as cold function
Noelle:  Function "bs_size_se"
Noelle:  Disable "bs_size_se" as cold function
Noelle:  Function "x264_noise_reduction_update"
Noelle:  Disable "x264_noise_reduction_update" as cold function
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Disable "pack16to32_mask.1051" as cold function
Noelle:  Function "x264_cqm_init"
Noelle:  Disable "x264_cqm_init" as cold function
Noelle:  Function "x264_reference_build_list"
Noelle:  Disable "x264_reference_build_list" as cold function
Noelle:  Function "x264_slice_header_write"
Noelle:  Disable "x264_slice_header_write" as cold function
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Disable "x264_cabac_size_decision2" as cold function
Noelle:  Function "predict_8x8c_dc_128"
Noelle:  Disable "predict_8x8c_dc_128" as cold function
Noelle:  Function "predict_16x16_dc_128"
Noelle:  Disable "predict_16x16_dc_128" as cold function
Noelle:  Function "pack8to32"
Noelle:  Disable "pack8to32" as cold function
Noelle:  Function "x264_slice_init"
Noelle:  Disable "x264_slice_init" as cold function
Noelle:  Function "bs_write_ue_big"
Noelle:  Disable "bs_write_ue_big" as cold function
Noelle:  Function "bs_write"
Noelle:  Disable "bs_write" as cold function
Noelle:  Function "x264_macroblock_slice_init"
Noelle:  Disable "x264_macroblock_slice_init" as cold function
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:  Disable "x264_frame_expand_border_mod16" as cold function
Noelle:  Function "x264_encoder_close"
Noelle:  Disable "x264_encoder_close" as cold function
Noelle:  Function "x264_reference_update"
Noelle:  Disable "x264_reference_update" as cold function
Noelle:  Function "x264_frame_delete"
Noelle:  Disable "x264_frame_delete" as cold function
Noelle:  Function "x264_slice_header_init"
Noelle:  Disable "x264_slice_header_init" as cold function
Noelle:  Function "x264_ratecontrol_start"
Noelle:  Disable "x264_ratecontrol_start" as cold function
Noelle:  Function "x264_ratecontrol_end"
Noelle:  Disable "x264_ratecontrol_end" as cold function
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:  Disable "setup_inverse_delta_pocs" as cold function
Noelle:  Function "bs_write_se"
Noelle:  Disable "bs_write_se" as cold function
Noelle:  Function "x264_cabac_encode_flush"
Noelle:  Disable "x264_cabac_encode_flush" as cold function
Noelle:  Function "x264_frame_copy_picture"
Noelle:  Disable "x264_frame_copy_picture" as cold function
Noelle:  Function "bs_write.943"
Noelle:  Disable "bs_write.943" as cold function
Noelle:  Function "x264_frame_shift"
Noelle:  Disable "x264_frame_shift" as cold function
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Disable "x264_frame_pop_unused" as cold function
Noelle:  Function "x264_free"
Noelle:  Disable "x264_free" as cold function
Noelle:  Function "x264_sei_version_write"
Noelle:  Disable "x264_sei_version_write" as cold function
Noelle:  Function "x264_frame_push"
Noelle:  Disable "x264_frame_push" as cold function
Noelle:  Function "read_frame_y4m"
Noelle:  Disable "read_frame_y4m" as cold function
Noelle:  Function "x264_sps_write"
Noelle:  Disable "x264_sps_write" as cold function
Noelle:  Function "bs_align_1"
Noelle:  Disable "bs_align_1" as cold function
Noelle:  Function "x264_slicetype_decide"
Noelle:  Disable "x264_slicetype_decide" as cold function
Noelle:  Function "x264_nal_end"
Noelle:  Disable "x264_nal_end" as cold function
Noelle:  Function "x264_frame_push_unused"
Noelle:  Disable "x264_frame_push_unused" as cold function
Noelle:  Function "x264_nal_start"
Noelle:  Disable "x264_nal_start" as cold function
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Disable "bs_write_ue_big.944" as cold function
Noelle:  Function "bs_write1"
Noelle:  Disable "bs_write1" as cold function
Noelle:  Function "bs_init"
Noelle:  Disable "bs_init" as cold function
Noelle:  Function "x264_frame_pop"
Noelle:  Disable "x264_frame_pop" as cold function
Noelle:  Function "bs_flush"
Noelle:  Disable "bs_flush" as cold function
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Disable "predict_4x4_dc_128" as cold function
Noelle:  Function "Parse"
Noelle:  Disable "Parse" as cold function
Noelle:  Function "x264_pps_write"
Noelle:  Disable "x264_pps_write" as cold function
Noelle:  Function "get_zone"
Noelle:  Disable "get_zone" as cold function
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Disable "x264_cabac_encode_init" as cold function
Noelle:  Function "x264_frame_new"
Noelle:  Disable "x264_frame_new" as cold function
Noelle:  Function "x264_param_parse"
Noelle:  Disable "x264_param_parse" as cold function
Noelle:  Function "update_vbv"
Noelle:  Disable "update_vbv" as cold function
Noelle:  Function "x264_validate_parameters"
Noelle:  Disable "x264_validate_parameters" as cold function
Noelle:  Function "x264_dct_init_weights"
Noelle:  Disable "x264_dct_init_weights" as cold function
Noelle:  Function "x264_log"
Noelle:  Disable "x264_log" as cold function
Noelle:  Function "x264_reference_reset"
Noelle:  Disable "x264_reference_reset" as cold function
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Disable "x264_thread_sync_stat" as cold function
Noelle:  Function "endian_fix"
Noelle:  Disable "endian_fix" as cold function
Noelle:  Function "x264_validate_levels"
Noelle:  Disable "x264_validate_levels" as cold function
Noelle:  Function "x264_clip3.848"
Noelle:  Disable "x264_clip3.848" as cold function
Noelle:  Function "bs_write1.946"
Noelle:  Disable "bs_write1.946" as cold function
Noelle:  Function "open_file_y4m"
Noelle:  Disable "open_file_y4m" as cold function
Noelle:  Function "x264_macroblock_cache_end"
Noelle:  Disable "x264_macroblock_cache_end" as cold function
Noelle:  Function "write_nalu_bsf"
Noelle:  Disable "write_nalu_bsf" as cold function
Noelle:  Function "bs_write_se.945"
Noelle:  Disable "bs_write_se.945" as cold function
Noelle:  Function "x264_sps_init"
Noelle:  Disable "x264_sps_init" as cold function
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Disable "bs_rbsp_trailing.947" as cold function
Noelle:  Function "x264_cqm_delete"
Noelle:  Disable "x264_cqm_delete" as cold function
Noelle:  Function "bs_write32"
Noelle:  Disable "bs_write32" as cold function
Noelle:  Function "x264_ratecontrol_new"
Noelle:  Disable "x264_ratecontrol_new" as cold function
Noelle:  Function "x264_malloc"
Noelle:  Disable "x264_malloc" as cold function
Noelle:  Function "x264_pixel_init"
Noelle:  Disable "x264_pixel_init" as cold function
Noelle:  Function "x264_macroblock_cache_init"
Noelle:  Disable "x264_macroblock_cache_init" as cold function
Noelle:  Function "endian_fix.949"
Noelle:  Disable "endian_fix.949" as cold function
Noelle:  Function "x264_param_default"
Noelle:  Disable "x264_param_default" as cold function
Noelle:  Function "bs_flush.948"
Noelle:  Disable "bs_flush.948" as cold function
Noelle:  Function "x264_param2string"
Noelle:  Disable "x264_param2string" as cold function
Noelle:  Function "x264_cpu_detect"
Noelle:  Disable "x264_cpu_detect" as cold function
Noelle:  Function "x264_mc_init"
Noelle:  Disable "x264_mc_init" as cold function
Noelle:  Function "set_eop_bsf"
Noelle:  Disable "set_eop_bsf" as cold function
Noelle:  Function "x264_pps_init"
Noelle:  Disable "x264_pps_init" as cold function
Noelle:  Function "x264_clip3.593"
Noelle:  Disable "x264_clip3.593" as cold function
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Disable "x264_mc_init_mmx" as cold function
Noelle:  Function "x264_quant_init"
Noelle:  Disable "x264_quant_init" as cold function
Noelle:  Function "parse_enum"
Noelle:  Disable "parse_enum" as cold function
Noelle:  Function "qp2qscale"
Noelle:  Disable "qp2qscale" as cold function
Noelle:  Function "x264_frame_sort"
Noelle:  Disable "x264_frame_sort" as cold function
Noelle:  Function "x264_atobool"
Noelle:  Disable "x264_atobool" as cold function
Noelle:  Function "x264_atoi"
Noelle:  Disable "x264_atoi" as cold function
Noelle:  Function "mbcmp_init"
Noelle:  Disable "mbcmp_init" as cold function
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Disable "x264_predict_8x8_init" as cold function
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Disable "x264_predict_16x16_init" as cold function
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Disable "x264_predict_4x4_init" as cold function
Noelle:  Function "x264_dct_init"
Noelle:  Disable "x264_dct_init" as cold function
Noelle:  Function "x264_ratecontrol_delete"
Noelle:  Disable "x264_ratecontrol_delete" as cold function
Noelle:  Function "x264_reduce_fraction"
Noelle:  Disable "x264_reduce_fraction" as cold function
Noelle:  Function "x264_zigzag_init"
Noelle:  Disable "x264_zigzag_init" as cold function
Noelle:  Function "x264_print_intra"
Noelle:  Disable "x264_print_intra" as cold function
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Disable "x264_predict_8x8c_init" as cold function
Noelle:  Function "x264_picture_alloc"
Noelle:  Disable "x264_picture_alloc" as cold function
Noelle:  Function "get_frame_total_y4m"
Noelle:  Disable "get_frame_total_y4m" as cold function
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Disable "x264_predict_16x16_init_mmx" as cold function
Noelle:  Function "x264_deblock_init"
Noelle:  Disable "x264_deblock_init" as cold function
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Disable "x264_predict_8x8_init_mmx" as cold function
Noelle:  Function "x264_mdate"
Noelle:  Disable "x264_mdate" as cold function
Noelle:  Function "endian_fix32"
Noelle:  Disable "endian_fix32" as cold function
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Disable "x264_predict_8x8c_init_mmx" as cold function
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Disable "x264_predict_4x4_init_mmx" as cold function
Noelle:  Function "x264_clip3f"
Noelle:  Disable "x264_clip3f" as cold function
Noelle:  Function "parse_zones"
Noelle:  Disable "parse_zones" as cold function
Noelle:  Function "x264_picture_clean"
Noelle:  Disable "x264_picture_clean" as cold function
Noelle:  Function "close_file_bsf"
Noelle:  Disable "close_file_bsf" as cold function
Noelle:  Function "close_file_y4m"
Noelle:  Disable "close_file_y4m" as cold function
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Disable "x264_ratecontrol_summary" as cold function
Noelle:  Function "open_file_bsf"
Noelle:  Disable "open_file_bsf" as cold function
Noelle:  Function "x264_clip3"
Noelle:  Disable "x264_clip3" as cold function
Noelle:  Function "set_param_bsf"
Noelle:  Disable "set_param_bsf" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3" as cold function
Noelle:  Function "row_bits_so_far"
Noelle:  Disable "row_bits_so_far" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Disable "x264_macroblock_cache_mvd.842" as cold function
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:  Disable "x264_slicetype_mb_cost" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3" as cold function
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Disable "x264_median_mv_mmxext.824" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x8_sse2" as cold function
Noelle:  Function "accum_p_qp_update"
Noelle:  Disable "accum_p_qp_update" as cold function
Noelle:  Function "update_predictor"
Noelle:  Disable "update_predictor" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x4_ssse3" as cold function
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Disable "x264_me_refine_qpel" as cold function
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Disable "x264_me_refine_bidir_satd" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x4_ssse3" as cold function
Noelle:  Function "x264_me_refine_bidir"
Noelle:  Disable "x264_me_refine_bidir" as cold function
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Disable "x264_me_refine_bidir_rd" as cold function
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:  Disable "x264_me_refine_qpel_rd" as cold function
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Disable "x264_macroblock_cache_mv.841" as cold function
Noelle:  Function "x264_rc_analyse_slice"
Noelle:  Disable "x264_rc_analyse_slice" as cold function
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:  Disable "predict_16x16_p_mmxext" as cold function
Noelle:  Function "x264_clip3f.856"
Noelle:  Disable "x264_clip3f.856" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x4_mmxext" as cold function
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Disable "x264_partition_i4x4_size_cabac" as cold function
Noelle:  Function "ac_energy_mb"
Noelle:  Disable "ac_energy_mb" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x8_mmxext" as cold function
Noelle:  Function "x264_adaptive_quant"
Noelle:  Disable "x264_adaptive_quant" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x4_mmxext" as cold function
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Disable "cavlc_intra4x4_pred_size" as cold function
Noelle:  Function "predict_size"
Noelle:  Disable "predict_size" as cold function
Noelle:  Function "fix_underflow"
Noelle:  Disable "fix_underflow" as cold function
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Disable "x264_partition_i4x4_size_cavlc" as cold function
Noelle:  Function "find_underflow"
Noelle:  Disable "find_underflow" as cold function
Noelle:  Function "qscale2qp"
Noelle:  Disable "qscale2qp" as cold function
Noelle:  Function "count_expected_bits"
Noelle:  Disable "count_expected_bits" as cold function
Noelle:  Function "vbv_pass2"
Noelle:  Disable "vbv_pass2" as cold function
Noelle:  Function "clip_qscale"
Noelle:  Disable "clip_qscale" as cold function
Noelle:  Function "get_diff_limited_q"
Noelle:  Disable "get_diff_limited_q" as cold function
Noelle:  Function "get_qscale"
Noelle:  Disable "get_qscale" as cold function
Noelle:  Function "qscale2bits"
Noelle:  Disable "qscale2bits" as cold function
Noelle:  Function "init_pass2"
Noelle:  Disable "init_pass2" as cold function
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Disable "x264_ratecontrol_get_estimated_size" as cold function
Noelle:  Function "x264_slicetype_path"
Noelle:  Disable "x264_slicetype_path" as cold function
Noelle:  Function "rate_estimate_qscale"
Noelle:  Disable "rate_estimate_qscale" as cold function
Noelle:  Function "update_vbv_plan"
Noelle:  Disable "update_vbv_plan" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:  Disable "x264_macroblock_cache_rect4.843" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:  Disable "x264_mb_analyse_inter_b8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:  Disable "x264_mb_analyse_inter_b16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x8_mmxext" as cold function
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:  Disable "x264_adaptive_quant_frame" as cold function
Noelle:  Function "x264_slicetype_path_cost"
Noelle:  Disable "x264_slicetype_path_cost" as cold function
Noelle:  Function "x264_slicetype_path_search"
Noelle:  Disable "x264_slicetype_path_search" as cold function
Noelle:  Function "scenecut"
Noelle:  Disable "scenecut" as cold function
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Disable "x264_ratecontrol_set_estimated_size" as cold function
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:  Disable "x264_slicetype_frame_cost" as cold function
Noelle:  Function "x264_lowres_context_init"
Noelle:  Disable "x264_lowres_context_init" as cold function
Noelle:  Function "x264_slicetype_analyse"
Noelle:  Disable "x264_slicetype_analyse" as cold function
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Disable "predict_8x8_vr_mmxext" as cold function
Noelle:  Function "parse_zone"
Noelle:  Disable "parse_zone" as cold function
Noelle:  Function "x264_frame_unshift"
Noelle:  Disable "x264_frame_unshift" as cold function
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Disable "array_non_zero_count_mmx.1086" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:  Disable "x264_macroblock_luma_write_cavlc.1087" as cold function
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Disable "bs_size_ue_big.963" as cold function
Noelle:  Function "bs_size_se.962"
Noelle:  Disable "bs_size_se.962" as cold function
Noelle:  Function "scaling_list_write"
Noelle:  Disable "scaling_list_write" as cold function
Noelle:  Function "transpose"
Noelle:  Disable "transpose" as cold function
Noelle:  Function "endian_fix32.950"
Noelle:  Disable "endian_fix32.950" as cold function
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Disable "x264_thread_sync_ratecontrol" as cold function
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:  Disable "x264_ratecontrol_slice_type" as cold function
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Disable "x264_clip_uint8.729" as cold function
Noelle:  Function "predict_row_size"
Noelle:  Disable "predict_row_size" as cold function
Noelle:  Function "predict_row_size_sum"
Noelle:  Disable "predict_row_size_sum" as cold function
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:  Disable "block_residual_write_cavlc.1085" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Disable "x264_mb_predict_non_zero_code.1088" as cold function
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Disable "bs_write_vlc.1090" as cold function
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Disable "x264_frame_cond_broadcast" as cold function
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Disable "cavlc_mb_mvd.1093" as cold function
Noelle:  Function "deblock_luma_c"
Noelle:  Disable "deblock_luma_c" as cold function
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Disable "x264_clip_uint8.704" as cold function
Noelle:  Function "x264_clip3.703"
Noelle:  Disable "x264_clip3.703" as cold function
Noelle:  Function "deblock_chroma_c"
Noelle:  Disable "deblock_chroma_c" as cold function
Noelle:  Function "deblock_luma_intra_c"
Noelle:  Disable "deblock_luma_intra_c" as cold function
Noelle:  Function "deblock_chroma_intra_c"
Noelle:  Disable "deblock_chroma_intra_c" as cold function
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Disable "deblock_h_chroma_intra_c" as cold function
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Disable "deblock_v_chroma_intra_c" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1066" as cold function
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Disable "x264_cabac_mb_transform_size.1018" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Disable "x264_cabac_mb_sub_p_partition.1026" as cold function
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Disable "x264_macroblock_encode_p4x4" as cold function
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:  Disable "x264_macroblock_encode_p8x8" as cold function
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:  Disable "x264_macroblock_probe_skip" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Disable "x264_cabac_mb8x8_mvd.1027" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Disable "x264_cabac_mb_sub_b_partition.1028" as cold function
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:  Disable "x264_macroblock_write_cavlc" as cold function
Noelle:  Function "bs_pos.1063"
Noelle:  Disable "bs_pos.1063" as cold function
Noelle:  Function "bs_write1.1065"
Noelle:  Disable "bs_write1.1065" as cold function
Noelle:  Function "bs_write_ue"
Noelle:  Disable "bs_write_ue" as cold function
Noelle:  Function "bs_align_0"
Noelle:  Disable "bs_align_0" as cold function
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Disable "deblock_h_luma_intra_c" as cold function
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Disable "x264_predict_lossless_16x16" as cold function
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Disable "x264_predict_lossless_8x8" as cold function
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Disable "x264_predict_lossless_4x4" as cold function
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Disable "x264_predict_lossless_8x8_chroma" as cold function
Noelle:  Function "bs_write.1069"
Noelle:  Disable "bs_write.1069" as cold function
Noelle:  Function "bs_write_te"
Noelle:  Disable "bs_write_te" as cold function
Noelle:  Function "bs_write_se.1072"
Noelle:  Disable "bs_write_se.1072" as cold function
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Disable "cavlc_mb8x8_mvd.1074" as cold function
Noelle:  Function "x264_quant_8x8"
Noelle:  Disable "x264_quant_8x8" as cold function
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Disable "x264_mb_encode_i8x8" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1083" as cold function
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Disable "cavlc_qp_delta.1084" as cold function
Noelle:  Function "pixel_satd_wxh"
Noelle:  Disable "pixel_satd_wxh" as cold function
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Disable "x264_mb_mc_8x8" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Disable "x264_mb_load_mv_direct8x8" as cold function
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:  Disable "x264_macroblock_cache_rect1" as cold function
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:  Disable "x264_macroblock_cache_rect4" as cold function
Noelle:  Function "pack16to32_mask"
Noelle:  Disable "pack16to32_mask" as cold function
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Disable "x264_macroblock_cache_mv" as cold function
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Disable "x264_macroblock_cache_ref" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_temporal" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_spatial" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:  Disable "x264_mb_predict_mv_direct16x16" as cold function
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:  Disable "predict_16x16_dc_mmxext" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_sse2" as cold function
Noelle:  Function "pixel_sa8d_wxh"
Noelle:  Disable "pixel_sa8d_wxh" as cold function
Noelle:  Function "pixel_hadamard_ac"
Noelle:  Disable "pixel_hadamard_ac" as cold function
Noelle:  Function "ssim_end1"
Noelle:  Disable "ssim_end1" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3_phadd" as cold function
Noelle:  Function "mc_luma_mmxext"
Noelle:  Disable "mc_luma_mmxext" as cold function
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Disable "deblock_v_luma_intra_c" as cold function
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Disable "deblock_h_chroma_c" as cold function
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Disable "deblock_v_chroma_c" as cold function
Noelle:  Function "deblock_h_luma_c"
Noelle:  Disable "deblock_h_luma_c" as cold function
Noelle:  Function "deblock_v_luma_c"
Noelle:  Disable "deblock_v_luma_c" as cold function
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:  Disable "restore_cavlc_nnz_row" as cold function
Noelle:  Function "endian_fix.1095"
Noelle:  Disable "endian_fix.1095" as cold function
Noelle:  Function "bs_flush.1096"
Noelle:  Disable "bs_flush.1096" as cold function
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Disable "munge_cavlc_nnz" as cold function
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:  Disable "munge_cavlc_nnz_row" as cold function
Noelle:  Function "endian_fix32.1097"
Noelle:  Disable "endian_fix32.1097" as cold function
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:  Disable "x264_frame_expand_border_lowres" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:  Disable "x264_macroblock_bipred_init" as cold function
Noelle:  Function "get_ref_mmxext"
Noelle:  Disable "get_ref_mmxext" as cold function
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:  Disable "x264_hpel_filter_mmxext" as cold function
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:  Disable "x264_hpel_filter_sse2_amd" as cold function
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:  Disable "x264_hpel_filter_sse2_misalign" as cold function
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Disable "mc_luma_cache64_sse2" as cold function
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Disable "get_ref_cache64_sse2" as cold function
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Disable "get_ref_sse2_misalign" as cold function
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Disable "x264_mb_mc_direct8x8" as cold function
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Disable "x264_mb_mc_01xywh" as cold function
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Disable "x264_mb_mc_1xywh" as cold function
Noelle:  Function "strtable_lookup"
Noelle:  Disable "strtable_lookup" as cold function
Noelle:  Function "x264_decimate_score64"
Noelle:  Disable "x264_decimate_score64" as cold function
Noelle:  Function "x264_coeff_last4"
Noelle:  Disable "x264_coeff_last4" as cold function
Noelle:  Function "x264_coeff_last15"
Noelle:  Disable "x264_coeff_last15" as cold function
Noelle:  Function "x264_coeff_last16"
Noelle:  Disable "x264_coeff_last16" as cold function
Noelle:  Function "x264_coeff_last64"
Noelle:  Disable "x264_coeff_last64" as cold function
Noelle:  Function "parse_qpfile"
Noelle:  Disable "parse_qpfile" as cold function
Noelle:  Function "Help"
Noelle:  Disable "Help" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "mk_flushContextID"
Noelle:  Disable "mk_flushContextID" as cold function
Noelle:  Function "x264_decimate_score16"
Noelle:  Disable "x264_decimate_score16" as cold function
Noelle:  Function "mk_createWriter"
Noelle:  Disable "mk_createWriter" as cold function
Noelle:  Function "mk_createContext"
Noelle:  Disable "mk_createContext" as cold function
Noelle:  Function "mk_destroyContexts"
Noelle:  Disable "mk_destroyContexts" as cold function
Noelle:  Function "mk_writeHeader"
Noelle:  Disable "mk_writeHeader" as cold function
Noelle:  Function "mk_writeUInt"
Noelle:  Disable "mk_writeUInt" as cold function
Noelle:  Function "mk_writeStr"
Noelle:  Disable "mk_writeStr" as cold function
Noelle:  Function "mk_closeContext"
Noelle:  Disable "mk_closeContext" as cold function
Noelle:  Function "mk_writeFloat"
Noelle:  Disable "mk_writeFloat" as cold function
Noelle:  Function "quant_8x8"
Noelle:  Disable "quant_8x8" as cold function
Noelle:  Function "parse_cqm"
Noelle:  Disable "parse_cqm" as cold function
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Disable "zigzag_scan_8x8_frame" as cold function
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Disable "zigzag_scan_4x4_frame" as cold function
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Disable "zigzag_sub_8x8_frame" as cold function
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Disable "zigzag_sub_4x4_frame" as cold function
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:  Disable "zigzag_interleave_8x8_cavlc" as cold function
Noelle:  Function "x264_cqm_parse_file"
Noelle:  Disable "x264_cqm_parse_file" as cold function
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:  Disable "x264_cqm_parse_jmlist" as cold function
Noelle:  Function "mk_writeBin"
Noelle:  Disable "mk_writeBin" as cold function
Noelle:  Function "quant_4x4"
Noelle:  Disable "quant_4x4" as cold function
Noelle:  Function "quant_4x4_dc"
Noelle:  Disable "quant_4x4_dc" as cold function
Noelle:  Function "quant_2x2_dc"
Noelle:  Disable "quant_2x2_dc" as cold function
Noelle:  Function "dequant_4x4"
Noelle:  Disable "dequant_4x4" as cold function
Noelle:  Function "dequant_4x4_dc"
Noelle:  Disable "dequant_4x4_dc" as cold function
Noelle:  Function "dequant_8x8"
Noelle:  Disable "dequant_8x8" as cold function
Noelle:  Function "x264_denoise_dct"
Noelle:  Disable "x264_denoise_dct" as cold function
Noelle:  Function "x264_decimate_score15"
Noelle:  Disable "x264_decimate_score15" as cold function
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:  Disable "x264_pixel_sad_4x8" as cold function
Noelle:  Function "close_file_yuv"
Noelle:  Disable "close_file_yuv" as cold function
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Disable "x264_encoder_reconfig" as cold function
Noelle:  Function "x264_thread_sync_context"
Noelle:  Disable "x264_thread_sync_context" as cold function
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Disable "bs_rbsp_trailing" as cold function
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:  Disable "x264_pixel_sad_16x16" as cold function
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:  Disable "x264_pixel_sad_16x8" as cold function
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:  Disable "x264_pixel_sad_8x16" as cold function
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:  Disable "x264_pixel_sad_8x8" as cold function
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:  Disable "x264_pixel_sad_8x4" as cold function
Noelle:  Function "read_frame_yuv"
Noelle:  Disable "read_frame_yuv" as cold function
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:  Disable "x264_pixel_sad_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Disable "x264_pixel_sad_x3_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Disable "x264_pixel_sad_x3_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Disable "x264_pixel_sad_x3_8x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Disable "x264_pixel_sad_x3_8x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Disable "x264_pixel_sad_x3_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Disable "x264_pixel_sad_x3_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Disable "x264_pixel_sad_x3_4x4" as cold function
Noelle:  Function "mk_closeCluster"
Noelle:  Disable "mk_closeCluster" as cold function
Noelle:  Function "mk_flushContextData"
Noelle:  Disable "mk_flushContextData" as cold function
Noelle:  Function "mk_appendContextData"
Noelle:  Disable "mk_appendContextData" as cold function
Noelle:  Function "mk_writeID"
Noelle:  Disable "mk_writeID" as cold function
Noelle:  Function "x264_clip3.467"
Noelle:  Disable "x264_clip3.467" as cold function
Noelle:  Function "mk_writeSize"
Noelle:  Disable "mk_writeSize" as cold function
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Disable "mk_writeFloatRaw" as cold function
Noelle:  Function "mk_startFrame"
Noelle:  Disable "mk_startFrame" as cold function
Noelle:  Function "mk_flushFrame"
Noelle:  Disable "mk_flushFrame" as cold function
Noelle:  Function "x264_atof"
Noelle:  Disable "x264_atof" as cold function
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Disable "mk_ebmlSizeSize" as cold function
Noelle:  Function "mk_ebmlSIntSize"
Noelle:  Disable "mk_ebmlSIntSize" as cold function
Noelle:  Function "mk_writeSInt"
Noelle:  Disable "mk_writeSInt" as cold function
Noelle:  Function "mk_setFrameFlags"
Noelle:  Disable "mk_setFrameFlags" as cold function
Noelle:  Function "mk_addFrameData"
Noelle:  Disable "mk_addFrameData" as cold function
Noelle:  Function "mk_close"
Noelle:  Disable "mk_close" as cold function
Noelle:  Function "open_file_yuv"
Noelle:  Disable "open_file_yuv" as cold function
Noelle:  Function "get_frame_total_yuv"
Noelle:  Disable "get_frame_total_yuv" as cold function
Noelle:  Function "bs_write_vlc"
Noelle:  Disable "bs_write_vlc" as cold function
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Disable "x264_rd_cost_subpart" as cold function
Noelle:  Function "x264_partition_size_cabac"
Noelle:  Disable "x264_partition_size_cabac" as cold function
Noelle:  Function "x264_partition_size_cavlc"
Noelle:  Disable "x264_partition_size_cavlc" as cold function
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Disable "cavlc_mb8x8_mvd" as cold function
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Disable "cavlc_mb_mvd" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:  Disable "x264_macroblock_luma_write_cavlc" as cold function
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Disable "array_non_zero_count_mmx" as cold function
Noelle:  Function "block_residual_write_cavlc"
Noelle:  Disable "block_residual_write_cavlc" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Disable "x264_mb_predict_non_zero_code" as cold function
Noelle:  Function "x264_rd_cost_part"
Noelle:  Disable "x264_rd_cost_part" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Disable "x264_cabac_mb8x8_mvd" as cold function
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Disable "array_non_zero_int_mmx" as cold function
Noelle:  Function "array_non_zero_int_c"
Noelle:  Disable "array_non_zero_int_c" as cold function
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Disable "x264_subpartition_size_cabac" as cold function
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Disable "x264_subpartition_size_cavlc" as cold function
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:  Disable "x264_macroblock_size_cavlc" as cold function
Noelle:  Function "cavlc_qp_delta"
Noelle:  Disable "cavlc_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Disable "x264_cabac_mb_transform_size" as cold function
Noelle:  Function "predict_16x16_dc_top"
Noelle:  Disable "predict_16x16_dc_top" as cold function
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:  Disable "pixel_avg_weight_wxh" as cold function
Noelle:  Function "pixel_avg"
Noelle:  Disable "pixel_avg" as cold function
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Disable "x264_predict_8x8_filter" as cold function
Noelle:  Function "predict_16x16_v"
Noelle:  Disable "predict_16x16_v" as cold function
Noelle:  Function "predict_16x16_h"
Noelle:  Disable "predict_16x16_h" as cold function
Noelle:  Function "predict_16x16_dc"
Noelle:  Disable "predict_16x16_dc" as cold function
Noelle:  Function "predict_16x16_p"
Noelle:  Disable "predict_16x16_p" as cold function
Noelle:  Function "predict_16x16_dc_left"
Noelle:  Disable "predict_16x16_dc_left" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Disable "x264_cabac_mb_sub_p_partition" as cold function
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Disable "x264_clip_uint8.650" as cold function
Noelle:  Function "predict_8x8c_v"
Noelle:  Disable "predict_8x8c_v" as cold function
Noelle:  Function "predict_8x8c_h"
Noelle:  Disable "predict_8x8c_h" as cold function
Noelle:  Function "predict_8x8c_dc"
Noelle:  Disable "predict_8x8c_dc" as cold function
Noelle:  Function "x264_realloc"
Noelle:  Disable "x264_realloc" as cold function
Noelle:  Function "x264_slurp_file"
Noelle:  Disable "x264_slurp_file" as cold function
Noelle:  Function "x264_coeff_last_internal"
Noelle:  Disable "x264_coeff_last_internal" as cold function
Noelle:  Function "x264_decimate_score_internal"
Noelle:  Disable "x264_decimate_score_internal" as cold function
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Disable "x264_partition_i8x8_size_cabac" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Disable "x264_mb_cache_mv_b8x8" as cold function
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Disable "x264_macroblock_cache_skip" as cold function
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Disable "x264_macroblock_cache_intra8x8_pred" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Disable "x264_mb_analyse_inter_p4x4_chroma" as cold function
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Disable "x264_rd_cost_i4x4" as cold function
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Disable "x264_rd_cost_i8x8" as cold function
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Disable "x264_rd_cost_i8x8_chroma" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:  Disable "x264_i8x8_chroma_size_cabac" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:  Disable "x264_i8x8_chroma_size_cavlc" as cold function
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Disable "x264_mb_cache_mv_b16x8" as cold function
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:  Disable "x264_partition_i8x8_size_cavlc" as cold function
Noelle:  Function "open_file_mkv"
Noelle:  Disable "open_file_mkv" as cold function
Noelle:  Function "set_param_mkv"
Noelle:  Disable "set_param_mkv" as cold function
Noelle:  Function "gcd"
Noelle:  Disable "gcd" as cold function
Noelle:  Function "write_nalu_mkv"
Noelle:  Disable "write_nalu_mkv" as cold function
Noelle:  Function "write_header_mkv"
Noelle:  Disable "write_header_mkv" as cold function
Noelle:  Function "set_eop_mkv"
Noelle:  Disable "set_eop_mkv" as cold function
Noelle:  Function "close_file_mkv"
Noelle:  Disable "close_file_mkv" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:  Disable "x264_mb_analyse_inter_p8x8_mixed_ref" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Disable "x264_cabac_mb_sub_b_partition" as cold function
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Disable "x264_quant_dc_trellis" as cold function
Noelle:  Function "quant_trellis_cabac"
Noelle:  Disable "quant_trellis_cabac" as cold function
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Disable "x264_cabac_size_decision_noup2" as cold function
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Disable "x264_quant_4x4_trellis" as cold function
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Disable "x264_quant_8x8_trellis" as cold function
Noelle:  Function "x264_intra_rd_refine"
Noelle:  Disable "x264_intra_rd_refine" as cold function
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Disable "x264_macroblock_probe_pskip" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Disable "x264_pixel_sad_x4_16x16" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:  Disable "x264_mb_analyse_inter_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:  Disable "x264_mb_analyse_inter_p4x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:  Disable "x264_mb_analyse_inter_b8x16" as cold function
Noelle:  Function "x264_refine_bidir"
Noelle:  Disable "x264_refine_bidir" as cold function
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Disable "x264_mb_analyse_transform" as cold function
Noelle:  Function "x264_psy_trellis_init"
Noelle:  Disable "x264_psy_trellis_init" as cold function
Noelle:  Function "x264_me_search"
Noelle:  Disable "x264_me_search" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Disable "x264_mb_cache_mv_b8x16" as cold function
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:  Disable "x264_pixel_ssd_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Disable "x264_pixel_sad_x4_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Disable "x264_pixel_sad_x4_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Disable "x264_pixel_sad_x4_4x4" as cold function
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:  Disable "x264_pixel_ssd_16x16" as cold function
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:  Disable "x264_pixel_ssd_16x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:  Disable "x264_pixel_ssd_8x16" as cold function
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:  Disable "x264_pixel_ssd_8x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:  Disable "x264_pixel_ssd_8x4" as cold function
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:  Disable "x264_pixel_ssd_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Disable "x264_pixel_sad_x4_8x8" as cold function
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Disable "x264_pixel_satd_16x16" as cold function
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Disable "x264_pixel_satd_16x8" as cold function
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Disable "x264_pixel_satd_8x16" as cold function
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Disable "x264_pixel_satd_8x8" as cold function
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Disable "x264_pixel_satd_8x4" as cold function
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Disable "x264_pixel_satd_4x8" as cold function
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Disable "x264_pixel_satd_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Disable "x264_pixel_satd_x3_16x16" as cold function
Noelle:  Function "sub16x16_dct8"
Noelle:  Disable "sub16x16_dct8" as cold function
Noelle:  Function "sub4x4_dct"
Noelle:  Disable "sub4x4_dct" as cold function
Noelle:  Function "add4x4_idct"
Noelle:  Disable "add4x4_idct" as cold function
Noelle:  Function "sub8x8_dct"
Noelle:  Disable "sub8x8_dct" as cold function
Noelle:  Function "add8x8_idct"
Noelle:  Disable "add8x8_idct" as cold function
Noelle:  Function "sub16x16_dct"
Noelle:  Disable "sub16x16_dct" as cold function
Noelle:  Function "add16x16_idct"
Noelle:  Disable "add16x16_idct" as cold function
Noelle:  Function "sub8x8_dct8"
Noelle:  Disable "sub8x8_dct8" as cold function
Noelle:  Function "add8x8_idct8"
Noelle:  Disable "add8x8_idct8" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Disable "x264_pixel_satd_x3_16x8" as cold function
Noelle:  Function "add16x16_idct8"
Noelle:  Disable "add16x16_idct8" as cold function
Noelle:  Function "dct4x4dc"
Noelle:  Disable "dct4x4dc" as cold function
Noelle:  Function "idct4x4dc"
Noelle:  Disable "idct4x4dc" as cold function
Noelle:  Function "pixel_sub_wxh"
Noelle:  Disable "pixel_sub_wxh" as cold function
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Disable "zigzag_scan_8x8_field" as cold function
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Disable "zigzag_scan_4x4_field" as cold function
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Disable "zigzag_sub_8x8_field" as cold function
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Disable "zigzag_sub_4x4_field" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Disable "x264_pixel_hadamard_ac_8x16" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Disable "x264_pixel_hadamard_ac_8x8" as cold function
Noelle:  Function "x264_pixel_ads4"
Noelle:  Disable "x264_pixel_ads4" as cold function
Noelle:  Function "x264_pixel_ads2"
Noelle:  Disable "x264_pixel_ads2" as cold function
Noelle:  Function "x264_pixel_ads1"
Noelle:  Disable "x264_pixel_ads1" as cold function
Noelle:  Function "x264_pixel_var_16x16"
Noelle:  Disable "x264_pixel_var_16x16" as cold function
Noelle:  Function "x264_pixel_var_8x8"
Noelle:  Disable "x264_pixel_var_8x8" as cold function
Noelle:  Function "ssim_4x4x2_core"
Noelle:  Disable "ssim_4x4x2_core" as cold function
Noelle:  Function "ssim_end4"
Noelle:  Disable "ssim_end4" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Disable "x264_pixel_hadamard_ac_16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:  Disable "x264_mb_analyse_inter_p8x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:  Disable "x264_mb_analyse_inter_p4x8" as cold function
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Disable "x264_mb_cache_mv_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:  Disable "x264_mb_analyse_inter_p16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:  Disable "x264_mb_analyse_inter_p8x16" as cold function
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Disable "x264_macroblock_probe_bskip" as cold function
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:  Disable "x264_mb_analyse_inter_direct" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:  Disable "x264_mb_analyse_inter_b16x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Disable "x264_pixel_satd_x4_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Disable "x264_pixel_satd_x3_8x16" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Disable "x264_pixel_satd_x3_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Disable "x264_pixel_satd_x3_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Disable "x264_pixel_satd_x3_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Disable "x264_pixel_satd_x3_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Disable "x264_pixel_satd_x4_16x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Disable "x264_pixel_satd_x4_16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Disable "x264_pixel_satd_x4_8x16" as cold function
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:  Disable "x264_pixel_ssim_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Disable "x264_pixel_satd_x4_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Disable "x264_pixel_satd_x4_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Disable "x264_pixel_satd_x4_4x4" as cold function
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Disable "x264_pixel_sa8d_16x16" as cold function
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Disable "x264_pixel_sa8d_16x8" as cold function
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Disable "x264_pixel_sa8d_8x16" as cold function
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Disable "x264_pixel_sa8d_8x8" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Disable "x264_pixel_hadamard_ac_16x16" as cold function
Noelle:  Function "mc_copy_w8"
Noelle:  Disable "mc_copy_w8" as cold function
Noelle:  Function "mc_copy_w16"
Noelle:  Disable "mc_copy_w16" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x8_mmxext" as cold function
Noelle:  Function "pixel_avg_2x2"
Noelle:  Disable "pixel_avg_2x2" as cold function
Noelle:  Function "mc_copy_w4"
Noelle:  Disable "mc_copy_w4" as cold function
Noelle:  Function "plane_copy"
Noelle:  Disable "plane_copy" as cold function
Noelle:  Function "hpel_filter"
Noelle:  Disable "hpel_filter" as cold function
Noelle:  Function "prefetch_fenc_null"
Noelle:  Disable "prefetch_fenc_null" as cold function
Noelle:  Function "prefetch_ref_null"
Noelle:  Disable "prefetch_ref_null" as cold function
Noelle:  Function "memzero_aligned"
Noelle:  Disable "memzero_aligned" as cold function
Noelle:  Function "frame_init_lowres_core"
Noelle:  Disable "frame_init_lowres_core" as cold function
Noelle:  Function "x264_clip_uint8"
Noelle:  Disable "x264_clip_uint8" as cold function
Noelle:  Function "pixel_avg_16x16"
Noelle:  Disable "pixel_avg_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Disable "x264_pixel_sad_x4_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Disable "x264_pixel_sad_x4_8x16" as cold function
Noelle:  Function "x264_psnr"
Noelle:  Disable "x264_psnr" as cold function
Noelle:  Function "x264_frame_dump"
Noelle:  Disable "x264_frame_dump" as cold function
Noelle:  Function "x264_frame_init_lowres"
Noelle:  Disable "x264_frame_init_lowres" as cold function
Noelle:  Function "mc_luma"
Noelle:  Disable "mc_luma" as cold function
Noelle:  Function "get_ref"
Noelle:  Disable "get_ref" as cold function
Noelle:  Function "mc_chroma"
Noelle:  Disable "mc_chroma" as cold function
Noelle:  Function "mc_copy"
Noelle:  Disable "mc_copy" as cold function
Noelle:  Function "pixel_avg_16x8"
Noelle:  Disable "pixel_avg_16x8" as cold function
Noelle:  Function "pixel_avg_8x16"
Noelle:  Disable "pixel_avg_8x16" as cold function
Noelle:  Function "pixel_avg_8x8"
Noelle:  Disable "pixel_avg_8x8" as cold function
Noelle:  Function "pixel_avg_8x4"
Noelle:  Disable "pixel_avg_8x4" as cold function
Noelle:  Function "pixel_avg_4x8"
Noelle:  Disable "pixel_avg_4x8" as cold function
Noelle:  Function "pixel_avg_4x4"
Noelle:  Disable "pixel_avg_4x4" as cold function
Noelle:  Function "pixel_avg_4x2"
Noelle:  Disable "pixel_avg_4x2" as cold function
Noelle:  Function "pixel_avg_2x4"
Noelle:  Disable "pixel_avg_2x4" as cold function
Noelle:  Function "pack16to32"
Noelle:  Disable "pack16to32" as cold function
Noelle:  Function "predict_8x8_vr"
Noelle:  Disable "predict_8x8_vr" as cold function
Noelle:  Function "predict_8x8_hd"
Noelle:  Disable "predict_8x8_hd" as cold function
Noelle:  Function "predict_8x8_vl"
Noelle:  Disable "predict_8x8_vl" as cold function
Noelle:  Function "predict_8x8_hu"
Noelle:  Disable "predict_8x8_hu" as cold function
Noelle:  Function "predict_8x8_dc_left"
Noelle:  Disable "predict_8x8_dc_left" as cold function
Noelle:  Function "predict_8x8_dc_top"
Noelle:  Disable "predict_8x8_dc_top" as cold function
Noelle:  Function "predict_8x8_dc_128"
Noelle:  Disable "predict_8x8_dc_128" as cold function
Noelle:  Function "pack8to16"
Noelle:  Disable "pack8to16" as cold function
Noelle:  Function "predict_8x8_ddr"
Noelle:  Disable "predict_8x8_ddr" as cold function
Noelle:  Function "predict_4x4_dc"
Noelle:  Disable "predict_4x4_dc" as cold function
Noelle:  Function "predict_4x4_ddl"
Noelle:  Disable "predict_4x4_ddl" as cold function
Noelle:  Function "predict_4x4_ddr"
Noelle:  Disable "predict_4x4_ddr" as cold function
Noelle:  Function "predict_4x4_vr"
Noelle:  Disable "predict_4x4_vr" as cold function
Noelle:  Function "predict_4x4_hd"
Noelle:  Disable "predict_4x4_hd" as cold function
Noelle:  Function "predict_4x4_vl"
Noelle:  Disable "predict_4x4_vl" as cold function
Noelle:  Function "predict_4x4_hu"
Noelle:  Disable "predict_4x4_hu" as cold function
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:  Disable "x264_pixel_ssd_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x8_sse2" as cold function
Noelle:  Function "pixel_avg_wxh"
Noelle:  Disable "pixel_avg_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x16_sse2" as cold function
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Disable "x264_mb_analyse_b_rd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x16_sse2" as cold function
Noelle:  Function "predict_8x8c_p"
Noelle:  Disable "predict_8x8c_p" as cold function
Noelle:  Function "predict_8x8c_dc_left"
Noelle:  Disable "predict_8x8c_dc_left" as cold function
Noelle:  Function "predict_8x8c_dc_top"
Noelle:  Disable "predict_8x8c_dc_top" as cold function
Noelle:  Function "predict_8x8_v"
Noelle:  Disable "predict_8x8_v" as cold function
Noelle:  Function "predict_8x8_h"
Noelle:  Disable "predict_8x8_h" as cold function
Noelle:  Function "predict_8x8_dc"
Noelle:  Disable "predict_8x8_dc" as cold function
Noelle:  Function "predict_8x8_ddl"
Noelle:  Disable "predict_8x8_ddl" as cold function
EnablersManager:   Try to improve all 68 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_analyse"
EnablersManager:     Entry instruction =   %exitcond165 = icmp eq i32 %.1, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_mb_analysis_t, align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond165 = icmp eq i32 %.1, 2"
LICM:     Invariant = "  store i32 1, i32* %5, align 4, !tbaa !30
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond165, label %.loopexit110, label %431
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode"
EnablersManager:     Entry instruction =   %.b9 = load i1, i1* @b_ctrl_c, align 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [200 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %78, label %80, label %..loopexit_crit_edge, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_encoder_encode"
EnablersManager:     Entry instruction =   %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %Pivot52, label %NodeBlock30, label %NodeBlock26, !prof !91
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_slice_write"
EnablersManager:     Entry instruction =   %51 = mul nsw i32 %.07, %50
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %51 = mul nsw i32 %.07, %50"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %54, label %55, label %152, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond20 = icmp eq i64 %indvars.iv18, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond20, label %._crit_edge108.loopexit1, label %207, !prof !86
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac"
EnablersManager:     Entry instruction =   %76 = icmp slt i64 %indvars.iv19, %41
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %76 = icmp slt i64 %indvars.iv19, %41"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %76, label %77, label %.loopexit11.loopexit1, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_inter_p16x16"
EnablersManager:     Entry instruction =   %78 = load i32, i32* %11, align 16, !tbaa !31
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [8 x [2 x i16]], align 4
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %struct.x264_me_t, align 16
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %80, label %81, label %173, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond17 = icmp eq i64 %indvars.iv15, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond17, label %._crit_edge108.loopexit, label %192, !prof !83
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac"
EnablersManager:     Entry instruction =   %indvars.iv.next = add nsw i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %115, label %144, label %117, !prof !77
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond21 = icmp eq i64 %indvars.iv19, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond21, label %._crit_edge120.loopexit, label %260, !prof !90
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %332 = icmp sgt i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %332 = icmp sgt i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %332, label %333, label %341, !prof !103
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %345 = icmp slt i64 %indvars.iv55, %343
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %345 = icmp slt i64 %indvars.iv55, %343"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %345, label %346, label %371, !prof !105
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca [9 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %309, label %310, label %.._crit_edge92_crit_edge, !prof !100
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %130 = icmp slt i32 %.3, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %130 = icmp slt i32 %.3, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %130, label %131, label %133, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %indvars.iv.next = add nsw i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %123, label %139, label %124, !prof !77
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %78 = icmp slt i64 %indvars.iv22, %42
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %78 = icmp slt i64 %indvars.iv22, %42"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %78, label %79, label %.loopexit14.loopexit1, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond24 = icmp eq i64 %indvars.iv22, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond24, label %._crit_edge120.loopexit2, label %275, !prof !93
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit612.loopexit, label %1765, !prof !247
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1761 = shl nsw i64 %indvars.iv662, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1761 = shl nsw i64 %indvars.iv662, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1762, label %.preheader, label %1800, !prof !246
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond18 = icmp eq i64 %indvars.iv16, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond18, label %.loopexit.loopexit, label %141, !prof !87
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond12, label %.us-lcssa.us.loopexit1, label %96, !prof !81
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond15 = icmp eq i64 %indvars.iv13, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond15, label %.us-lcssa.us.loopexit, label %75, !prof !74
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond21 = icmp eq i64 %indvars.iv19, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [4 x [4 x [4 x i16]]], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [2 x [2 x i16]], align 16 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond21, label %148, label %40, !prof !63
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_fdec_filter_row"
EnablersManager:     Entry instruction =   %67 = icmp slt i32 %.01, %1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %67 = icmp slt i32 %.01, %1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %67, label %68, label %._crit_edge17.loopexit, !prof !81
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %335 = icmp slt i64 %indvars.iv86, %spec.select
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %335, label %336, label %503, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %710 = icmp slt i64 %indvars.iv100, %spec.select
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %710, label %711, label %880, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73"
LICM:     Invariant = "  store i32 0, i32* %3, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 0, i32* %4, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 50529027, i32* %4, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %82, label %83, label %885, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %18 = icmp ult i64 %indvars.iv33, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %18 = icmp ult i64 %indvars.iv33, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %18, label %19, label %._crit_edge83.loopexit, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond60 = icmp eq i64 %indvars.iv58, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond60, label %497, label %486, !prof !134
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond63 = icmp eq i64 %indvars.iv61, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond63, label %504, label %444, !prof !131
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %164, label %152, !prof !93
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %434, label %423, !prof !130
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 24
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %._crit_edge107.loopexit, label %226, !prof !90
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond81 = icmp eq i64 %indvars.iv79, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond81, label %.us-lcssa34.us.us, label %339, !prof !107
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond84 = icmp eq i64 %indvars.iv82, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond84, label %.us-lcssa36.us.loopexit, label %.split33.us.us, !prof !106
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_i16x16"
EnablersManager:     Entry instruction =   %exitcond4 = icmp eq i64 %indvars.iv2, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [4 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond4, label %59, label %46, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode_frame"
EnablersManager:     Entry instruction =   %22 = icmp slt i64 %indvars.iv, %19
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.x264_nal_t*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %22 = icmp slt i64 %indvars.iv, %19"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %22, label %23, label %47, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_nal_encode"
EnablersManager:     Entry instruction =   %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %25, label %26, label %37, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %89 = icmp slt i64 %indvars.iv707, %87
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp slt i64 %indvars.iv707, %87"
LICM:     Invariant = "  store i32 16, i32* %9, align 4, !tbaa !66
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %121, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond99 = icmp eq i64 %indvars.iv97, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond99, label %123, label %117
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1426 = icmp slt i64 %indvars.iv670, %1424
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1426, label %1427, label %.loopexit614, !prof !207
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 24
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %._crit_edge119.loopexit, label %294, !prof !97
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode"
EnablersManager:     Entry instruction =   %148 = load i8*, i8** %40, align 8, !tbaa !50
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [200 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %152, label %153, label %._crit_edge22.._crit_edge22_crit_edge, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond13 = icmp eq i64 %indvars.iv11, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond13, label %38, label %25, !prof !66
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond16 = icmp eq i64 %indvars.iv14, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond16, label %39, label %22, !prof !65
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "copy_column8"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %9, label %4, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "refine_subpel"
EnablersManager:     Entry instruction =   %258 = icmp sgt i32 %.179, 0
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [2 x [576 x i8]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i32, align 4 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %258 = icmp sgt i32 %.179, 0"
LICM:     Invariant = "  store i32 16, i32* %12, align 4, !tbaa !72
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %258, label %259, label %..loopexit_crit_edge, !prof !91
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "refine_subpel"
EnablersManager:     Entry instruction =   %111 = icmp sgt i32 %.078, 0
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [2 x [576 x i8]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [4 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca [4 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %111 = icmp sgt i32 %.078, 0"
LICM:     Invariant = "  store i32 32, i32* %10, align 4, !tbaa !72
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %111, label %112, label %.._crit_edge138_crit_edge, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "predict_16x16_p_sse2"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 9
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 9"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %28, label %3, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %exitcond15 = icmp eq i64 %indvars.iv13, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [2 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond15, label %.loopexit6.us, label %113, !prof !74
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %96 = icmp slt i64 %indvars.iv16, %95
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [2 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %96 = icmp slt i64 %indvars.iv16, %95"
LICM:     Invariant = "  %97 = load i32, i32* %13, align 16, !tbaa !63
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "predict_8x8c_p_mmxext"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 5
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 5"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %28, label %3, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_i16x16"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [4 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %100, label %93, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1558 = icmp slt i64 %indvars.iv666, %1556
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1558, label %1559, label %.loopexit613, !prof !223
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %118 = icmp slt i64 %indvars.iv18, %95
EnablersManager:     The current loop belongs to the function x264_macroblock_load_pic_pointers , which has already been modified.
EnablersManager:   Loop:
EnablersManager:     Function = "x264_cabac_mb_type"
EnablersManager:     Entry instruction =   %90 = icmp slt i64 %indvars.iv, %88
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %90 = icmp slt i64 %indvars.iv, %88"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %90, label %91, label %.loopexit.loopexit
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond75 = icmp eq i64 %indvars.iv73, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond75, label %389, label %384, !prof !118
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond78 = icmp eq i64 %indvars.iv76, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond78, label %.loopexit29.loopexit, label %377, !prof !116
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_rect4.786"
EnablersManager:     Entry instruction =   %32 = icmp slt i64 %indvars.iv8, %24
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %32 = icmp slt i64 %indvars.iv8, %24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %32, label %33, label %36, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_rect4.786"
EnablersManager:     Entry instruction =   %27 = icmp slt i64 %indvars.iv10, %25
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %27 = icmp slt i64 %indvars.iv10, %25"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %27, label %28, label %.loopexit.loopexit1, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %59, label %46, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond10 = icmp eq i64 %indvars.iv8, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond10, label %60, label %43, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra_chroma"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv5, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [4 x i32], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x i32], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
LoopDistribution: Success: Finished split of 
; Function Attrs: nounwind uwtable
define internal fastcc void @x264_mb_analyse_intra_chroma(%struct.x264_t* nocapture, %struct.x264_mb_analysis_t* nocapture) unnamed_addr #24 !prof !1388 !PGOFuncName !1389 {
  %3 = alloca i32, align 4
  %4 = alloca [4 x i32], align 16
  %5 = alloca [4 x i32], align 16
  %6 = alloca [4 x i32], align 16
  %7 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #17
  %8 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #17
  %9 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 16
  %10 = load i32, i32* %9, align 4, !tbaa !1268
  %11 = icmp slt i32 %10, 268435456
  br i1 %11, label %.._crit_edge_crit_edge, label %12, !prof !1390

.._crit_edge_crit_edge:                           ; preds = %2
  br label %._crit_edge

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 45, i32 56, i32 14, i64 1
  %14 = load i8*, i8** %13, align 8, !tbaa !37
  %15 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 45, i32 56, i32 14, i64 2
  %16 = load i8*, i8** %15, align 8, !tbaa !37
  %17 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 45, i32 56, i32 12, i64 1
  %18 = load i8*, i8** %17, align 8, !tbaa !37
  %19 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 45, i32 56, i32 12, i64 2
  %20 = load i8*, i8** %19, align 8, !tbaa !37
  %21 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 45, i32 23
  %22 = load i32, i32* %21, align 4, !tbaa !751
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  call fastcc void @predict_8x8chroma_mode_available(i32 %22, i32* nonnull %23, i32* nonnull %3)
  store i32 268435456, i32* %9, align 4, !tbaa !1268
  %24 = load i32, i32* %3, align 4, !tbaa !33
  %25 = icmp eq i32 %24, 4
  br i1 %25, label %26, label %.._crit_edge7_crit_edge, !prof !1334

.._crit_edge7_crit_edge:                          ; preds = %12
  br label %._crit_edge7

26:                                               ; preds = %12
  %27 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 52, i32 23
  %28 = load void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)** %27, align 8, !tbaa !1391
  %29 = icmp eq void (i8*, i8*, i32*)* %28, null
  br i1 %29, label %.._crit_edge7_crit_edge3, label %30, !prof !1392

.._crit_edge7_crit_edge3:                         ; preds = %26
  br label %._crit_edge7

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 52, i32 5, i64 0
  %32 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %31, align 8, !tbaa !37
  %33 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 52, i32 2, i64 0
  %34 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %33, align 8, !tbaa !37
  %35 = icmp eq i32 (i8*, i32, i8*, i32)* %32, %34
  br i1 %35, label %36, label %.._crit_edge7_crit_edge4, !prof !1393

.._crit_edge7_crit_edge4:                         ; preds = %30
  br label %._crit_edge7

36:                                               ; preds = %30
  %37 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #17
  %38 = bitcast [4 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #17
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  call void %28(i8* %18, i8* %14, i32* nonnull %39) #17, !prof !1335
  %40 = load void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)** %27, align 8, !tbaa !1391
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  call void %40(i8* %20, i8* %16, i32* nonnull %41) #17, !prof !1335
  %42 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 49, i64 3
  %43 = load void (i8*)*, void (i8*)** %42, align 8, !tbaa !37
  call void %43(i8* %14) #17, !prof !1394
  %44 = load void (i8*)*, void (i8*)** %42, align 8, !tbaa !37
  call void %44(i8* %16) #17, !prof !1394
  %45 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 52, i32 5, i64 3
  %46 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %45, align 8, !tbaa !37
  %47 = call i32 %46(i8* %14, i32 32, i8* %18, i32 16) #17, !prof !1335
  %48 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  store i32 %47, i32* %48, align 4, !tbaa !33
  %49 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %45, align 8, !tbaa !37
  %50 = call i32 %49(i8* %16, i32 32, i8* %20, i32 16) #17, !prof !1335
  %51 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 3
  store i32 %50, i32* %51, align 4, !tbaa !33
  %52 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 0
  %53 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 18
  %54 = load i32, i32* %52, align 16, !tbaa !1294
  %55 = load i32, i32* %9
  br label %56

56:                                               ; preds = %._crit_edge10, %36
  %indvars.iv5 = phi i64 [ %indvars.iv.next6, %._crit_edge10 ], [ 0, %36 ]
  %57 = phi i32 [ %73, %._crit_edge10 ], [ %55, %36 ]
  %exitcond = icmp eq i64 %indvars.iv5, 4
  br i1 %exitcond, label %136, label %58, !prof !1337

58:                                               ; preds = %56
  %59 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %indvars.iv5
  %60 = load i32, i32* %59, align 4, !tbaa !33
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %61
  %63 = load i32, i32* %62, align 4, !tbaa !33
  %64 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %61
  %65 = load i32, i32* %64, align 4, !tbaa !33
  %66 = add nsw i32 %63, %65
  %67 = call fastcc i32 @bs_size_ue(i32 %60)
  %68 = mul nsw i32 %54, %67
  %69 = add nsw i32 %66, %68
  %70 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 17, i64 %indvars.iv5
  store i32 %69, i32* %70, align 4, !tbaa !33
  %71 = icmp slt i32 %69, %57
  br i1 %71, label %72, label %.._crit_edge10_crit_edge, !prof !1395

.._crit_edge10_crit_edge:                         ; preds = %58
  br label %._crit_edge10

72:                                               ; preds = %58
  br label %._crit_edge10

._crit_edge10:                                    ; preds = %.._crit_edge10_crit_edge, %72
  %73 = phi i32 [ %57, %.._crit_edge10_crit_edge ], [ %69, %72 ]
  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 1
  br label %56

74:                                               ; preds = %118
  %.lcssa = phi i32 [ %120, %118 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #17
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #17
  store i32 %.lcssa, i32* %9
  br label %.loopexit

._crit_edge7:                                     ; preds = %.._crit_edge7_crit_edge4, %.._crit_edge7_crit_edge3, %.._crit_edge7_crit_edge
  %75 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 45, i32 63
  %76 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 52, i32 5, i64 3
  %77 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 0
  %78 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 18
  %79 = sext i32 %24 to i64
  br label %80

80:                                               ; preds = %._crit_edge11, %._crit_edge7
  %indvars.iv = phi i64 [ %indvars.iv.next, %._crit_edge11 ], [ 0, %._crit_edge7 ]
  %81 = icmp slt i64 %indvars.iv, %79
  br i1 %81, label %82, label %.loopexit.loopexit, !prof !1340

82:                                               ; preds = %80
  %83 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %indvars.iv
  %84 = load i32, i32* %83, align 4, !tbaa !33
  %85 = load i32, i32* %75, align 4, !tbaa !383
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %88, label %87, !prof !1341

87:                                               ; preds = %82
  tail call void @x264_predict_lossless_8x8_chroma(%struct.x264_t* %0, i32 %84)
  %.pre4 = sext i32 %84 to i64
  br label %93

88:                                               ; preds = %82
  %89 = sext i32 %84 to i64
  %90 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 49, i64 %89
  %91 = load void (i8*)*, void (i8*)** %90, align 8, !tbaa !37
  tail call void %91(i8* %14) #17, !prof !1396
  %92 = load void (i8*)*, void (i8*)** %90, align 8, !tbaa !37
  tail call void %92(i8* %16) #17, !prof !1396
  br label %93

93:                                               ; preds = %88, %87
  %.pre-phi = phi i64 [ %89, %88 ], [ %.pre4, %87 ]
  %94 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %76, align 8, !tbaa !37
  %95 = tail call i32 %94(i8* %14, i32 32, i8* %18, i32 16) #17, !prof !1343
  %96 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %76, align 8, !tbaa !37
  %97 = tail call i32 %96(i8* %16, i32 32, i8* %20, i32 16) #17, !prof !1343
  %98 = add nsw i32 %95, %97
  %99 = load i32, i32* %77, align 16, !tbaa !1294
  %100 = getelementptr inbounds [7 x i8], [7 x i8]* @x264_mb_pred_mode8x8c_fix.788, i64 0, i64 %.pre-phi
  %101 = load i8, i8* %100, align 1, !tbaa !39
  %102 = zext i8 %101 to i32
  %103 = tail call fastcc i32 @bs_size_ue(i32 %102)
  %104 = mul nsw i32 %99, %103
  %105 = add nsw i32 %98, %104
  %106 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 17, i64 %indvars.iv
  store i32 %105, i32* %106, align 4, !tbaa !33
  %107 = load i32, i32* %9, align 4, !tbaa !1268
  %108 = icmp slt i32 %105, %107
  br i1 %108, label %109, label %.._crit_edge11_crit_edge, !prof !1397

.._crit_edge11_crit_edge:                         ; preds = %93
  br label %._crit_edge11

109:                                              ; preds = %93
  store i32 %105, i32* %9, align 4, !tbaa !1268
  store i32 %84, i32* %78, align 8, !tbaa !1372
  br label %._crit_edge11

._crit_edge11:                                    ; preds = %.._crit_edge11_crit_edge, %109
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  br label %80

.loopexit.loopexit:                               ; preds = %80
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %74
  %110 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 18
  %111 = load i32, i32* %110, align 8, !tbaa !1372
  %112 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 45, i32 53
  store i32 %111, i32* %112, align 16, !tbaa !849
  br label %._crit_edge

._crit_edge:                                      ; preds = %.._crit_edge_crit_edge, %.loopexit
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #17
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #17
  ret void

113:                                              ; preds = %117, %116
  %114 = phi i32 [ %120, %117 ], [ %133, %116 ]
  %115 = add nuw nsw i64 %119, 1
  br label %118

116:                                              ; preds = %122
  store i32 %124, i32* %53, align 8, !tbaa !1372
  br label %113

117:                                              ; preds = %122
  br label %113

118:                                              ; preds = %135, %113
  %119 = phi i64 [ %115, %113 ], [ 0, %135 ]
  %120 = phi i32 [ %114, %113 ], [ %55, %135 ]
  %121 = icmp eq i64 %119, 4
  br i1 %121, label %74, label %122, !prof !1337

122:                                              ; preds = %118
  %123 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %119
  %124 = load i32, i32* %123, align 4, !tbaa !33
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %125
  %127 = load i32, i32* %126, align 4, !tbaa !33
  %128 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %125
  %129 = load i32, i32* %128, align 4, !tbaa !33
  %130 = add nsw i32 %127, %129
  %131 = call fastcc i32 @bs_size_ue(i32 %124)
  %132 = mul nsw i32 %54, %131
  %133 = add nsw i32 %130, %132
  %134 = icmp slt i32 %133, %120
  br i1 %134, label %116, label %117, !prof !1395

135:                                              ; preds = %136
  br label %118

136:                                              ; preds = %56
  br label %135
}

EnablersManager:       Distributed loop
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_load"
EnablersManager:     Entry instruction =   %exitcond8 = icmp eq i64 %indvars.iv18, %359
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond8, label %527, label %361, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %82 = icmp ult i64 %indvars.iv43, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %82 = icmp ult i64 %indvars.iv43, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %82, label %83, label %._crit_edge96.loopexit, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "predict_16x16_dc_sse2"
EnablersManager:     Entry instruction =   %3 = icmp ult i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %3 = icmp ult i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %3, label %4, label %17, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv65, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %48, !prof !75
Mem2Reg:   The loop has 2SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %44 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 7
Mem2Reg:     SCC:
Internal nodes: 4
	  %55 = load i32, i32* %44, align 4, !tbaa !76
	  %56 = icmp slt i32 %54, %55
	  br i1 %56, label %57, label %.._crit_edge72_crit_edge, !prof !77
	  store i32 %54, i32* %44, align 4, !tbaa !76
External nodes: 5
	  br i1 %exitcond, label %.loopexit.loopexit, label %48, !prof !75
	  %54 = add nsw i32 %53, %51
	  br label %._crit_edge72
	  store i32 %49, i32* %45, align 4, !tbaa !78
	  br label %._crit_edge72
Edges: 14

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %48
Mem2Reg:  checking for last value entering block: label %48
Mem2Reg:  Last value entering block: label %48	  %49 = phi i32 
Mem2Reg:  checking for last value entering block: label %50
Mem2Reg:  Last value entering block: label %50	  %49 = phi i32 
Mem2Reg:  checking for last value entering block: label %59
Mem2Reg:  Last value entering block: label %59	  %49 = phi i32 
Mem2Reg:  Value updated:   %56 = add nsw i32 %55, %53
Mem2Reg:  checking for last value entering block: label %.._crit_edge72_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge72_crit_edge	  %49 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge72
Mem2Reg:  Last value entering block: label %._crit_edge72	  %60 = phi i32 [ %49, %.._crit_edge72_crit_edge ], [ %56, %59 ]
Mem2Reg:  Removing
  %57 = load i32, i32* %44, align 4, !tbaa !76
Mem2Reg:  Removing
  store i32 %56, i32* %44, align 4, !tbaa !77
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "x264_cabac_encode_ue_bypass"
EnablersManager:     Entry instruction =   %25 = sub nsw i32 %.1, %.0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %25 = sub nsw i32 %.1, %.0"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %35, label %._crit_edge.._crit_edge_crit_edge, label %36, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.543815e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.893603e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.014987e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.414749e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.780531e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1" (7.500883e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.837712e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.086145e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.489098e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.400871e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.858179e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.335722e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.676487e-04%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.017826e-03%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.676487e-04%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.485839e-03%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.402774e-04%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.566887e-03%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.515983e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.801703e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.070284e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.215197e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.468866e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.009839e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.115373e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.337501e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.247430e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.578649e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.953993e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.773030e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.574684e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.112661e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.096313e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.005124e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.240324e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.397115e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.762129e-02%)
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.776157e-03%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.814560e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.515250e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.287870e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.241668e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.536513e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.734138e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.471601e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.179113e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.482481e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.296589e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.037955e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.142607e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.051259e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.816530e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.039289e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.819069e-02%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %66 = icmp slt i64 %indvars.iv67, %64" (6.567338e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.148807e-01%)
Noelle:     Loop "  %141 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %171 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %186 = icmp slt i64 %indvars.iv61, %184" (0.000000e+00%)
Noelle:     Loop "  %295 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.753976e+00%)
Noelle:     Loop "  %332 = icmp sgt i64 %indvars.iv, -1" (9.673762e-01%)
Noelle:     Loop "  %345 = icmp slt i64 %indvars.iv55, %343" (3.730227e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.125736e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.035817e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.538607e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.158905e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.498041e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.407489e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.078694e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.094870e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.914031e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.354884e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.756219e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.735984e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.659518e-02%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.443379e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.274761e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.952400e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.976294e-02%)
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.520429e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.238769e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.890269e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.089270e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.735766e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.029796e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.202714e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.054933e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.883445e-01%)
Noelle:     Loop "  %96 = icmp slt i64 %indvars.iv16, %95" (3.882898e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.301680e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.014921e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.611806e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.988272e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.652365e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.309421e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.537735e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.052297e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.552378e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.487393e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.410220e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.448862e-02%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.073327e-03%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.175332e-01%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.433790e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.932843e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.219490e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.477399e-01%)
Noelle:     Loop "  %81 = icmp slt i64 %indvars.iv, %79" (7.399673e-03%)
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.976362e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.659917e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.040919e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.962083e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.343409e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.247287e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.472824e-02%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.118961e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.496136e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.499020e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.018875e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.708587e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.408647e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.408647e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.757061e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.792882e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.565952e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.100648e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.100648e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.350852e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.350852e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.015923e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.749641e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.675900e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.983590e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.948571e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.380932e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.348910e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.446444e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.922816e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.559326e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.714871e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.809915e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %54 = icmp sgt i32 %53, 65535" (0.000000e+00%)
Noelle:     Loop "  %227 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (4.243206e-06%)
Noelle:     Loop "  %332 = load i32, i32* %330, align 4, !tbaa !83" (3.620483e-08%)
Noelle:     Loop "  %340 = sext i32 %339 to i64" (3.338085e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %Pivot5 = icmp ult i64 %indvars.iv16, 14" (8.897655e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.369358e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.393117e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.518138e-03%)
Noelle:     Loop "  %7 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.478451e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.642794e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.786210e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.209852e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.141009e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.918566e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.502478e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.199756e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.176947e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (8.963302e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.606220e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count" (1.562658e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.251194e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.620483e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.937592e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.801439e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.194759e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.574095e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.285031e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.694250e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.559568e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.512348e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.504093e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.115964e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.017776e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (5.978141e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.411106e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.689159e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.710678e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.279655e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.101839e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.777544e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.083158e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.206978e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.414002e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.266721e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.070287e-04%)
Noelle:     Loop "  %49 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %62, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp slt i64 %indvars.iv, %72" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.234684e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.159546e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.375783e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.037472e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.428642e-05%)
Noelle:     Loop "  %Pivot = icmp ult i64 %indvars.iv58, 17" (1.417781e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.335958e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.323648e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.219379e-05%)
Noelle:     Loop "  %396 = icmp sgt i64 %indvars.iv44, %394" (5.720363e-07%)
Noelle:     Loop "  %504 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.620483e-08%)
Noelle:     Loop "  %516 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.620483e-08%)
Noelle:     Loop "  %528 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.543339e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.232630e-04%)
Noelle:     Loop "  %553 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.723938e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.177091e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.309868e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.309868e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.054407e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (1.998144e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.377910e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.306225e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.471930e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.639173e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.567669e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.481411e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.063539e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.148236e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.882651e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.925350e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.388681e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.949177e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.487905e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.714615e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.532890e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.737809e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.244699e-07%)
Noelle:     Loop "  %163 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.471930e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.585025e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.288145e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.990519e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %183 = sext i32 %182 to i64" (0.000000e+00%)
Noelle:     Loop "  %319 = add nsw i32 %318, 2" (5.380037e-06%)
Noelle:     Loop "  %323 = add nsw i32 %322, 2" (4.062182e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %370 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %352 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.833231e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.527120e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.055687e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.209241e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.207793e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.055687e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.633471e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.426470e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.837712e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.896386e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.720363e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.611748e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.634218e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.367049e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.544339e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (9.992532e-07%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (8.544339e-07%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %441 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %474 = icmp slt i64 %indvars.iv57, %470" (0.000000e+00%)
Noelle:     Loop "  %491 = icmp slt i32 %.36, %490" (0.000000e+00%)
Noelle:     Loop "  %574 = load i32, i32* %7, align 4, !tbaa !30" (1.448193e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.847713e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.154821e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.923857e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.982531e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.692892e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.982531e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.534338e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.779037e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.792772e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %Pivot17 = icmp slt i8 %11, 80" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i32 %.02, %12" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %218 = icmp slt i64 %indvars.iv84, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %197 = icmp slt i64 %indvars.iv90, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %248 = icmp slt i64 %indvars.iv92, %.pre-phi30" (0.000000e+00%)
Noelle:     Loop "  %286 = icmp slt i64 %indvars.iv, %284" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %8 = icmp slt i64 %indvars.iv, %6" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %23" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %153" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in1, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %210" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us15 = icmp ult i64 %indvars.iv24.us14, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us = icmp ult i64 %indvars.iv24.us9, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv24.us, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (2.569800e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us.us = icmp eq i64 %indvars.iv69.us.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %483 = icmp slt i64 %indvars.iv, %481" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.386528e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.528184e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw i32 %60, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %71" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv, %70" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.545274e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.894743e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.013841e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.406375e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.777391e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1" (7.502468e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.833378e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.084918e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.490697e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.397031e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.854952e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.334214e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.666689e-04%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.016677e-03%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.666689e-04%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.484161e-03%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.396673e-04%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.565118e-03%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.514271e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.799669e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.069076e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.213824e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.467207e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.008699e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.114114e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.335990e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.242634e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.567832e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.947269e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.767640e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.566130e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.111404e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.095075e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.003989e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.237794e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.395537e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.759010e-02%)
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.773022e-03%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.806865e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.513538e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.286415e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.240265e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.526873e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.726533e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.465422e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.171006e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.476290e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.289479e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.028878e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.139058e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.043297e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.813349e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.035857e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.811369e-02%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %68 = icmp slt i64 %indvars.iv67, %66" (6.559922e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.180310e-01%)
Noelle:     Loop "  %143 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv61, %186" (0.000000e+00%)
Noelle:     Loop "  %297 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.744090e+00%)
Noelle:     Loop "  %334 = icmp sgt i64 %indvars.iv, -1" (9.662838e-01%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv55, %345" (3.726014e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.123335e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.030130e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.535740e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.156467e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.496349e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.405899e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.077476e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.084599e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.909611e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.351096e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.754236e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.734024e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.650868e-02%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.437232e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.268804e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.946808e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.968416e-02%)
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.514195e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.232853e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.884746e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.084652e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.730418e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.028633e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.199097e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.049225e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.880189e-01%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv16, %95" (3.808844e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.299081e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.013775e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.605469e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.982639e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.650499e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.307943e-01%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.443838e-02%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.070986e-03%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.531481e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.049979e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.550625e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.482325e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.402981e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.169488e-01%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.431042e-01%)
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.450729e-01%)
Noelle:     Loop "  %121 = icmp eq i64 %119, 4" (1.375680e-01%)
Noelle:     Loop "  %81 = icmp slt i64 %indvars.iv, %79" (7.391317e-03%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.928401e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.215854e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.971871e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.651267e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.039744e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.959868e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.341891e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.245878e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.467773e-02%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.116568e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.486542e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.491681e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.012078e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.705529e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.407056e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.407056e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.751689e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.787469e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.560795e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.098275e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.098275e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.348197e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.348197e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.011388e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.746536e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.666103e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.981350e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.945241e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.379372e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.347387e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.444810e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.919516e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.555306e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.712934e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.806741e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %54 = icmp sgt i32 %53, 65535" (0.000000e+00%)
Noelle:     Loop "  %227 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (4.238414e-06%)
Noelle:     Loop "  %332 = load i32, i32* %330, align 4, !tbaa !83" (3.616394e-08%)
Noelle:     Loop "  %340 = sext i32 %339 to i64" (3.334315e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %Pivot5 = icmp ult i64 %indvars.iv16, 14" (8.887607e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.364424e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.390415e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.513036e-03%)
Noelle:     Loop "  %7 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.474523e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.631904e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.777417e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.202839e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.138591e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.916400e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.499652e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.198401e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.175617e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (8.953179e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.604406e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count" (1.560894e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.247522e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.616394e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.930886e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.793758e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.193410e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.567801e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.282451e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.685561e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.551031e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.510640e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.502395e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.106799e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.008722e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (5.971390e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.401607e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.679346e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.708746e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.272563e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.096078e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.769890e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.077417e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.201098e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.404500e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.257385e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.069078e-04%)
Noelle:     Loop "  %49 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %62, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp slt i64 %indvars.iv, %72" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.231031e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.157107e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.374230e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.028395e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.427029e-05%)
Noelle:     Loop "  %Pivot = icmp ult i64 %indvars.iv58, 17" (1.416180e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.334449e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.322154e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.218002e-05%)
Noelle:     Loop "  %396 = icmp sgt i64 %indvars.iv44, %394" (5.713903e-07%)
Noelle:     Loop "  %504 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.616394e-08%)
Noelle:     Loop "  %516 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.616394e-08%)
Noelle:     Loop "  %528 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.541597e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.231238e-04%)
Noelle:     Loop "  %553 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.715215e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.175762e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.307260e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.307260e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.052087e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (1.995888e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.374096e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.302491e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.462362e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.628288e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.565899e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.475221e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.054433e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.137905e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.880525e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.922047e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.380337e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.942459e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.480578e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.710420e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.530029e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.734717e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.242164e-07%)
Noelle:     Loop "  %163 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.462362e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.582105e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.285561e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.987142e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %183 = sext i32 %182 to i64" (0.000000e+00%)
Noelle:     Loop "  %319 = add nsw i32 %318, 2" (5.373962e-06%)
Noelle:     Loop "  %323 = add nsw i32 %322, 2" (4.057594e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %370 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %352 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.822127e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.525395e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.052237e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.207876e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.206429e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.052237e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.627109e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.424859e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.833378e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.893115e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.713903e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.605411e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.628985e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.363247e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.534690e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (9.981248e-07%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (8.534690e-07%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %441 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %474 = icmp slt i64 %indvars.iv57, %470" (0.000000e+00%)
Noelle:     Loop "  %491 = icmp slt i32 %.36, %490" (0.000000e+00%)
Noelle:     Loop "  %574 = load i32, i32* %7, align 4, !tbaa !30" (1.446558e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.836592e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.147870e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.918296e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.978034e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.688722e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.978034e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.531476e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.773640e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.786231e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %Pivot17 = icmp slt i8 %11, 80" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i32 %.02, %12" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %218 = icmp slt i64 %indvars.iv84, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %197 = icmp slt i64 %indvars.iv90, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %248 = icmp slt i64 %indvars.iv92, %.pre-phi30" (0.000000e+00%)
Noelle:     Loop "  %286 = icmp slt i64 %indvars.iv, %284" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %8 = icmp slt i64 %indvars.iv, %6" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %23" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %153" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in1, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %210" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us15 = icmp ult i64 %indvars.iv24.us14, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us = icmp ult i64 %indvars.iv24.us9, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv24.us, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (2.566898e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us.us = icmp eq i64 %indvars.iv69.us.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %483 = icmp slt i64 %indvars.iv, %481" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.384963e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.526458e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw i32 %60, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %71" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv, %70" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
NOELLE: FixedPoint:       There are 16 different instructions and 13 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.iiTBei7fYA -o /tmp/tmp.iiTBei7fYA
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.iiTBei7fYA -o /tmp/tmp.iiTBei7fYA
NOELLE: FixedPoint:     Invocation 2
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.545256e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.894729e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.013828e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.406283e-06%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.777356e-06%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1" (7.502451e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.833330e-06%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.084905e-07%)
Noelle:  Disable loop "7" as cold code
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.490680e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.396988e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.854916e-02%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.334197e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.666580e-04%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.016664e-03%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.666580e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.484142e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.396605e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.565098e-03%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "21" as cold code
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.514252e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.799646e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.069062e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.213809e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.467189e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.008686e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.114100e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.335974e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.242581e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.567712e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.947194e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.767581e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:  Disable loop "55" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.566035e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.111391e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:  Disable loop "58" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:  Disable loop "60" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:  Disable loop "61" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.095061e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.003977e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.237766e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.395520e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:  Disable loop "66" as cold code
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:  Disable loop "67" as cold code
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:  Disable loop "68" as cold code
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.758976e-02%)
Noelle:  Disable loop "69" as cold code
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.772987e-03%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.806780e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.513520e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.286399e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.240250e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:  Disable loop "75" as cold code
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.526766e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:  Disable loop "77" as cold code
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:  Disable loop "78" as cold code
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:  Disable loop "79" as cold code
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:  Disable loop "80" as cold code
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:  Disable loop "81" as cold code
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:  Disable loop "82" as cold code
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:  Disable loop "83" as cold code
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:  Disable loop "84" as cold code
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:  Disable loop "85" as cold code
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:  Disable loop "87" as cold code
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:  Disable loop "88" as cold code
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.726449e-02%)
Noelle:  Disable loop "89" as cold code
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.465353e-02%)
Noelle:  Disable loop "90" as cold code
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.170916e-02%)
Noelle:  Disable loop "91" as cold code
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.476221e-02%)
Noelle:  Disable loop "92" as cold code
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.289400e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.028778e-02%)
Noelle:  Disable loop "94" as cold code
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.139019e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.043208e-02%)
Noelle:  Disable loop "96" as cold code
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.813314e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.035819e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:  Disable loop "99" as cold code
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.811283e-02%)
Noelle:  Disable loop "100" as cold code
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %68 = icmp slt i64 %indvars.iv67, %66" (6.559840e-03%)
Noelle:  Disable loop "101" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.180295e-01%)
Noelle:     Loop "  %143 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:  Disable loop "103" as cold code
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:  Disable loop "104" as cold code
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv61, %186" (0.000000e+00%)
Noelle:  Disable loop "105" as cold code
Noelle:     Loop "  %297 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.743981e+00%)
Noelle:     Loop "  %334 = icmp sgt i64 %indvars.iv, -1" (9.662717e-01%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv55, %345" (3.725968e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:  Disable loop "109" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "110" as cold code
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.123309e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:  Disable loop "112" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.030067e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.535709e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.156440e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.496331e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Disable loop "117" as cold code
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:  Disable loop "118" as cold code
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:  Disable loop "119" as cold code
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.405882e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.077462e-03%)
Noelle:  Disable loop "121" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.084486e-04%)
Noelle:  Disable loop "122" as cold code
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.909563e-03%)
Noelle:  Disable loop "123" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.351054e-03%)
Noelle:  Disable loop "124" as cold code
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.754214e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Disable loop "126" as cold code
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.734002e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "128" as cold code
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.650772e-02%)
Noelle:  Disable loop "129" as cold code
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.437164e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.268738e-02%)
Noelle:  Disable loop "131" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.946746e-02%)
Noelle:  Disable loop "132" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:  Disable loop "133" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.968328e-02%)
Noelle:  Disable loop "134" as cold code
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.514126e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.232788e-02%)
Noelle:  Disable loop "136" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.884685e-02%)
Noelle:  Disable loop "137" as cold code
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.084600e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.730359e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:  Disable loop "140" as cold code
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.028620e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.199057e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.049162e-02%)
Noelle:  Disable loop "143" as cold code
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:  Disable loop "144" as cold code
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.880153e-01%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv16, %95" (3.808797e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.299052e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:  Disable loop "148" as cold code
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:  Disable loop "149" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "150" as cold code
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.013762e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.605399e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.982577e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.650479e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.307926e-01%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "156" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Disable loop "157" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.443783e-02%)
Noelle:  Disable loop "158" as cold code
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.070960e-03%)
Noelle:  Disable loop "159" as cold code
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Disable loop "160" as cold code
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:  Disable loop "161" as cold code
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.531412e-02%)
Noelle:  Disable loop "162" as cold code
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:  Disable loop "163" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.049953e-02%)
Noelle:  Disable loop "164" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.550606e-02%)
Noelle:  Disable loop "165" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.482269e-02%)
Noelle:  Disable loop "166" as cold code
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:  Disable loop "167" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.402901e-02%)
Noelle:  Disable loop "168" as cold code
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:  Disable loop "169" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "170" as cold code
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.169423e-01%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.431011e-01%)
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.450711e-01%)
Noelle:     Loop "  %120 = icmp eq i64 %118, 4" (1.375663e-01%)
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (7.391224e-03%)
Noelle:  Disable loop "175" as cold code
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.928352e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.215814e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Disable loop "178" as cold code
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:  Disable loop "179" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.971822e-02%)
Noelle:  Disable loop "180" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "181" as cold code
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.651171e-02%)
Noelle:  Disable loop "182" as cold code
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.039731e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.959843e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.341875e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:  Disable loop "186" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Disable loop "187" as cold code
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:  Disable loop "188" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Disable loop "189" as cold code
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.245863e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.467717e-02%)
Noelle:  Disable loop "191" as cold code
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.116541e-02%)
Noelle:  Disable loop "192" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.486436e-03%)
Noelle:  Disable loop "193" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.491600e-03%)
Noelle:  Disable loop "194" as cold code
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:  Disable "x264_cabac_mb_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Disable "x264_cabac_mb_cbp_chroma" as cold function
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Disable "x264_macroblock_cache_ref.799" as cold function
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Disable "zigzag_scan_2x2_dc" as cold function
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Disable "x264_cabac_encode_terminal" as cold function
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Disable "x264_macroblock_cache_mvd" as cold function
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:  Disable "x264_macroblock_cache_rect1.801" as cold function
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Disable "x264_cabac_encode_renorm" as cold function
Noelle:  Function "predict_4x4_h"
Noelle:  Disable "predict_4x4_h" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1019" as cold function
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Disable "x264_cabac_pos.1016" as cold function
Noelle:  Function "bs_size_ue"
Noelle:  Disable "bs_size_ue" as cold function
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:  Disable "predict_8x8c_dc_left.1111" as cold function
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Disable "x264_mb_predict_mv" as cold function
Noelle:  Function "x264_ratecontrol_mb"
Noelle:  Disable "x264_ratecontrol_mb" as cold function
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Disable "x264_cabac_mb_type_intra.1056" as cold function
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:  Disable "x264_cabac_mb_mvd_cpn.1048" as cold function
Noelle:  Function "plane_expand_border"
Noelle:  Disable "plane_expand_border" as cold function
Noelle:  Function "bs_size_ue_big"
Noelle:  Disable "bs_size_ue_big" as cold function
Noelle:  Function "x264_cabac_pos"
Noelle:  Disable "x264_cabac_pos" as cold function
Noelle:  Function "predict_4x4_v"
Noelle:  Disable "predict_4x4_v" as cold function
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:  Disable "predict_16x16_dc_left.1108" as cold function
Noelle:  Function "mc_luma_sse2"
Noelle:  Disable "mc_luma_sse2" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Disable "x264_macroblock_cache_mvd.1052" as cold function
Noelle:  Function "bs_size_te"
Noelle:  Disable "bs_size_te" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:  Disable "x264_macroblock_cache_rect4.1053" as cold function
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Disable "x264_cabac_mb_intra_chroma_pred_mode.1023" as cold function
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:  Disable "x264_cabac_mb_qp_delta.1035" as cold function
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Disable "x264_predictor_difference_mmxext" as cold function
Noelle:  Function "bs_pos"
Noelle:  Disable "bs_pos" as cold function
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Disable "x264_mb_predict_mv_pskip" as cold function
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:  Disable "x264_bitstream_check_buffer" as cold function
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Disable "x264_cabac_mb_cbp_luma.1032" as cold function
Noelle:  Function "x264_cabac_mb_ref"
Noelle:  Disable "x264_cabac_mb_ref" as cold function
Noelle:  Function "x264_frame_expand_border"
Noelle:  Disable "x264_frame_expand_border" as cold function
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:  Disable "predict_8x8c_dc_top.1112" as cold function
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:  Disable "x264_frame_expand_border_filtered" as cold function
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Disable "x264_cabac_mb_intra4x4_pred_mode.1022" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:  Disable "x264_mb_transform_8x8_allowed" as cold function
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Disable "x264_median_mv_mmxext" as cold function
Noelle:  Function "sum_sa8d"
Noelle:  Disable "sum_sa8d" as cold function
Noelle:  Function "sum_satd"
Noelle:  Disable "sum_satd" as cold function
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Disable "x264_cabac_mb_skip" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Disable "x264_cabac_mb_cbp_chroma.1033" as cold function
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:  Disable "x264_mb_analyse_load_costs" as cold function
Noelle:  Function "x264_cabac_context_init"
Noelle:  Disable "x264_cabac_context_init" as cold function
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Disable "predict_16x16_mode_available" as cold function
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Disable "predict_8x8chroma_mode_available" as cold function
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Disable "x264_macroblock_encode_pskip" as cold function
Noelle:  Function "pack16to32_mask.829"
Noelle:  Disable "pack16to32_mask.829" as cold function
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:  Disable "x264_cabac_mb_ref.1024" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1034" as cold function
Noelle:  Function "x264_encoder_open"
Noelle:  Disable "x264_encoder_open" as cold function
Noelle:  Function "x264_clip3.664"
Noelle:  Disable "x264_clip3.664" as cold function
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Disable "predict_4x4_dc_left" as cold function
Noelle:  Function "x264_rdo_init"
Noelle:  Disable "x264_rdo_init" as cold function
Noelle:  Function "x264_clip3.813"
Noelle:  Disable "x264_clip3.813" as cold function
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Disable "x264_mb_analyse_transform_rd" as cold function
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Disable "x264_ratecontrol_qp" as cold function
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Disable "predict_4x4_dc_top" as cold function
Noelle:  Function "x264_clip3.748"
Noelle:  Disable "x264_clip3.748" as cold function
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Disable "x264_macroblock_encode_skip" as cold function
Noelle:  Function "x264_encoder_frame_end"
Noelle:  Disable "x264_encoder_frame_end" as cold function
Noelle:  Function "pack16to32_mask.785"
Noelle:  Disable "pack16to32_mask.785" as cold function
Noelle:  Function "x264_frame_filter"
Noelle:  Disable "x264_frame_filter" as cold function
Noelle:  Function "x264_clip3.1001"
Noelle:  Disable "x264_clip3.1001" as cold function
Noelle:  Function "bs_size_se"
Noelle:  Disable "bs_size_se" as cold function
Noelle:  Function "x264_noise_reduction_update"
Noelle:  Disable "x264_noise_reduction_update" as cold function
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Disable "pack16to32_mask.1051" as cold function
Noelle:  Function "x264_cqm_init"
Noelle:  Disable "x264_cqm_init" as cold function
Noelle:  Function "x264_reference_build_list"
Noelle:  Disable "x264_reference_build_list" as cold function
Noelle:  Function "x264_slice_header_write"
Noelle:  Disable "x264_slice_header_write" as cold function
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Disable "x264_cabac_size_decision2" as cold function
Noelle:  Function "predict_8x8c_dc_128"
Noelle:  Disable "predict_8x8c_dc_128" as cold function
Noelle:  Function "predict_16x16_dc_128"
Noelle:  Disable "predict_16x16_dc_128" as cold function
Noelle:  Function "pack8to32"
Noelle:  Disable "pack8to32" as cold function
Noelle:  Function "x264_slice_init"
Noelle:  Disable "x264_slice_init" as cold function
Noelle:  Function "bs_write_ue_big"
Noelle:  Disable "bs_write_ue_big" as cold function
Noelle:  Function "bs_write"
Noelle:  Disable "bs_write" as cold function
Noelle:  Function "x264_macroblock_slice_init"
Noelle:  Disable "x264_macroblock_slice_init" as cold function
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:  Disable "x264_frame_expand_border_mod16" as cold function
Noelle:  Function "x264_encoder_close"
Noelle:  Disable "x264_encoder_close" as cold function
Noelle:  Function "x264_reference_update"
Noelle:  Disable "x264_reference_update" as cold function
Noelle:  Function "x264_frame_delete"
Noelle:  Disable "x264_frame_delete" as cold function
Noelle:  Function "x264_slice_header_init"
Noelle:  Disable "x264_slice_header_init" as cold function
Noelle:  Function "x264_ratecontrol_start"
Noelle:  Disable "x264_ratecontrol_start" as cold function
Noelle:  Function "x264_ratecontrol_end"
Noelle:  Disable "x264_ratecontrol_end" as cold function
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:  Disable "setup_inverse_delta_pocs" as cold function
Noelle:  Function "bs_write_se"
Noelle:  Disable "bs_write_se" as cold function
Noelle:  Function "x264_cabac_encode_flush"
Noelle:  Disable "x264_cabac_encode_flush" as cold function
Noelle:  Function "x264_frame_copy_picture"
Noelle:  Disable "x264_frame_copy_picture" as cold function
Noelle:  Function "bs_write.943"
Noelle:  Disable "bs_write.943" as cold function
Noelle:  Function "x264_frame_shift"
Noelle:  Disable "x264_frame_shift" as cold function
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Disable "x264_frame_pop_unused" as cold function
Noelle:  Function "x264_free"
Noelle:  Disable "x264_free" as cold function
Noelle:  Function "x264_sei_version_write"
Noelle:  Disable "x264_sei_version_write" as cold function
Noelle:  Function "x264_frame_push"
Noelle:  Disable "x264_frame_push" as cold function
Noelle:  Function "read_frame_y4m"
Noelle:  Disable "read_frame_y4m" as cold function
Noelle:  Function "x264_sps_write"
Noelle:  Disable "x264_sps_write" as cold function
Noelle:  Function "bs_align_1"
Noelle:  Disable "bs_align_1" as cold function
Noelle:  Function "x264_slicetype_decide"
Noelle:  Disable "x264_slicetype_decide" as cold function
Noelle:  Function "x264_nal_end"
Noelle:  Disable "x264_nal_end" as cold function
Noelle:  Function "x264_frame_push_unused"
Noelle:  Disable "x264_frame_push_unused" as cold function
Noelle:  Function "x264_nal_start"
Noelle:  Disable "x264_nal_start" as cold function
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Disable "bs_write_ue_big.944" as cold function
Noelle:  Function "bs_write1"
Noelle:  Disable "bs_write1" as cold function
Noelle:  Function "bs_init"
Noelle:  Disable "bs_init" as cold function
Noelle:  Function "x264_frame_pop"
Noelle:  Disable "x264_frame_pop" as cold function
Noelle:  Function "bs_flush"
Noelle:  Disable "bs_flush" as cold function
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Disable "predict_4x4_dc_128" as cold function
Noelle:  Function "Parse"
Noelle:  Disable "Parse" as cold function
Noelle:  Function "x264_pps_write"
Noelle:  Disable "x264_pps_write" as cold function
Noelle:  Function "get_zone"
Noelle:  Disable "get_zone" as cold function
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Disable "x264_cabac_encode_init" as cold function
Noelle:  Function "x264_frame_new"
Noelle:  Disable "x264_frame_new" as cold function
Noelle:  Function "x264_param_parse"
Noelle:  Disable "x264_param_parse" as cold function
Noelle:  Function "update_vbv"
Noelle:  Disable "update_vbv" as cold function
Noelle:  Function "x264_validate_parameters"
Noelle:  Disable "x264_validate_parameters" as cold function
Noelle:  Function "x264_dct_init_weights"
Noelle:  Disable "x264_dct_init_weights" as cold function
Noelle:  Function "x264_log"
Noelle:  Disable "x264_log" as cold function
Noelle:  Function "x264_reference_reset"
Noelle:  Disable "x264_reference_reset" as cold function
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Disable "x264_thread_sync_stat" as cold function
Noelle:  Function "endian_fix"
Noelle:  Disable "endian_fix" as cold function
Noelle:  Function "x264_validate_levels"
Noelle:  Disable "x264_validate_levels" as cold function
Noelle:  Function "x264_clip3.848"
Noelle:  Disable "x264_clip3.848" as cold function
Noelle:  Function "bs_write1.946"
Noelle:  Disable "bs_write1.946" as cold function
Noelle:  Function "open_file_y4m"
Noelle:  Disable "open_file_y4m" as cold function
Noelle:  Function "x264_macroblock_cache_end"
Noelle:  Disable "x264_macroblock_cache_end" as cold function
Noelle:  Function "write_nalu_bsf"
Noelle:  Disable "write_nalu_bsf" as cold function
Noelle:  Function "bs_write_se.945"
Noelle:  Disable "bs_write_se.945" as cold function
Noelle:  Function "x264_sps_init"
Noelle:  Disable "x264_sps_init" as cold function
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Disable "bs_rbsp_trailing.947" as cold function
Noelle:  Function "x264_cqm_delete"
Noelle:  Disable "x264_cqm_delete" as cold function
Noelle:  Function "bs_write32"
Noelle:  Disable "bs_write32" as cold function
Noelle:  Function "x264_ratecontrol_new"
Noelle:  Disable "x264_ratecontrol_new" as cold function
Noelle:  Function "x264_malloc"
Noelle:  Disable "x264_malloc" as cold function
Noelle:  Function "x264_pixel_init"
Noelle:  Disable "x264_pixel_init" as cold function
Noelle:  Function "x264_macroblock_cache_init"
Noelle:  Disable "x264_macroblock_cache_init" as cold function
Noelle:  Function "endian_fix.949"
Noelle:  Disable "endian_fix.949" as cold function
Noelle:  Function "x264_param_default"
Noelle:  Disable "x264_param_default" as cold function
Noelle:  Function "bs_flush.948"
Noelle:  Disable "bs_flush.948" as cold function
Noelle:  Function "x264_param2string"
Noelle:  Disable "x264_param2string" as cold function
Noelle:  Function "x264_cpu_detect"
Noelle:  Disable "x264_cpu_detect" as cold function
Noelle:  Function "x264_mc_init"
Noelle:  Disable "x264_mc_init" as cold function
Noelle:  Function "set_eop_bsf"
Noelle:  Disable "set_eop_bsf" as cold function
Noelle:  Function "x264_pps_init"
Noelle:  Disable "x264_pps_init" as cold function
Noelle:  Function "x264_clip3.593"
Noelle:  Disable "x264_clip3.593" as cold function
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Disable "x264_mc_init_mmx" as cold function
Noelle:  Function "x264_quant_init"
Noelle:  Disable "x264_quant_init" as cold function
Noelle:  Function "parse_enum"
Noelle:  Disable "parse_enum" as cold function
Noelle:  Function "qp2qscale"
Noelle:  Disable "qp2qscale" as cold function
Noelle:  Function "x264_frame_sort"
Noelle:  Disable "x264_frame_sort" as cold function
Noelle:  Function "x264_atobool"
Noelle:  Disable "x264_atobool" as cold function
Noelle:  Function "x264_atoi"
Noelle:  Disable "x264_atoi" as cold function
Noelle:  Function "mbcmp_init"
Noelle:  Disable "mbcmp_init" as cold function
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Disable "x264_predict_8x8_init" as cold function
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Disable "x264_predict_16x16_init" as cold function
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Disable "x264_predict_4x4_init" as cold function
Noelle:  Function "x264_dct_init"
Noelle:  Disable "x264_dct_init" as cold function
Noelle:  Function "x264_ratecontrol_delete"
Noelle:  Disable "x264_ratecontrol_delete" as cold function
Noelle:  Function "x264_reduce_fraction"
Noelle:  Disable "x264_reduce_fraction" as cold function
Noelle:  Function "x264_zigzag_init"
Noelle:  Disable "x264_zigzag_init" as cold function
Noelle:  Function "x264_print_intra"
Noelle:  Disable "x264_print_intra" as cold function
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Disable "x264_predict_8x8c_init" as cold function
Noelle:  Function "x264_picture_alloc"
Noelle:  Disable "x264_picture_alloc" as cold function
Noelle:  Function "get_frame_total_y4m"
Noelle:  Disable "get_frame_total_y4m" as cold function
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Disable "x264_predict_16x16_init_mmx" as cold function
Noelle:  Function "x264_deblock_init"
Noelle:  Disable "x264_deblock_init" as cold function
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Disable "x264_predict_8x8_init_mmx" as cold function
Noelle:  Function "x264_mdate"
Noelle:  Disable "x264_mdate" as cold function
Noelle:  Function "endian_fix32"
Noelle:  Disable "endian_fix32" as cold function
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Disable "x264_predict_8x8c_init_mmx" as cold function
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Disable "x264_predict_4x4_init_mmx" as cold function
Noelle:  Function "x264_clip3f"
Noelle:  Disable "x264_clip3f" as cold function
Noelle:  Function "parse_zones"
Noelle:  Disable "parse_zones" as cold function
Noelle:  Function "x264_picture_clean"
Noelle:  Disable "x264_picture_clean" as cold function
Noelle:  Function "close_file_bsf"
Noelle:  Disable "close_file_bsf" as cold function
Noelle:  Function "close_file_y4m"
Noelle:  Disable "close_file_y4m" as cold function
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Disable "x264_ratecontrol_summary" as cold function
Noelle:  Function "open_file_bsf"
Noelle:  Disable "open_file_bsf" as cold function
Noelle:  Function "x264_clip3"
Noelle:  Disable "x264_clip3" as cold function
Noelle:  Function "set_param_bsf"
Noelle:  Disable "set_param_bsf" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3" as cold function
Noelle:  Function "row_bits_so_far"
Noelle:  Disable "row_bits_so_far" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Disable "x264_macroblock_cache_mvd.842" as cold function
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:  Disable "x264_slicetype_mb_cost" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3" as cold function
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Disable "x264_median_mv_mmxext.824" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x8_sse2" as cold function
Noelle:  Function "accum_p_qp_update"
Noelle:  Disable "accum_p_qp_update" as cold function
Noelle:  Function "update_predictor"
Noelle:  Disable "update_predictor" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x4_ssse3" as cold function
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Disable "x264_me_refine_qpel" as cold function
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Disable "x264_me_refine_bidir_satd" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x4_ssse3" as cold function
Noelle:  Function "x264_me_refine_bidir"
Noelle:  Disable "x264_me_refine_bidir" as cold function
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Disable "x264_me_refine_bidir_rd" as cold function
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:  Disable "x264_me_refine_qpel_rd" as cold function
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Disable "x264_macroblock_cache_mv.841" as cold function
Noelle:  Function "x264_rc_analyse_slice"
Noelle:  Disable "x264_rc_analyse_slice" as cold function
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:  Disable "predict_16x16_p_mmxext" as cold function
Noelle:  Function "x264_clip3f.856"
Noelle:  Disable "x264_clip3f.856" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x4_mmxext" as cold function
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Disable "x264_partition_i4x4_size_cabac" as cold function
Noelle:  Function "ac_energy_mb"
Noelle:  Disable "ac_energy_mb" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x8_mmxext" as cold function
Noelle:  Function "x264_adaptive_quant"
Noelle:  Disable "x264_adaptive_quant" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x4_mmxext" as cold function
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Disable "cavlc_intra4x4_pred_size" as cold function
Noelle:  Function "predict_size"
Noelle:  Disable "predict_size" as cold function
Noelle:  Function "fix_underflow"
Noelle:  Disable "fix_underflow" as cold function
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Disable "x264_partition_i4x4_size_cavlc" as cold function
Noelle:  Function "find_underflow"
Noelle:  Disable "find_underflow" as cold function
Noelle:  Function "qscale2qp"
Noelle:  Disable "qscale2qp" as cold function
Noelle:  Function "count_expected_bits"
Noelle:  Disable "count_expected_bits" as cold function
Noelle:  Function "vbv_pass2"
Noelle:  Disable "vbv_pass2" as cold function
Noelle:  Function "clip_qscale"
Noelle:  Disable "clip_qscale" as cold function
Noelle:  Function "get_diff_limited_q"
Noelle:  Disable "get_diff_limited_q" as cold function
Noelle:  Function "get_qscale"
Noelle:  Disable "get_qscale" as cold function
Noelle:  Function "qscale2bits"
Noelle:  Disable "qscale2bits" as cold function
Noelle:  Function "init_pass2"
Noelle:  Disable "init_pass2" as cold function
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Disable "x264_ratecontrol_get_estimated_size" as cold function
Noelle:  Function "x264_slicetype_path"
Noelle:  Disable "x264_slicetype_path" as cold function
Noelle:  Function "rate_estimate_qscale"
Noelle:  Disable "rate_estimate_qscale" as cold function
Noelle:  Function "update_vbv_plan"
Noelle:  Disable "update_vbv_plan" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:  Disable "x264_macroblock_cache_rect4.843" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:  Disable "x264_mb_analyse_inter_b8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:  Disable "x264_mb_analyse_inter_b16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x8_mmxext" as cold function
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:  Disable "x264_adaptive_quant_frame" as cold function
Noelle:  Function "x264_slicetype_path_cost"
Noelle:  Disable "x264_slicetype_path_cost" as cold function
Noelle:  Function "x264_slicetype_path_search"
Noelle:  Disable "x264_slicetype_path_search" as cold function
Noelle:  Function "scenecut"
Noelle:  Disable "scenecut" as cold function
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Disable "x264_ratecontrol_set_estimated_size" as cold function
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:  Disable "x264_slicetype_frame_cost" as cold function
Noelle:  Function "x264_lowres_context_init"
Noelle:  Disable "x264_lowres_context_init" as cold function
Noelle:  Function "x264_slicetype_analyse"
Noelle:  Disable "x264_slicetype_analyse" as cold function
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Disable "predict_8x8_vr_mmxext" as cold function
Noelle:  Function "parse_zone"
Noelle:  Disable "parse_zone" as cold function
Noelle:  Function "x264_frame_unshift"
Noelle:  Disable "x264_frame_unshift" as cold function
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Disable "array_non_zero_count_mmx.1086" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:  Disable "x264_macroblock_luma_write_cavlc.1087" as cold function
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Disable "bs_size_ue_big.963" as cold function
Noelle:  Function "bs_size_se.962"
Noelle:  Disable "bs_size_se.962" as cold function
Noelle:  Function "scaling_list_write"
Noelle:  Disable "scaling_list_write" as cold function
Noelle:  Function "transpose"
Noelle:  Disable "transpose" as cold function
Noelle:  Function "endian_fix32.950"
Noelle:  Disable "endian_fix32.950" as cold function
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Disable "x264_thread_sync_ratecontrol" as cold function
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:  Disable "x264_ratecontrol_slice_type" as cold function
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Disable "x264_clip_uint8.729" as cold function
Noelle:  Function "predict_row_size"
Noelle:  Disable "predict_row_size" as cold function
Noelle:  Function "predict_row_size_sum"
Noelle:  Disable "predict_row_size_sum" as cold function
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:  Disable "block_residual_write_cavlc.1085" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Disable "x264_mb_predict_non_zero_code.1088" as cold function
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Disable "bs_write_vlc.1090" as cold function
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Disable "x264_frame_cond_broadcast" as cold function
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Disable "cavlc_mb_mvd.1093" as cold function
Noelle:  Function "deblock_luma_c"
Noelle:  Disable "deblock_luma_c" as cold function
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Disable "x264_clip_uint8.704" as cold function
Noelle:  Function "x264_clip3.703"
Noelle:  Disable "x264_clip3.703" as cold function
Noelle:  Function "deblock_chroma_c"
Noelle:  Disable "deblock_chroma_c" as cold function
Noelle:  Function "deblock_luma_intra_c"
Noelle:  Disable "deblock_luma_intra_c" as cold function
Noelle:  Function "deblock_chroma_intra_c"
Noelle:  Disable "deblock_chroma_intra_c" as cold function
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Disable "deblock_h_chroma_intra_c" as cold function
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Disable "deblock_v_chroma_intra_c" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1066" as cold function
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Disable "x264_cabac_mb_transform_size.1018" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Disable "x264_cabac_mb_sub_p_partition.1026" as cold function
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Disable "x264_macroblock_encode_p4x4" as cold function
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:  Disable "x264_macroblock_encode_p8x8" as cold function
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:  Disable "x264_macroblock_probe_skip" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Disable "x264_cabac_mb8x8_mvd.1027" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Disable "x264_cabac_mb_sub_b_partition.1028" as cold function
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:  Disable "x264_macroblock_write_cavlc" as cold function
Noelle:  Function "bs_pos.1063"
Noelle:  Disable "bs_pos.1063" as cold function
Noelle:  Function "bs_write1.1065"
Noelle:  Disable "bs_write1.1065" as cold function
Noelle:  Function "bs_write_ue"
Noelle:  Disable "bs_write_ue" as cold function
Noelle:  Function "bs_align_0"
Noelle:  Disable "bs_align_0" as cold function
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Disable "deblock_h_luma_intra_c" as cold function
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Disable "x264_predict_lossless_16x16" as cold function
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Disable "x264_predict_lossless_8x8" as cold function
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Disable "x264_predict_lossless_4x4" as cold function
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Disable "x264_predict_lossless_8x8_chroma" as cold function
Noelle:  Function "bs_write.1069"
Noelle:  Disable "bs_write.1069" as cold function
Noelle:  Function "bs_write_te"
Noelle:  Disable "bs_write_te" as cold function
Noelle:  Function "bs_write_se.1072"
Noelle:  Disable "bs_write_se.1072" as cold function
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Disable "cavlc_mb8x8_mvd.1074" as cold function
Noelle:  Function "x264_quant_8x8"
Noelle:  Disable "x264_quant_8x8" as cold function
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Disable "x264_mb_encode_i8x8" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1083" as cold function
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Disable "cavlc_qp_delta.1084" as cold function
Noelle:  Function "pixel_satd_wxh"
Noelle:  Disable "pixel_satd_wxh" as cold function
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Disable "x264_mb_mc_8x8" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Disable "x264_mb_load_mv_direct8x8" as cold function
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:  Disable "x264_macroblock_cache_rect1" as cold function
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:  Disable "x264_macroblock_cache_rect4" as cold function
Noelle:  Function "pack16to32_mask"
Noelle:  Disable "pack16to32_mask" as cold function
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Disable "x264_macroblock_cache_mv" as cold function
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Disable "x264_macroblock_cache_ref" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_temporal" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_spatial" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:  Disable "x264_mb_predict_mv_direct16x16" as cold function
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:  Disable "predict_16x16_dc_mmxext" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_sse2" as cold function
Noelle:  Function "pixel_sa8d_wxh"
Noelle:  Disable "pixel_sa8d_wxh" as cold function
Noelle:  Function "pixel_hadamard_ac"
Noelle:  Disable "pixel_hadamard_ac" as cold function
Noelle:  Function "ssim_end1"
Noelle:  Disable "ssim_end1" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3_phadd" as cold function
Noelle:  Function "mc_luma_mmxext"
Noelle:  Disable "mc_luma_mmxext" as cold function
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Disable "deblock_v_luma_intra_c" as cold function
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Disable "deblock_h_chroma_c" as cold function
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Disable "deblock_v_chroma_c" as cold function
Noelle:  Function "deblock_h_luma_c"
Noelle:  Disable "deblock_h_luma_c" as cold function
Noelle:  Function "deblock_v_luma_c"
Noelle:  Disable "deblock_v_luma_c" as cold function
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:  Disable "restore_cavlc_nnz_row" as cold function
Noelle:  Function "endian_fix.1095"
Noelle:  Disable "endian_fix.1095" as cold function
Noelle:  Function "bs_flush.1096"
Noelle:  Disable "bs_flush.1096" as cold function
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Disable "munge_cavlc_nnz" as cold function
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:  Disable "munge_cavlc_nnz_row" as cold function
Noelle:  Function "endian_fix32.1097"
Noelle:  Disable "endian_fix32.1097" as cold function
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:  Disable "x264_frame_expand_border_lowres" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:  Disable "x264_macroblock_bipred_init" as cold function
Noelle:  Function "get_ref_mmxext"
Noelle:  Disable "get_ref_mmxext" as cold function
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:  Disable "x264_hpel_filter_mmxext" as cold function
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:  Disable "x264_hpel_filter_sse2_amd" as cold function
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:  Disable "x264_hpel_filter_sse2_misalign" as cold function
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Disable "mc_luma_cache64_sse2" as cold function
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Disable "get_ref_cache64_sse2" as cold function
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Disable "get_ref_sse2_misalign" as cold function
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Disable "x264_mb_mc_direct8x8" as cold function
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Disable "x264_mb_mc_01xywh" as cold function
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Disable "x264_mb_mc_1xywh" as cold function
Noelle:  Function "strtable_lookup"
Noelle:  Disable "strtable_lookup" as cold function
Noelle:  Function "x264_decimate_score64"
Noelle:  Disable "x264_decimate_score64" as cold function
Noelle:  Function "x264_coeff_last4"
Noelle:  Disable "x264_coeff_last4" as cold function
Noelle:  Function "x264_coeff_last15"
Noelle:  Disable "x264_coeff_last15" as cold function
Noelle:  Function "x264_coeff_last16"
Noelle:  Disable "x264_coeff_last16" as cold function
Noelle:  Function "x264_coeff_last64"
Noelle:  Disable "x264_coeff_last64" as cold function
Noelle:  Function "parse_qpfile"
Noelle:  Disable "parse_qpfile" as cold function
Noelle:  Function "Help"
Noelle:  Disable "Help" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "mk_flushContextID"
Noelle:  Disable "mk_flushContextID" as cold function
Noelle:  Function "x264_decimate_score16"
Noelle:  Disable "x264_decimate_score16" as cold function
Noelle:  Function "mk_createWriter"
Noelle:  Disable "mk_createWriter" as cold function
Noelle:  Function "mk_createContext"
Noelle:  Disable "mk_createContext" as cold function
Noelle:  Function "mk_destroyContexts"
Noelle:  Disable "mk_destroyContexts" as cold function
Noelle:  Function "mk_writeHeader"
Noelle:  Disable "mk_writeHeader" as cold function
Noelle:  Function "mk_writeUInt"
Noelle:  Disable "mk_writeUInt" as cold function
Noelle:  Function "mk_writeStr"
Noelle:  Disable "mk_writeStr" as cold function
Noelle:  Function "mk_closeContext"
Noelle:  Disable "mk_closeContext" as cold function
Noelle:  Function "mk_writeFloat"
Noelle:  Disable "mk_writeFloat" as cold function
Noelle:  Function "quant_8x8"
Noelle:  Disable "quant_8x8" as cold function
Noelle:  Function "parse_cqm"
Noelle:  Disable "parse_cqm" as cold function
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Disable "zigzag_scan_8x8_frame" as cold function
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Disable "zigzag_scan_4x4_frame" as cold function
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Disable "zigzag_sub_8x8_frame" as cold function
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Disable "zigzag_sub_4x4_frame" as cold function
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:  Disable "zigzag_interleave_8x8_cavlc" as cold function
Noelle:  Function "x264_cqm_parse_file"
Noelle:  Disable "x264_cqm_parse_file" as cold function
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:  Disable "x264_cqm_parse_jmlist" as cold function
Noelle:  Function "mk_writeBin"
Noelle:  Disable "mk_writeBin" as cold function
Noelle:  Function "quant_4x4"
Noelle:  Disable "quant_4x4" as cold function
Noelle:  Function "quant_4x4_dc"
Noelle:  Disable "quant_4x4_dc" as cold function
Noelle:  Function "quant_2x2_dc"
Noelle:  Disable "quant_2x2_dc" as cold function
Noelle:  Function "dequant_4x4"
Noelle:  Disable "dequant_4x4" as cold function
Noelle:  Function "dequant_4x4_dc"
Noelle:  Disable "dequant_4x4_dc" as cold function
Noelle:  Function "dequant_8x8"
Noelle:  Disable "dequant_8x8" as cold function
Noelle:  Function "x264_denoise_dct"
Noelle:  Disable "x264_denoise_dct" as cold function
Noelle:  Function "x264_decimate_score15"
Noelle:  Disable "x264_decimate_score15" as cold function
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:  Disable "x264_pixel_sad_4x8" as cold function
Noelle:  Function "close_file_yuv"
Noelle:  Disable "close_file_yuv" as cold function
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Disable "x264_encoder_reconfig" as cold function
Noelle:  Function "x264_thread_sync_context"
Noelle:  Disable "x264_thread_sync_context" as cold function
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Disable "bs_rbsp_trailing" as cold function
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:  Disable "x264_pixel_sad_16x16" as cold function
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:  Disable "x264_pixel_sad_16x8" as cold function
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:  Disable "x264_pixel_sad_8x16" as cold function
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:  Disable "x264_pixel_sad_8x8" as cold function
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:  Disable "x264_pixel_sad_8x4" as cold function
Noelle:  Function "read_frame_yuv"
Noelle:  Disable "read_frame_yuv" as cold function
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:  Disable "x264_pixel_sad_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Disable "x264_pixel_sad_x3_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Disable "x264_pixel_sad_x3_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Disable "x264_pixel_sad_x3_8x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Disable "x264_pixel_sad_x3_8x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Disable "x264_pixel_sad_x3_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Disable "x264_pixel_sad_x3_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Disable "x264_pixel_sad_x3_4x4" as cold function
Noelle:  Function "mk_closeCluster"
Noelle:  Disable "mk_closeCluster" as cold function
Noelle:  Function "mk_flushContextData"
Noelle:  Disable "mk_flushContextData" as cold function
Noelle:  Function "mk_appendContextData"
Noelle:  Disable "mk_appendContextData" as cold function
Noelle:  Function "mk_writeID"
Noelle:  Disable "mk_writeID" as cold function
Noelle:  Function "x264_clip3.467"
Noelle:  Disable "x264_clip3.467" as cold function
Noelle:  Function "mk_writeSize"
Noelle:  Disable "mk_writeSize" as cold function
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Disable "mk_writeFloatRaw" as cold function
Noelle:  Function "mk_startFrame"
Noelle:  Disable "mk_startFrame" as cold function
Noelle:  Function "mk_flushFrame"
Noelle:  Disable "mk_flushFrame" as cold function
Noelle:  Function "x264_atof"
Noelle:  Disable "x264_atof" as cold function
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Disable "mk_ebmlSizeSize" as cold function
Noelle:  Function "mk_ebmlSIntSize"
Noelle:  Disable "mk_ebmlSIntSize" as cold function
Noelle:  Function "mk_writeSInt"
Noelle:  Disable "mk_writeSInt" as cold function
Noelle:  Function "mk_setFrameFlags"
Noelle:  Disable "mk_setFrameFlags" as cold function
Noelle:  Function "mk_addFrameData"
Noelle:  Disable "mk_addFrameData" as cold function
Noelle:  Function "mk_close"
Noelle:  Disable "mk_close" as cold function
Noelle:  Function "open_file_yuv"
Noelle:  Disable "open_file_yuv" as cold function
Noelle:  Function "get_frame_total_yuv"
Noelle:  Disable "get_frame_total_yuv" as cold function
Noelle:  Function "bs_write_vlc"
Noelle:  Disable "bs_write_vlc" as cold function
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Disable "x264_rd_cost_subpart" as cold function
Noelle:  Function "x264_partition_size_cabac"
Noelle:  Disable "x264_partition_size_cabac" as cold function
Noelle:  Function "x264_partition_size_cavlc"
Noelle:  Disable "x264_partition_size_cavlc" as cold function
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Disable "cavlc_mb8x8_mvd" as cold function
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Disable "cavlc_mb_mvd" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:  Disable "x264_macroblock_luma_write_cavlc" as cold function
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Disable "array_non_zero_count_mmx" as cold function
Noelle:  Function "block_residual_write_cavlc"
Noelle:  Disable "block_residual_write_cavlc" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Disable "x264_mb_predict_non_zero_code" as cold function
Noelle:  Function "x264_rd_cost_part"
Noelle:  Disable "x264_rd_cost_part" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Disable "x264_cabac_mb8x8_mvd" as cold function
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Disable "array_non_zero_int_mmx" as cold function
Noelle:  Function "array_non_zero_int_c"
Noelle:  Disable "array_non_zero_int_c" as cold function
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Disable "x264_subpartition_size_cabac" as cold function
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Disable "x264_subpartition_size_cavlc" as cold function
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:  Disable "x264_macroblock_size_cavlc" as cold function
Noelle:  Function "cavlc_qp_delta"
Noelle:  Disable "cavlc_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Disable "x264_cabac_mb_transform_size" as cold function
Noelle:  Function "predict_16x16_dc_top"
Noelle:  Disable "predict_16x16_dc_top" as cold function
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:  Disable "pixel_avg_weight_wxh" as cold function
Noelle:  Function "pixel_avg"
Noelle:  Disable "pixel_avg" as cold function
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Disable "x264_predict_8x8_filter" as cold function
Noelle:  Function "predict_16x16_v"
Noelle:  Disable "predict_16x16_v" as cold function
Noelle:  Function "predict_16x16_h"
Noelle:  Disable "predict_16x16_h" as cold function
Noelle:  Function "predict_16x16_dc"
Noelle:  Disable "predict_16x16_dc" as cold function
Noelle:  Function "predict_16x16_p"
Noelle:  Disable "predict_16x16_p" as cold function
Noelle:  Function "predict_16x16_dc_left"
Noelle:  Disable "predict_16x16_dc_left" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Disable "x264_cabac_mb_sub_p_partition" as cold function
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Disable "x264_clip_uint8.650" as cold function
Noelle:  Function "predict_8x8c_v"
Noelle:  Disable "predict_8x8c_v" as cold function
Noelle:  Function "predict_8x8c_h"
Noelle:  Disable "predict_8x8c_h" as cold function
Noelle:  Function "predict_8x8c_dc"
Noelle:  Disable "predict_8x8c_dc" as cold function
Noelle:  Function "x264_realloc"
Noelle:  Disable "x264_realloc" as cold function
Noelle:  Function "x264_slurp_file"
Noelle:  Disable "x264_slurp_file" as cold function
Noelle:  Function "x264_coeff_last_internal"
Noelle:  Disable "x264_coeff_last_internal" as cold function
Noelle:  Function "x264_decimate_score_internal"
Noelle:  Disable "x264_decimate_score_internal" as cold function
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Disable "x264_partition_i8x8_size_cabac" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Disable "x264_mb_cache_mv_b8x8" as cold function
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Disable "x264_macroblock_cache_skip" as cold function
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Disable "x264_macroblock_cache_intra8x8_pred" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Disable "x264_mb_analyse_inter_p4x4_chroma" as cold function
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Disable "x264_rd_cost_i4x4" as cold function
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Disable "x264_rd_cost_i8x8" as cold function
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Disable "x264_rd_cost_i8x8_chroma" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:  Disable "x264_i8x8_chroma_size_cabac" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:  Disable "x264_i8x8_chroma_size_cavlc" as cold function
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Disable "x264_mb_cache_mv_b16x8" as cold function
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:  Disable "x264_partition_i8x8_size_cavlc" as cold function
Noelle:  Function "open_file_mkv"
Noelle:  Disable "open_file_mkv" as cold function
Noelle:  Function "set_param_mkv"
Noelle:  Disable "set_param_mkv" as cold function
Noelle:  Function "gcd"
Noelle:  Disable "gcd" as cold function
Noelle:  Function "write_nalu_mkv"
Noelle:  Disable "write_nalu_mkv" as cold function
Noelle:  Function "write_header_mkv"
Noelle:  Disable "write_header_mkv" as cold function
Noelle:  Function "set_eop_mkv"
Noelle:  Disable "set_eop_mkv" as cold function
Noelle:  Function "close_file_mkv"
Noelle:  Disable "close_file_mkv" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:  Disable "x264_mb_analyse_inter_p8x8_mixed_ref" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Disable "x264_cabac_mb_sub_b_partition" as cold function
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Disable "x264_quant_dc_trellis" as cold function
Noelle:  Function "quant_trellis_cabac"
Noelle:  Disable "quant_trellis_cabac" as cold function
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Disable "x264_cabac_size_decision_noup2" as cold function
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Disable "x264_quant_4x4_trellis" as cold function
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Disable "x264_quant_8x8_trellis" as cold function
Noelle:  Function "x264_intra_rd_refine"
Noelle:  Disable "x264_intra_rd_refine" as cold function
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Disable "x264_macroblock_probe_pskip" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Disable "x264_pixel_sad_x4_16x16" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:  Disable "x264_mb_analyse_inter_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:  Disable "x264_mb_analyse_inter_p4x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:  Disable "x264_mb_analyse_inter_b8x16" as cold function
Noelle:  Function "x264_refine_bidir"
Noelle:  Disable "x264_refine_bidir" as cold function
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Disable "x264_mb_analyse_transform" as cold function
Noelle:  Function "x264_psy_trellis_init"
Noelle:  Disable "x264_psy_trellis_init" as cold function
Noelle:  Function "x264_me_search"
Noelle:  Disable "x264_me_search" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Disable "x264_mb_cache_mv_b8x16" as cold function
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:  Disable "x264_pixel_ssd_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Disable "x264_pixel_sad_x4_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Disable "x264_pixel_sad_x4_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Disable "x264_pixel_sad_x4_4x4" as cold function
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:  Disable "x264_pixel_ssd_16x16" as cold function
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:  Disable "x264_pixel_ssd_16x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:  Disable "x264_pixel_ssd_8x16" as cold function
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:  Disable "x264_pixel_ssd_8x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:  Disable "x264_pixel_ssd_8x4" as cold function
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:  Disable "x264_pixel_ssd_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Disable "x264_pixel_sad_x4_8x8" as cold function
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Disable "x264_pixel_satd_16x16" as cold function
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Disable "x264_pixel_satd_16x8" as cold function
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Disable "x264_pixel_satd_8x16" as cold function
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Disable "x264_pixel_satd_8x8" as cold function
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Disable "x264_pixel_satd_8x4" as cold function
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Disable "x264_pixel_satd_4x8" as cold function
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Disable "x264_pixel_satd_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Disable "x264_pixel_satd_x3_16x16" as cold function
Noelle:  Function "sub16x16_dct8"
Noelle:  Disable "sub16x16_dct8" as cold function
Noelle:  Function "sub4x4_dct"
Noelle:  Disable "sub4x4_dct" as cold function
Noelle:  Function "add4x4_idct"
Noelle:  Disable "add4x4_idct" as cold function
Noelle:  Function "sub8x8_dct"
Noelle:  Disable "sub8x8_dct" as cold function
Noelle:  Function "add8x8_idct"
Noelle:  Disable "add8x8_idct" as cold function
Noelle:  Function "sub16x16_dct"
Noelle:  Disable "sub16x16_dct" as cold function
Noelle:  Function "add16x16_idct"
Noelle:  Disable "add16x16_idct" as cold function
Noelle:  Function "sub8x8_dct8"
Noelle:  Disable "sub8x8_dct8" as cold function
Noelle:  Function "add8x8_idct8"
Noelle:  Disable "add8x8_idct8" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Disable "x264_pixel_satd_x3_16x8" as cold function
Noelle:  Function "add16x16_idct8"
Noelle:  Disable "add16x16_idct8" as cold function
Noelle:  Function "dct4x4dc"
Noelle:  Disable "dct4x4dc" as cold function
Noelle:  Function "idct4x4dc"
Noelle:  Disable "idct4x4dc" as cold function
Noelle:  Function "pixel_sub_wxh"
Noelle:  Disable "pixel_sub_wxh" as cold function
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Disable "zigzag_scan_8x8_field" as cold function
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Disable "zigzag_scan_4x4_field" as cold function
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Disable "zigzag_sub_8x8_field" as cold function
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Disable "zigzag_sub_4x4_field" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Disable "x264_pixel_hadamard_ac_8x16" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Disable "x264_pixel_hadamard_ac_8x8" as cold function
Noelle:  Function "x264_pixel_ads4"
Noelle:  Disable "x264_pixel_ads4" as cold function
Noelle:  Function "x264_pixel_ads2"
Noelle:  Disable "x264_pixel_ads2" as cold function
Noelle:  Function "x264_pixel_ads1"
Noelle:  Disable "x264_pixel_ads1" as cold function
Noelle:  Function "x264_pixel_var_16x16"
Noelle:  Disable "x264_pixel_var_16x16" as cold function
Noelle:  Function "x264_pixel_var_8x8"
Noelle:  Disable "x264_pixel_var_8x8" as cold function
Noelle:  Function "ssim_4x4x2_core"
Noelle:  Disable "ssim_4x4x2_core" as cold function
Noelle:  Function "ssim_end4"
Noelle:  Disable "ssim_end4" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Disable "x264_pixel_hadamard_ac_16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:  Disable "x264_mb_analyse_inter_p8x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:  Disable "x264_mb_analyse_inter_p4x8" as cold function
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Disable "x264_mb_cache_mv_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:  Disable "x264_mb_analyse_inter_p16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:  Disable "x264_mb_analyse_inter_p8x16" as cold function
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Disable "x264_macroblock_probe_bskip" as cold function
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:  Disable "x264_mb_analyse_inter_direct" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:  Disable "x264_mb_analyse_inter_b16x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Disable "x264_pixel_satd_x4_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Disable "x264_pixel_satd_x3_8x16" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Disable "x264_pixel_satd_x3_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Disable "x264_pixel_satd_x3_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Disable "x264_pixel_satd_x3_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Disable "x264_pixel_satd_x3_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Disable "x264_pixel_satd_x4_16x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Disable "x264_pixel_satd_x4_16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Disable "x264_pixel_satd_x4_8x16" as cold function
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:  Disable "x264_pixel_ssim_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Disable "x264_pixel_satd_x4_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Disable "x264_pixel_satd_x4_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Disable "x264_pixel_satd_x4_4x4" as cold function
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Disable "x264_pixel_sa8d_16x16" as cold function
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Disable "x264_pixel_sa8d_16x8" as cold function
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Disable "x264_pixel_sa8d_8x16" as cold function
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Disable "x264_pixel_sa8d_8x8" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Disable "x264_pixel_hadamard_ac_16x16" as cold function
Noelle:  Function "mc_copy_w8"
Noelle:  Disable "mc_copy_w8" as cold function
Noelle:  Function "mc_copy_w16"
Noelle:  Disable "mc_copy_w16" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x8_mmxext" as cold function
Noelle:  Function "pixel_avg_2x2"
Noelle:  Disable "pixel_avg_2x2" as cold function
Noelle:  Function "mc_copy_w4"
Noelle:  Disable "mc_copy_w4" as cold function
Noelle:  Function "plane_copy"
Noelle:  Disable "plane_copy" as cold function
Noelle:  Function "hpel_filter"
Noelle:  Disable "hpel_filter" as cold function
Noelle:  Function "prefetch_fenc_null"
Noelle:  Disable "prefetch_fenc_null" as cold function
Noelle:  Function "prefetch_ref_null"
Noelle:  Disable "prefetch_ref_null" as cold function
Noelle:  Function "memzero_aligned"
Noelle:  Disable "memzero_aligned" as cold function
Noelle:  Function "frame_init_lowres_core"
Noelle:  Disable "frame_init_lowres_core" as cold function
Noelle:  Function "x264_clip_uint8"
Noelle:  Disable "x264_clip_uint8" as cold function
Noelle:  Function "pixel_avg_16x16"
Noelle:  Disable "pixel_avg_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Disable "x264_pixel_sad_x4_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Disable "x264_pixel_sad_x4_8x16" as cold function
Noelle:  Function "x264_psnr"
Noelle:  Disable "x264_psnr" as cold function
Noelle:  Function "x264_frame_dump"
Noelle:  Disable "x264_frame_dump" as cold function
Noelle:  Function "x264_frame_init_lowres"
Noelle:  Disable "x264_frame_init_lowres" as cold function
Noelle:  Function "mc_luma"
Noelle:  Disable "mc_luma" as cold function
Noelle:  Function "get_ref"
Noelle:  Disable "get_ref" as cold function
Noelle:  Function "mc_chroma"
Noelle:  Disable "mc_chroma" as cold function
Noelle:  Function "mc_copy"
Noelle:  Disable "mc_copy" as cold function
Noelle:  Function "pixel_avg_16x8"
Noelle:  Disable "pixel_avg_16x8" as cold function
Noelle:  Function "pixel_avg_8x16"
Noelle:  Disable "pixel_avg_8x16" as cold function
Noelle:  Function "pixel_avg_8x8"
Noelle:  Disable "pixel_avg_8x8" as cold function
Noelle:  Function "pixel_avg_8x4"
Noelle:  Disable "pixel_avg_8x4" as cold function
Noelle:  Function "pixel_avg_4x8"
Noelle:  Disable "pixel_avg_4x8" as cold function
Noelle:  Function "pixel_avg_4x4"
Noelle:  Disable "pixel_avg_4x4" as cold function
Noelle:  Function "pixel_avg_4x2"
Noelle:  Disable "pixel_avg_4x2" as cold function
Noelle:  Function "pixel_avg_2x4"
Noelle:  Disable "pixel_avg_2x4" as cold function
Noelle:  Function "pack16to32"
Noelle:  Disable "pack16to32" as cold function
Noelle:  Function "predict_8x8_vr"
Noelle:  Disable "predict_8x8_vr" as cold function
Noelle:  Function "predict_8x8_hd"
Noelle:  Disable "predict_8x8_hd" as cold function
Noelle:  Function "predict_8x8_vl"
Noelle:  Disable "predict_8x8_vl" as cold function
Noelle:  Function "predict_8x8_hu"
Noelle:  Disable "predict_8x8_hu" as cold function
Noelle:  Function "predict_8x8_dc_left"
Noelle:  Disable "predict_8x8_dc_left" as cold function
Noelle:  Function "predict_8x8_dc_top"
Noelle:  Disable "predict_8x8_dc_top" as cold function
Noelle:  Function "predict_8x8_dc_128"
Noelle:  Disable "predict_8x8_dc_128" as cold function
Noelle:  Function "pack8to16"
Noelle:  Disable "pack8to16" as cold function
Noelle:  Function "predict_8x8_ddr"
Noelle:  Disable "predict_8x8_ddr" as cold function
Noelle:  Function "predict_4x4_dc"
Noelle:  Disable "predict_4x4_dc" as cold function
Noelle:  Function "predict_4x4_ddl"
Noelle:  Disable "predict_4x4_ddl" as cold function
Noelle:  Function "predict_4x4_ddr"
Noelle:  Disable "predict_4x4_ddr" as cold function
Noelle:  Function "predict_4x4_vr"
Noelle:  Disable "predict_4x4_vr" as cold function
Noelle:  Function "predict_4x4_hd"
Noelle:  Disable "predict_4x4_hd" as cold function
Noelle:  Function "predict_4x4_vl"
Noelle:  Disable "predict_4x4_vl" as cold function
Noelle:  Function "predict_4x4_hu"
Noelle:  Disable "predict_4x4_hu" as cold function
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:  Disable "x264_pixel_ssd_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x8_sse2" as cold function
Noelle:  Function "pixel_avg_wxh"
Noelle:  Disable "pixel_avg_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x16_sse2" as cold function
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Disable "x264_mb_analyse_b_rd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x16_sse2" as cold function
Noelle:  Function "predict_8x8c_p"
Noelle:  Disable "predict_8x8c_p" as cold function
Noelle:  Function "predict_8x8c_dc_left"
Noelle:  Disable "predict_8x8c_dc_left" as cold function
Noelle:  Function "predict_8x8c_dc_top"
Noelle:  Disable "predict_8x8c_dc_top" as cold function
Noelle:  Function "predict_8x8_v"
Noelle:  Disable "predict_8x8_v" as cold function
Noelle:  Function "predict_8x8_h"
Noelle:  Disable "predict_8x8_h" as cold function
Noelle:  Function "predict_8x8_dc"
Noelle:  Disable "predict_8x8_dc" as cold function
Noelle:  Function "predict_8x8_ddl"
Noelle:  Disable "predict_8x8_ddl" as cold function
EnablersManager:   Try to improve all 69 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_analyse"
EnablersManager:     Entry instruction =   %exitcond165 = icmp eq i32 %.1, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_mb_analysis_t, align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond165 = icmp eq i32 %.1, 2"
LICM:     Invariant = "  store i32 1, i32* %5, align 4, !tbaa !30
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond165, label %.loopexit110, label %431
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode"
EnablersManager:     Entry instruction =   %.b9 = load i1, i1* @b_ctrl_c, align 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [200 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %78, label %80, label %..loopexit_crit_edge, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_encoder_encode"
EnablersManager:     Entry instruction =   %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %Pivot52, label %NodeBlock30, label %NodeBlock26, !prof !91
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_slice_write"
EnablersManager:     Entry instruction =   %51 = mul nsw i32 %.07, %50
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %51 = mul nsw i32 %.07, %50"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %54, label %55, label %152, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond20 = icmp eq i64 %indvars.iv18, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond20, label %._crit_edge108.loopexit1, label %207, !prof !86
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac"
EnablersManager:     Entry instruction =   %76 = icmp slt i64 %indvars.iv19, %41
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %76 = icmp slt i64 %indvars.iv19, %41"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %76, label %77, label %.loopexit11.loopexit1, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_inter_p16x16"
EnablersManager:     Entry instruction =   %78 = load i32, i32* %11, align 16, !tbaa !31
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [8 x [2 x i16]], align 4
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %struct.x264_me_t, align 16
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %80, label %81, label %173, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond17 = icmp eq i64 %indvars.iv15, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond17, label %._crit_edge108.loopexit, label %192, !prof !83
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac"
EnablersManager:     Entry instruction =   %indvars.iv.next = add nsw i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %115, label %144, label %117, !prof !77
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond21 = icmp eq i64 %indvars.iv19, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond21, label %._crit_edge120.loopexit, label %260, !prof !90
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %334 = icmp sgt i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %334 = icmp sgt i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %334, label %335, label %343, !prof !103
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %347 = icmp slt i64 %indvars.iv55, %345
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %347 = icmp slt i64 %indvars.iv55, %345"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %347, label %348, label %373, !prof !105
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %297 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca [9 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %297 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %311, label %312, label %.._crit_edge92_crit_edge, !prof !100
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %130 = icmp slt i32 %.3, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %130 = icmp slt i32 %.3, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %130, label %131, label %133, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %indvars.iv.next = add nsw i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %123, label %139, label %124, !prof !77
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %78 = icmp slt i64 %indvars.iv22, %42
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %78 = icmp slt i64 %indvars.iv22, %42"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %78, label %79, label %.loopexit14.loopexit1, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond24 = icmp eq i64 %indvars.iv22, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond24, label %._crit_edge120.loopexit2, label %275, !prof !93
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit612.loopexit, label %1765, !prof !247
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1761 = shl nsw i64 %indvars.iv662, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1761 = shl nsw i64 %indvars.iv662, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1762, label %.preheader, label %1800, !prof !246
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond18 = icmp eq i64 %indvars.iv16, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond18, label %.loopexit.loopexit, label %141, !prof !87
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond12, label %.us-lcssa.us.loopexit1, label %96, !prof !81
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond15 = icmp eq i64 %indvars.iv13, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond15, label %.us-lcssa.us.loopexit, label %75, !prof !74
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond21 = icmp eq i64 %indvars.iv19, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [4 x [4 x [4 x i16]]], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [2 x [2 x i16]], align 16 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond21, label %148, label %40, !prof !63
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_fdec_filter_row"
EnablersManager:     Entry instruction =   %67 = icmp slt i32 %.01, %1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %67 = icmp slt i32 %.01, %1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %67, label %68, label %._crit_edge17.loopexit, !prof !81
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %335 = icmp slt i64 %indvars.iv86, %spec.select
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %335, label %336, label %503, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %710 = icmp slt i64 %indvars.iv100, %spec.select
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %710, label %711, label %880, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73"
LICM:     Invariant = "  store i32 0, i32* %3, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 0, i32* %4, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 50529027, i32* %4, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %82, label %83, label %885, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %18 = icmp ult i64 %indvars.iv33, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %18 = icmp ult i64 %indvars.iv33, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %18, label %19, label %._crit_edge83.loopexit, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond60 = icmp eq i64 %indvars.iv58, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond60, label %497, label %486, !prof !134
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond63 = icmp eq i64 %indvars.iv61, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond63, label %504, label %444, !prof !131
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %164, label %152, !prof !93
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %434, label %423, !prof !130
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 24
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %._crit_edge107.loopexit, label %226, !prof !90
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond81 = icmp eq i64 %indvars.iv79, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond81, label %.us-lcssa34.us.us, label %339, !prof !107
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond84 = icmp eq i64 %indvars.iv82, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond84, label %.us-lcssa36.us.loopexit, label %.split33.us.us, !prof !106
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_i16x16"
EnablersManager:     Entry instruction =   %exitcond4 = icmp eq i64 %indvars.iv2, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [4 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond4, label %59, label %46, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode_frame"
EnablersManager:     Entry instruction =   %22 = icmp slt i64 %indvars.iv, %19
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.x264_nal_t*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %22 = icmp slt i64 %indvars.iv, %19"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %22, label %23, label %47, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_nal_encode"
EnablersManager:     Entry instruction =   %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %25, label %26, label %37, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %89 = icmp slt i64 %indvars.iv707, %87
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp slt i64 %indvars.iv707, %87"
LICM:     Invariant = "  store i32 16, i32* %9, align 4, !tbaa !66
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %121, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond99 = icmp eq i64 %indvars.iv97, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond99, label %123, label %117
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1426 = icmp slt i64 %indvars.iv670, %1424
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1426, label %1427, label %.loopexit614, !prof !207
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 24
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %._crit_edge119.loopexit, label %294, !prof !97
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode"
EnablersManager:     Entry instruction =   %148 = load i8*, i8** %40, align 8, !tbaa !50
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [200 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %152, label %153, label %._crit_edge22.._crit_edge22_crit_edge, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond13 = icmp eq i64 %indvars.iv11, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond13, label %38, label %25, !prof !66
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond16 = icmp eq i64 %indvars.iv14, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond16, label %39, label %22, !prof !65
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "copy_column8"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %9, label %4, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "refine_subpel"
EnablersManager:     Entry instruction =   %258 = icmp sgt i32 %.179, 0
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [2 x [576 x i8]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i32, align 4 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %258 = icmp sgt i32 %.179, 0"
LICM:     Invariant = "  store i32 16, i32* %12, align 4, !tbaa !72
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %258, label %259, label %..loopexit_crit_edge, !prof !91
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "refine_subpel"
EnablersManager:     Entry instruction =   %111 = icmp sgt i32 %.078, 0
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [2 x [576 x i8]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [4 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca [4 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %111 = icmp sgt i32 %.078, 0"
LICM:     Invariant = "  store i32 32, i32* %10, align 4, !tbaa !72
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %111, label %112, label %.._crit_edge138_crit_edge, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "predict_16x16_p_sse2"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 9
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 9"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %28, label %3, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %exitcond15 = icmp eq i64 %indvars.iv13, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [2 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond15, label %.loopexit6.us, label %113, !prof !74
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %97 = icmp slt i64 %indvars.iv16, %95
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [2 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %97 = icmp slt i64 %indvars.iv16, %95"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %97, label %.preheader5.us, label %.us-lcssa.us.loopexit, !prof !73
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "predict_8x8c_p_mmxext"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 5
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 5"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %28, label %3, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_i16x16"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [4 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %100, label %93, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1558 = icmp slt i64 %indvars.iv666, %1556
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1558, label %1559, label %.loopexit613, !prof !223
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %118 = icmp slt i64 %indvars.iv18, %95
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [2 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %118 = icmp slt i64 %indvars.iv18, %95"
LICM:     Invariant = "  %120 = load i32, i32* %13, align 16, !tbaa !63
LICM:       Checking dependences
LICM:       The instruction can be hoisted
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has been modified
LICM: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "x264_cabac_mb_type"
EnablersManager:     Entry instruction =   %90 = icmp slt i64 %indvars.iv, %88
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %90 = icmp slt i64 %indvars.iv, %88"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %90, label %91, label %.loopexit.loopexit
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond75 = icmp eq i64 %indvars.iv73, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond75, label %389, label %384, !prof !118
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond78 = icmp eq i64 %indvars.iv76, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond78, label %.loopexit29.loopexit, label %377, !prof !116
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_rect4.786"
EnablersManager:     Entry instruction =   %32 = icmp slt i64 %indvars.iv8, %24
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %32 = icmp slt i64 %indvars.iv8, %24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %32, label %33, label %36, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_rect4.786"
EnablersManager:     Entry instruction =   %27 = icmp slt i64 %indvars.iv10, %25
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %27 = icmp slt i64 %indvars.iv10, %25"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %27, label %28, label %.loopexit.loopexit1, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %59, label %46, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond10 = icmp eq i64 %indvars.iv8, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond10, label %60, label %43, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra_chroma"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv5, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %135, label %57, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_load"
EnablersManager:     Entry instruction =   %exitcond8 = icmp eq i64 %indvars.iv18, %359
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond8, label %527, label %361, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra_chroma"
EnablersManager:     Entry instruction =   %120 = icmp eq i64 %118, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %120 = icmp eq i64 %118, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %120, label %73, label %121, !prof !75
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %136 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 18
Mem2Reg:     SCC:
Internal nodes: 1
	  store i32 %123, i32* %136, align 8, !tbaa !84
External nodes: 2
	  %123 = load i32, i32* %122, align 4, !tbaa !67
	  br i1 %133, label %115, label %116, !prof !76
Edges: 3

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %117
Mem2Reg:  checking for last value entering block: label %117
Mem2Reg:  Last value entering block: label %117	  %120 = phi i32 
Mem2Reg:  checking for last value entering block: label %122
Mem2Reg:  Last value entering block: label %122	  %120 = phi i32 
Mem2Reg:  checking for last value entering block: label %115
Mem2Reg:  Last value entering block: label %115	  %120 = phi i32 
Mem2Reg:  Value updated:   %124 = load i32, i32* %123, align 4, !tbaa !67
Mem2Reg:  checking for last value entering block: label %116
Mem2Reg:  Last value entering block: label %116	  %120 = phi i32 
Mem2Reg:  checking for last value entering block: label %112
Mem2Reg:  Last value entering block: label %112	  %114 = phi i32 [ %121, %117 ], [ %125, %116 ]
Mem2Reg:  Removing
  store i32 %125, i32* %139, align 8, !tbaa !84
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %82 = icmp ult i64 %indvars.iv43, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %82 = icmp ult i64 %indvars.iv43, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %82, label %83, label %._crit_edge96.loopexit, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "predict_16x16_dc_sse2"
EnablersManager:     Entry instruction =   %3 = icmp ult i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %3 = icmp ult i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %3, label %4, label %17, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv65, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %50, !prof !75
Mem2Reg:   The loop has 1SCCs that each one access the same memory location
Mem2Reg:     Loop invariant memory location:   %45 = getelementptr inbounds %struct.x264_mb_analysis_t, %struct.x264_mb_analysis_t* %1, i64 0, i32 9
Mem2Reg:     SCC:
Internal nodes: 1
	  store i32 %51, i32* %45, align 4, !tbaa !77
External nodes: 2
	  %51 = trunc i64 %indvars.iv65 to i32
	  br i1 %57, label %58, label %.._crit_edge72_crit_edge, !prof !76
Edges: 3

Mem2Reg:  Collecting and ordering memory loads/stores by basic block
Mem2Reg: Iterating basic blocks to determine last stored values
Mem2Reg: placeholder PHI required: label %49
Mem2Reg:  checking for last value entering block: label %49
Mem2Reg:  Last value entering block: label %49	  %51 = phi i32 
Mem2Reg:  checking for last value entering block: label %52
Mem2Reg:  Last value entering block: label %52	  %51 = phi i32 
Mem2Reg:  checking for last value entering block: label %60
Mem2Reg:  Last value entering block: label %60	  %51 = phi i32 
Mem2Reg:  Value updated:   %53 = trunc i64 %indvars.iv65 to i32
Mem2Reg:  checking for last value entering block: label %.._crit_edge72_crit_edge
Mem2Reg:  Last value entering block: label %.._crit_edge72_crit_edge	  %51 = phi i32 
Mem2Reg:  checking for last value entering block: label %._crit_edge72
Mem2Reg:  Last value entering block: label %._crit_edge72	  %62 = phi i32 [ %51, %.._crit_edge72_crit_edge ], [ %53, %60 ]
Mem2Reg:  Removing
  store i32 %53, i32* %45, align 4, !tbaa !77
Mem2Reg:       The memory location has been promoted
Mem2Reg: Exit
EnablersManager:       Loop invariants have been extracted
EnablersManager:   Loop:
EnablersManager:     Function = "x264_cabac_encode_ue_bypass"
EnablersManager:     Entry instruction =   %25 = sub nsw i32 %.1, %.0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %25 = sub nsw i32 %.1, %.0"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %35, label %._crit_edge.._crit_edge_crit_edge, label %36, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.545256e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.894729e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.013828e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.406283e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.777356e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1" (7.502451e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.833330e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.084905e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.490680e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.396988e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.854916e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.334197e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.666580e-04%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.016664e-03%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.666580e-04%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.484142e-03%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.396605e-04%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.565098e-03%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.514252e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.799646e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.069062e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.213809e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.467189e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.008686e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.114100e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.335974e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.242581e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.567712e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.947194e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.767581e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.566035e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.111391e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.095061e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.003977e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.237766e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.395520e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.758976e-02%)
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.772987e-03%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.806780e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.513520e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.286399e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.240250e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.526766e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.726449e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.465353e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.170916e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.476221e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.289400e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.028778e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.139019e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.043208e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.813314e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.035819e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.811283e-02%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %68 = icmp slt i64 %indvars.iv67, %66" (6.559840e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.180295e-01%)
Noelle:     Loop "  %143 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %173 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %188 = icmp slt i64 %indvars.iv61, %186" (0.000000e+00%)
Noelle:     Loop "  %297 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.743981e+00%)
Noelle:     Loop "  %334 = icmp sgt i64 %indvars.iv, -1" (9.662717e-01%)
Noelle:     Loop "  %347 = icmp slt i64 %indvars.iv55, %345" (3.725968e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.123309e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.030067e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.535709e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.156440e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.496331e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.405882e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.077462e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.084486e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.909563e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.351054e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.754214e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.734002e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.650772e-02%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.437164e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.268738e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.946746e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.968328e-02%)
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.514126e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.232788e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.884685e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.084600e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.730359e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.028620e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.199057e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.049162e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %95" (2.880153e-01%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv16, %95" (3.808797e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.299052e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.013762e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.605399e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.982577e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.650479e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.307926e-01%)
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.443783e-02%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.070960e-03%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.531412e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.049953e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.550606e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.482269e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.402901e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.169423e-01%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.431011e-01%)
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.450711e-01%)
Noelle:     Loop "  %120 = icmp eq i64 %118, 4" (1.375663e-01%)
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (7.391224e-03%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.928352e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.215814e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.971822e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.651171e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.039731e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.959843e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.341875e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.245863e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.467717e-02%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.116541e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.486436e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.491600e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.012003e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.705495e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.407038e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.407038e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.751629e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.787410e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.560738e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.098249e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.098249e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.348168e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.348168e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.011337e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.746501e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.665994e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.981325e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.945205e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.379355e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.347370e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.444792e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.919479e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.555262e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.712913e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.806706e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %54 = icmp sgt i32 %53, 65535" (0.000000e+00%)
Noelle:     Loop "  %227 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (4.238361e-06%)
Noelle:     Loop "  %332 = load i32, i32* %330, align 4, !tbaa !83" (3.616349e-08%)
Noelle:     Loop "  %340 = sext i32 %339 to i64" (3.334274e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %Pivot5 = icmp ult i64 %indvars.iv16, 14" (8.887496e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.364369e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.390385e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.512979e-03%)
Noelle:     Loop "  %7 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.474480e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.631784e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.777320e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.202762e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.138564e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.916376e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.499620e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.198386e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.175603e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (8.953067e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.604386e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count" (1.560874e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.247481e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.616349e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.930812e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.793673e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.193395e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.567731e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.282422e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.685465e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.550937e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.510621e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.502376e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.106697e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.008622e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (5.971315e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.401502e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.679238e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.708725e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.272485e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.096014e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.769805e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.077354e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.201033e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.404395e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.257282e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.069065e-04%)
Noelle:     Loop "  %49 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %62, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp slt i64 %indvars.iv, %72" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.230991e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.157080e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.374213e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.028295e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.427011e-05%)
Noelle:     Loop "  %Pivot = icmp ult i64 %indvars.iv58, 17" (1.416162e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.334433e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.322137e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.217986e-05%)
Noelle:     Loop "  %396 = icmp sgt i64 %indvars.iv44, %394" (5.713831e-07%)
Noelle:     Loop "  %504 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.616349e-08%)
Noelle:     Loop "  %516 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.616349e-08%)
Noelle:     Loop "  %528 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.541577e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.231222e-04%)
Noelle:     Loop "  %553 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.715119e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.175747e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.307231e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.307231e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.052061e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (1.995863e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.374054e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.302450e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.462257e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.628168e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.565879e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.475152e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.054332e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.137791e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.880501e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.922010e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.380245e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.942385e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.480497e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.710374e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.529998e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.734683e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.242136e-07%)
Noelle:     Loop "  %163 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.462257e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.582073e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.285533e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.987104e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %183 = sext i32 %182 to i64" (0.000000e+00%)
Noelle:     Loop "  %319 = add nsw i32 %318, 2" (5.373895e-06%)
Noelle:     Loop "  %323 = add nsw i32 %322, 2" (4.057544e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %370 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %352 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.822004e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.525376e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.052199e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.207861e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.206414e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.052199e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.627039e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.424841e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.833330e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.893079e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.713831e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.605341e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.628927e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.363205e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.534584e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (9.981123e-07%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (8.534584e-07%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %441 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %474 = icmp slt i64 %indvars.iv57, %470" (0.000000e+00%)
Noelle:     Loop "  %491 = icmp slt i32 %.36, %490" (0.000000e+00%)
Noelle:     Loop "  %574 = load i32, i32* %7, align 4, !tbaa !30" (1.446540e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.836469e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.147793e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.918235e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.977984e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.688676e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.977984e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.531444e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.773581e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.786158e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %Pivot17 = icmp slt i8 %11, 80" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i32 %.02, %12" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %218 = icmp slt i64 %indvars.iv84, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %197 = icmp slt i64 %indvars.iv90, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %248 = icmp slt i64 %indvars.iv92, %.pre-phi30" (0.000000e+00%)
Noelle:     Loop "  %286 = icmp slt i64 %indvars.iv, %284" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %8 = icmp slt i64 %indvars.iv, %6" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %23" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %153" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in1, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %210" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us15 = icmp ult i64 %indvars.iv24.us14, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us = icmp ult i64 %indvars.iv24.us9, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv24.us, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (2.566866e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us.us = icmp eq i64 %indvars.iv69.us.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %483 = icmp slt i64 %indvars.iv, %481" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.384945e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.526439e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw i32 %60, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %71" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv, %70" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.544797e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.894371e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.013715e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.405452e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.777044e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1" (7.502000e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.832900e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.084783e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.490230e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.396607e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.854596e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.334048e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.665608e-04%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.016550e-03%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.665608e-04%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.483976e-03%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.396000e-04%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.564922e-03%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.514082e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.799444e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.068942e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.213673e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.467024e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.008573e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.113975e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.335824e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.242105e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.566639e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.946527e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.767046e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.565187e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.111266e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.094938e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.003864e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.237515e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.395363e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.758666e-02%)
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.772676e-03%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.806016e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.513350e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.286255e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.240111e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.525810e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.725694e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.464740e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.170112e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.475607e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.288694e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.027877e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.138667e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.042418e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.812998e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.035478e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.810519e-02%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv67, %69" (6.559104e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.262978e-01%)
Noelle:     Loop "  %146 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %191 = icmp slt i64 %indvars.iv61, %189" (0.000000e+00%)
Noelle:     Loop "  %300 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.742999e+00%)
Noelle:     Loop "  %337 = icmp sgt i64 %indvars.iv, -1" (9.661633e-01%)
Noelle:     Loop "  %350 = icmp slt i64 %indvars.iv55, %348" (3.725550e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.123070e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.029503e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.535424e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.156198e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.496163e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.405724e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.077341e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.083466e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.909124e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.350678e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.754017e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.733807e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.649914e-02%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.436554e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.268147e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.946191e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.967547e-02%)
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.513507e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.232200e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.884137e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.084142e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.729828e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.028505e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.198698e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.048595e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv18, %95" (2.740509e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv16, %95" (3.808369e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.298794e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.013649e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.443284e-02%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.070728e-03%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.604770e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.982018e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.650293e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.307780e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.530791e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.049723e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.550432e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.481766e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.402182e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.168843e-01%)
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.450548e-01%)
Noelle:     Loop "  %122 = icmp eq i64 %119, 4" (1.463053e-01%)
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (7.390395e-03%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.430739e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.927911e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.215453e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.971376e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.650313e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.039614e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.959623e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.341724e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.245723e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.467216e-02%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.116304e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.485483e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.490871e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.011328e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.705191e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.406880e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.406880e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.751096e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.786872e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.560227e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.098014e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.098014e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.347904e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.347904e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.010887e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.746193e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.665022e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.981103e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.944874e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.379200e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.347219e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.444630e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.919152e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.554863e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.712720e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.806391e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %54 = icmp sgt i32 %53, 65535" (0.000000e+00%)
Noelle:     Loop "  %227 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (4.237885e-06%)
Noelle:     Loop "  %332 = load i32, i32* %330, align 4, !tbaa !83" (3.615943e-08%)
Noelle:     Loop "  %340 = sext i32 %339 to i64" (3.333900e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %Pivot5 = icmp ult i64 %indvars.iv16, 14" (8.886499e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.363879e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.390117e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.512473e-03%)
Noelle:     Loop "  %7 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.474090e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.630703e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.776448e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.202066e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.138324e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.916161e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.499340e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.198251e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.175471e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (8.952063e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.604206e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count" (1.560699e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.247117e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.615943e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.930147e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.792911e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.193261e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.567106e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.282166e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.684603e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.550089e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.510452e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.502207e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.105788e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.007723e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (5.970645e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.400559e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.678264e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.708533e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.271781e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.095443e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.769046e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.076784e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.200450e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.403452e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.256356e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.068945e-04%)
Noelle:     Loop "  %49 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %62, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp slt i64 %indvars.iv, %72" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.230628e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.156838e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.374058e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.027394e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.426851e-05%)
Noelle:     Loop "  %Pivot = icmp ult i64 %indvars.iv58, 17" (1.416003e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.334283e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.321989e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.217850e-05%)
Noelle:     Loop "  %396 = icmp sgt i64 %indvars.iv44, %394" (5.713190e-07%)
Noelle:     Loop "  %504 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.615943e-08%)
Noelle:     Loop "  %516 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.615943e-08%)
Noelle:     Loop "  %528 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.541404e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.231084e-04%)
Noelle:     Loop "  %553 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.714253e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.175615e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.306972e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.306972e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.051831e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (1.995639e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.373675e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.302079e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.461307e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.627087e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.565703e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.474538e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.053429e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.136765e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.880290e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.921682e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.379417e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.941718e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.479770e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.709958e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.529714e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.734376e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.241885e-07%)
Noelle:     Loop "  %163 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.461307e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.581783e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.285276e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.986769e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %183 = sext i32 %182 to i64" (0.000000e+00%)
Noelle:     Loop "  %319 = add nsw i32 %318, 2" (5.373292e-06%)
Noelle:     Loop "  %323 = add nsw i32 %322, 2" (4.057088e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %370 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %352 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.820902e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.525205e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.051856e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.207725e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.206279e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.051856e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.626408e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.424682e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.832900e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.892755e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.713190e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.604712e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.628407e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.362827e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.533626e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (9.980003e-07%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (8.533626e-07%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %441 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %474 = icmp slt i64 %indvars.iv57, %470" (0.000000e+00%)
Noelle:     Loop "  %491 = icmp slt i32 %.36, %490" (0.000000e+00%)
Noelle:     Loop "  %574 = load i32, i32* %7, align 4, !tbaa !30" (1.446377e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.835366e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.147104e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.917683e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.977538e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.688262e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.977538e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.531160e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.773045e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.785509e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %Pivot17 = icmp slt i8 %11, 80" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i32 %.02, %12" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %218 = icmp slt i64 %indvars.iv84, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %197 = icmp slt i64 %indvars.iv90, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %248 = icmp slt i64 %indvars.iv92, %.pre-phi30" (0.000000e+00%)
Noelle:     Loop "  %286 = icmp slt i64 %indvars.iv, %284" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %8 = icmp slt i64 %indvars.iv, %6" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %23" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %153" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in1, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %210" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us15 = icmp ult i64 %indvars.iv24.us14, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us = icmp ult i64 %indvars.iv24.us9, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv24.us, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (2.566578e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us.us = icmp eq i64 %indvars.iv69.us.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %483 = icmp slt i64 %indvars.iv, %481" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.384790e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.526268e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw i32 %60, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %71" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv, %70" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
NOELLE: FixedPoint:       There are 2 different instructions and -3 different loop instructions
NOELLE: FixedPoint:       Normalize the code
noelle-norm /tmp/tmp.iiTBei7fYA -o /tmp/tmp.iiTBei7fYA
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -simplifycfg-sink-common=false -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa -indvars --functionattrs --rpo-functionattrs /tmp/tmp.iiTBei7fYA -o /tmp/tmp.iiTBei7fYA
NOELLE: FixedPoint:     Invocation 3
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopDistribution.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopUnroll.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopWhilify.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopInvariantCodeMotion.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/SCEVSimplification.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Enablers.so -enablers -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier /tmp/tmp.RNARlSFZGc -o /tmp/tmp.iiTBei7fYA
EnablersManager: Start
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.544774e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.894353e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.013689e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.405267e-06%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.776975e-06%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1" (7.501979e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.832804e-06%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.084756e-07%)
Noelle:  Disable loop "7" as cold code
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.490210e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.396522e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.854524e-02%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.334014e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.665391e-04%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.016525e-03%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.665391e-04%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.483939e-03%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.395865e-04%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.564883e-03%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "21" as cold code
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.514044e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.799399e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.068916e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.213643e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.466988e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.008548e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.113947e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.335790e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.241999e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.566400e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.946378e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.766926e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:  Disable loop "55" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.564997e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.111238e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:  Disable loop "58" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:  Disable loop "60" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:  Disable loop "61" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.094911e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.003839e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.237459e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.395328e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:  Disable loop "66" as cold code
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:  Disable loop "67" as cold code
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:  Disable loop "68" as cold code
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.758597e-02%)
Noelle:  Disable loop "69" as cold code
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.772607e-03%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.805846e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.513312e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.286223e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.240080e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:  Disable loop "75" as cold code
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.525597e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:  Disable loop "77" as cold code
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:  Disable loop "78" as cold code
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:  Disable loop "79" as cold code
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:  Disable loop "80" as cold code
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:  Disable loop "81" as cold code
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:  Disable loop "82" as cold code
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:  Disable loop "83" as cold code
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:  Disable loop "84" as cold code
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:  Disable loop "85" as cold code
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:  Disable loop "87" as cold code
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:  Disable loop "88" as cold code
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.725526e-02%)
Noelle:  Disable loop "89" as cold code
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.464604e-02%)
Noelle:  Disable loop "90" as cold code
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.169932e-02%)
Noelle:  Disable loop "91" as cold code
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.475470e-02%)
Noelle:  Disable loop "92" as cold code
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.288537e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.027676e-02%)
Noelle:  Disable loop "94" as cold code
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.138588e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.042242e-02%)
Noelle:  Disable loop "96" as cold code
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.812928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.035402e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:  Disable loop "99" as cold code
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.810349e-02%)
Noelle:  Disable loop "100" as cold code
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv67, %69" (6.558940e-03%)
Noelle:  Disable loop "101" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.262946e-01%)
Noelle:     Loop "  %146 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:  Disable loop "103" as cold code
Noelle:     Loop "  %176 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:  Disable loop "104" as cold code
Noelle:     Loop "  %191 = icmp slt i64 %indvars.iv61, %189" (0.000000e+00%)
Noelle:  Disable loop "105" as cold code
Noelle:     Loop "  %300 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.742781e+00%)
Noelle:     Loop "  %337 = icmp sgt i64 %indvars.iv, -1" (9.661391e-01%)
Noelle:     Loop "  %350 = icmp slt i64 %indvars.iv55, %348" (3.725457e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:  Disable loop "109" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "110" as cold code
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.123017e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:  Disable loop "112" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.029377e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.535361e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.156144e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.496125e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Disable loop "117" as cold code
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:  Disable loop "118" as cold code
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:  Disable loop "119" as cold code
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.405689e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.077314e-03%)
Noelle:  Disable loop "121" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.083239e-04%)
Noelle:  Disable loop "122" as cold code
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.909026e-03%)
Noelle:  Disable loop "123" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.350594e-03%)
Noelle:  Disable loop "124" as cold code
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.753974e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Disable loop "126" as cold code
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.733764e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "128" as cold code
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.649723e-02%)
Noelle:  Disable loop "129" as cold code
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.436418e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.268016e-02%)
Noelle:  Disable loop "131" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.946067e-02%)
Noelle:  Disable loop "132" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:  Disable loop "133" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.967372e-02%)
Noelle:  Disable loop "134" as cold code
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.513369e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.232070e-02%)
Noelle:  Disable loop "136" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.884015e-02%)
Noelle:  Disable loop "137" as cold code
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.084040e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.729710e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:  Disable loop "140" as cold code
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.028479e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.198618e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.048469e-02%)
Noelle:  Disable loop "143" as cold code
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:  Disable loop "144" as cold code
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv18, %95" (2.740440e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv16, %95" (3.808274e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.298736e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:  Disable loop "148" as cold code
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:  Disable loop "149" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "150" as cold code
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.013623e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:  Disable loop "152" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Disable loop "153" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.443173e-02%)
Noelle:  Disable loop "154" as cold code
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.070676e-03%)
Noelle:  Disable loop "155" as cold code
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Disable loop "156" as cold code
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.604630e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.981893e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.650252e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.307747e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:  Disable loop "161" as cold code
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.530653e-02%)
Noelle:  Disable loop "162" as cold code
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:  Disable loop "163" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.049672e-02%)
Noelle:  Disable loop "164" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.550393e-02%)
Noelle:  Disable loop "165" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.481654e-02%)
Noelle:  Disable loop "166" as cold code
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:  Disable loop "167" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.402022e-02%)
Noelle:  Disable loop "168" as cold code
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:  Disable loop "169" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "170" as cold code
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.168714e-01%)
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.450512e-01%)
Noelle:     Loop "  %122 = icmp eq i64 %119, 4" (1.463017e-01%)
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (7.390210e-03%)
Noelle:  Disable loop "174" as cold code
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.430678e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.927813e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.215373e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Disable loop "178" as cold code
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:  Disable loop "179" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.971277e-02%)
Noelle:  Disable loop "180" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Disable loop "181" as cold code
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.650121e-02%)
Noelle:  Disable loop "182" as cold code
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.039588e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.959574e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.341691e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:  Disable loop "186" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Disable loop "187" as cold code
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:  Disable loop "188" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Disable loop "189" as cold code
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.245692e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.467104e-02%)
Noelle:  Disable loop "191" as cold code
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.116251e-02%)
Noelle:  Disable loop "192" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.485271e-03%)
Noelle:  Disable loop "193" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.490709e-03%)
Noelle:  Disable loop "194" as cold code
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:  Disable "x264_cabac_mb_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Disable "x264_cabac_mb_cbp_chroma" as cold function
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Disable "x264_macroblock_cache_ref.799" as cold function
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Disable "zigzag_scan_2x2_dc" as cold function
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Disable "x264_cabac_encode_terminal" as cold function
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Disable "x264_macroblock_cache_mvd" as cold function
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:  Disable "x264_macroblock_cache_rect1.801" as cold function
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Disable "x264_cabac_encode_renorm" as cold function
Noelle:  Function "predict_4x4_h"
Noelle:  Disable "predict_4x4_h" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1019" as cold function
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Disable "x264_cabac_pos.1016" as cold function
Noelle:  Function "bs_size_ue"
Noelle:  Disable "bs_size_ue" as cold function
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:  Disable "predict_8x8c_dc_left.1111" as cold function
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Disable "x264_mb_predict_mv" as cold function
Noelle:  Function "x264_ratecontrol_mb"
Noelle:  Disable "x264_ratecontrol_mb" as cold function
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Disable "x264_cabac_mb_type_intra.1056" as cold function
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:  Disable "x264_cabac_mb_mvd_cpn.1048" as cold function
Noelle:  Function "plane_expand_border"
Noelle:  Disable "plane_expand_border" as cold function
Noelle:  Function "bs_size_ue_big"
Noelle:  Disable "bs_size_ue_big" as cold function
Noelle:  Function "x264_cabac_pos"
Noelle:  Disable "x264_cabac_pos" as cold function
Noelle:  Function "predict_4x4_v"
Noelle:  Disable "predict_4x4_v" as cold function
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:  Disable "predict_16x16_dc_left.1108" as cold function
Noelle:  Function "mc_luma_sse2"
Noelle:  Disable "mc_luma_sse2" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Disable "x264_macroblock_cache_mvd.1052" as cold function
Noelle:  Function "bs_size_te"
Noelle:  Disable "bs_size_te" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:  Disable "x264_macroblock_cache_rect4.1053" as cold function
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Disable "x264_cabac_mb_intra_chroma_pred_mode.1023" as cold function
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:  Disable "x264_cabac_mb_qp_delta.1035" as cold function
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Disable "x264_predictor_difference_mmxext" as cold function
Noelle:  Function "bs_pos"
Noelle:  Disable "bs_pos" as cold function
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Disable "x264_mb_predict_mv_pskip" as cold function
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:  Disable "x264_bitstream_check_buffer" as cold function
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Disable "x264_cabac_mb_cbp_luma.1032" as cold function
Noelle:  Function "x264_cabac_mb_ref"
Noelle:  Disable "x264_cabac_mb_ref" as cold function
Noelle:  Function "x264_frame_expand_border"
Noelle:  Disable "x264_frame_expand_border" as cold function
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:  Disable "predict_8x8c_dc_top.1112" as cold function
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:  Disable "x264_frame_expand_border_filtered" as cold function
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Disable "x264_cabac_mb_intra4x4_pred_mode.1022" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:  Disable "x264_mb_transform_8x8_allowed" as cold function
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Disable "x264_median_mv_mmxext" as cold function
Noelle:  Function "sum_sa8d"
Noelle:  Disable "sum_sa8d" as cold function
Noelle:  Function "sum_satd"
Noelle:  Disable "sum_satd" as cold function
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Disable "x264_cabac_mb_skip" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Disable "x264_cabac_mb_cbp_chroma.1033" as cold function
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:  Disable "x264_mb_analyse_load_costs" as cold function
Noelle:  Function "x264_cabac_context_init"
Noelle:  Disable "x264_cabac_context_init" as cold function
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Disable "predict_16x16_mode_available" as cold function
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Disable "predict_8x8chroma_mode_available" as cold function
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Disable "x264_macroblock_encode_pskip" as cold function
Noelle:  Function "pack16to32_mask.829"
Noelle:  Disable "pack16to32_mask.829" as cold function
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:  Disable "x264_cabac_mb_ref.1024" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1034" as cold function
Noelle:  Function "x264_encoder_open"
Noelle:  Disable "x264_encoder_open" as cold function
Noelle:  Function "x264_clip3.664"
Noelle:  Disable "x264_clip3.664" as cold function
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Disable "predict_4x4_dc_left" as cold function
Noelle:  Function "x264_rdo_init"
Noelle:  Disable "x264_rdo_init" as cold function
Noelle:  Function "x264_clip3.813"
Noelle:  Disable "x264_clip3.813" as cold function
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Disable "x264_mb_analyse_transform_rd" as cold function
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Disable "x264_ratecontrol_qp" as cold function
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Disable "predict_4x4_dc_top" as cold function
Noelle:  Function "x264_clip3.748"
Noelle:  Disable "x264_clip3.748" as cold function
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Disable "x264_macroblock_encode_skip" as cold function
Noelle:  Function "x264_encoder_frame_end"
Noelle:  Disable "x264_encoder_frame_end" as cold function
Noelle:  Function "pack16to32_mask.785"
Noelle:  Disable "pack16to32_mask.785" as cold function
Noelle:  Function "x264_frame_filter"
Noelle:  Disable "x264_frame_filter" as cold function
Noelle:  Function "x264_clip3.1001"
Noelle:  Disable "x264_clip3.1001" as cold function
Noelle:  Function "bs_size_se"
Noelle:  Disable "bs_size_se" as cold function
Noelle:  Function "x264_noise_reduction_update"
Noelle:  Disable "x264_noise_reduction_update" as cold function
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Disable "pack16to32_mask.1051" as cold function
Noelle:  Function "x264_cqm_init"
Noelle:  Disable "x264_cqm_init" as cold function
Noelle:  Function "x264_reference_build_list"
Noelle:  Disable "x264_reference_build_list" as cold function
Noelle:  Function "x264_slice_header_write"
Noelle:  Disable "x264_slice_header_write" as cold function
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Disable "x264_cabac_size_decision2" as cold function
Noelle:  Function "predict_8x8c_dc_128"
Noelle:  Disable "predict_8x8c_dc_128" as cold function
Noelle:  Function "predict_16x16_dc_128"
Noelle:  Disable "predict_16x16_dc_128" as cold function
Noelle:  Function "pack8to32"
Noelle:  Disable "pack8to32" as cold function
Noelle:  Function "x264_slice_init"
Noelle:  Disable "x264_slice_init" as cold function
Noelle:  Function "bs_write_ue_big"
Noelle:  Disable "bs_write_ue_big" as cold function
Noelle:  Function "bs_write"
Noelle:  Disable "bs_write" as cold function
Noelle:  Function "x264_macroblock_slice_init"
Noelle:  Disable "x264_macroblock_slice_init" as cold function
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:  Disable "x264_frame_expand_border_mod16" as cold function
Noelle:  Function "x264_encoder_close"
Noelle:  Disable "x264_encoder_close" as cold function
Noelle:  Function "x264_reference_update"
Noelle:  Disable "x264_reference_update" as cold function
Noelle:  Function "x264_frame_delete"
Noelle:  Disable "x264_frame_delete" as cold function
Noelle:  Function "x264_slice_header_init"
Noelle:  Disable "x264_slice_header_init" as cold function
Noelle:  Function "x264_ratecontrol_start"
Noelle:  Disable "x264_ratecontrol_start" as cold function
Noelle:  Function "x264_ratecontrol_end"
Noelle:  Disable "x264_ratecontrol_end" as cold function
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:  Disable "setup_inverse_delta_pocs" as cold function
Noelle:  Function "bs_write_se"
Noelle:  Disable "bs_write_se" as cold function
Noelle:  Function "x264_cabac_encode_flush"
Noelle:  Disable "x264_cabac_encode_flush" as cold function
Noelle:  Function "x264_frame_copy_picture"
Noelle:  Disable "x264_frame_copy_picture" as cold function
Noelle:  Function "bs_write.943"
Noelle:  Disable "bs_write.943" as cold function
Noelle:  Function "x264_frame_shift"
Noelle:  Disable "x264_frame_shift" as cold function
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Disable "x264_frame_pop_unused" as cold function
Noelle:  Function "x264_free"
Noelle:  Disable "x264_free" as cold function
Noelle:  Function "x264_sei_version_write"
Noelle:  Disable "x264_sei_version_write" as cold function
Noelle:  Function "x264_frame_push"
Noelle:  Disable "x264_frame_push" as cold function
Noelle:  Function "read_frame_y4m"
Noelle:  Disable "read_frame_y4m" as cold function
Noelle:  Function "x264_sps_write"
Noelle:  Disable "x264_sps_write" as cold function
Noelle:  Function "bs_align_1"
Noelle:  Disable "bs_align_1" as cold function
Noelle:  Function "x264_slicetype_decide"
Noelle:  Disable "x264_slicetype_decide" as cold function
Noelle:  Function "x264_nal_end"
Noelle:  Disable "x264_nal_end" as cold function
Noelle:  Function "x264_frame_push_unused"
Noelle:  Disable "x264_frame_push_unused" as cold function
Noelle:  Function "x264_nal_start"
Noelle:  Disable "x264_nal_start" as cold function
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Disable "bs_write_ue_big.944" as cold function
Noelle:  Function "bs_write1"
Noelle:  Disable "bs_write1" as cold function
Noelle:  Function "bs_init"
Noelle:  Disable "bs_init" as cold function
Noelle:  Function "x264_frame_pop"
Noelle:  Disable "x264_frame_pop" as cold function
Noelle:  Function "bs_flush"
Noelle:  Disable "bs_flush" as cold function
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Disable "predict_4x4_dc_128" as cold function
Noelle:  Function "Parse"
Noelle:  Disable "Parse" as cold function
Noelle:  Function "x264_pps_write"
Noelle:  Disable "x264_pps_write" as cold function
Noelle:  Function "get_zone"
Noelle:  Disable "get_zone" as cold function
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Disable "x264_cabac_encode_init" as cold function
Noelle:  Function "x264_frame_new"
Noelle:  Disable "x264_frame_new" as cold function
Noelle:  Function "x264_param_parse"
Noelle:  Disable "x264_param_parse" as cold function
Noelle:  Function "update_vbv"
Noelle:  Disable "update_vbv" as cold function
Noelle:  Function "x264_validate_parameters"
Noelle:  Disable "x264_validate_parameters" as cold function
Noelle:  Function "x264_dct_init_weights"
Noelle:  Disable "x264_dct_init_weights" as cold function
Noelle:  Function "x264_log"
Noelle:  Disable "x264_log" as cold function
Noelle:  Function "x264_reference_reset"
Noelle:  Disable "x264_reference_reset" as cold function
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Disable "x264_thread_sync_stat" as cold function
Noelle:  Function "endian_fix"
Noelle:  Disable "endian_fix" as cold function
Noelle:  Function "x264_validate_levels"
Noelle:  Disable "x264_validate_levels" as cold function
Noelle:  Function "x264_clip3.848"
Noelle:  Disable "x264_clip3.848" as cold function
Noelle:  Function "bs_write1.946"
Noelle:  Disable "bs_write1.946" as cold function
Noelle:  Function "open_file_y4m"
Noelle:  Disable "open_file_y4m" as cold function
Noelle:  Function "x264_macroblock_cache_end"
Noelle:  Disable "x264_macroblock_cache_end" as cold function
Noelle:  Function "write_nalu_bsf"
Noelle:  Disable "write_nalu_bsf" as cold function
Noelle:  Function "bs_write_se.945"
Noelle:  Disable "bs_write_se.945" as cold function
Noelle:  Function "x264_sps_init"
Noelle:  Disable "x264_sps_init" as cold function
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Disable "bs_rbsp_trailing.947" as cold function
Noelle:  Function "x264_cqm_delete"
Noelle:  Disable "x264_cqm_delete" as cold function
Noelle:  Function "bs_write32"
Noelle:  Disable "bs_write32" as cold function
Noelle:  Function "x264_ratecontrol_new"
Noelle:  Disable "x264_ratecontrol_new" as cold function
Noelle:  Function "x264_malloc"
Noelle:  Disable "x264_malloc" as cold function
Noelle:  Function "x264_pixel_init"
Noelle:  Disable "x264_pixel_init" as cold function
Noelle:  Function "x264_macroblock_cache_init"
Noelle:  Disable "x264_macroblock_cache_init" as cold function
Noelle:  Function "endian_fix.949"
Noelle:  Disable "endian_fix.949" as cold function
Noelle:  Function "x264_param_default"
Noelle:  Disable "x264_param_default" as cold function
Noelle:  Function "bs_flush.948"
Noelle:  Disable "bs_flush.948" as cold function
Noelle:  Function "x264_param2string"
Noelle:  Disable "x264_param2string" as cold function
Noelle:  Function "x264_cpu_detect"
Noelle:  Disable "x264_cpu_detect" as cold function
Noelle:  Function "x264_mc_init"
Noelle:  Disable "x264_mc_init" as cold function
Noelle:  Function "set_eop_bsf"
Noelle:  Disable "set_eop_bsf" as cold function
Noelle:  Function "x264_pps_init"
Noelle:  Disable "x264_pps_init" as cold function
Noelle:  Function "x264_clip3.593"
Noelle:  Disable "x264_clip3.593" as cold function
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Disable "x264_mc_init_mmx" as cold function
Noelle:  Function "x264_quant_init"
Noelle:  Disable "x264_quant_init" as cold function
Noelle:  Function "parse_enum"
Noelle:  Disable "parse_enum" as cold function
Noelle:  Function "qp2qscale"
Noelle:  Disable "qp2qscale" as cold function
Noelle:  Function "x264_frame_sort"
Noelle:  Disable "x264_frame_sort" as cold function
Noelle:  Function "x264_atobool"
Noelle:  Disable "x264_atobool" as cold function
Noelle:  Function "x264_atoi"
Noelle:  Disable "x264_atoi" as cold function
Noelle:  Function "mbcmp_init"
Noelle:  Disable "mbcmp_init" as cold function
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Disable "x264_predict_8x8_init" as cold function
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Disable "x264_predict_16x16_init" as cold function
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Disable "x264_predict_4x4_init" as cold function
Noelle:  Function "x264_dct_init"
Noelle:  Disable "x264_dct_init" as cold function
Noelle:  Function "x264_ratecontrol_delete"
Noelle:  Disable "x264_ratecontrol_delete" as cold function
Noelle:  Function "x264_reduce_fraction"
Noelle:  Disable "x264_reduce_fraction" as cold function
Noelle:  Function "x264_zigzag_init"
Noelle:  Disable "x264_zigzag_init" as cold function
Noelle:  Function "x264_print_intra"
Noelle:  Disable "x264_print_intra" as cold function
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Disable "x264_predict_8x8c_init" as cold function
Noelle:  Function "x264_picture_alloc"
Noelle:  Disable "x264_picture_alloc" as cold function
Noelle:  Function "get_frame_total_y4m"
Noelle:  Disable "get_frame_total_y4m" as cold function
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Disable "x264_predict_16x16_init_mmx" as cold function
Noelle:  Function "x264_deblock_init"
Noelle:  Disable "x264_deblock_init" as cold function
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Disable "x264_predict_8x8_init_mmx" as cold function
Noelle:  Function "x264_mdate"
Noelle:  Disable "x264_mdate" as cold function
Noelle:  Function "endian_fix32"
Noelle:  Disable "endian_fix32" as cold function
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Disable "x264_predict_8x8c_init_mmx" as cold function
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Disable "x264_predict_4x4_init_mmx" as cold function
Noelle:  Function "x264_clip3f"
Noelle:  Disable "x264_clip3f" as cold function
Noelle:  Function "parse_zones"
Noelle:  Disable "parse_zones" as cold function
Noelle:  Function "x264_picture_clean"
Noelle:  Disable "x264_picture_clean" as cold function
Noelle:  Function "close_file_bsf"
Noelle:  Disable "close_file_bsf" as cold function
Noelle:  Function "close_file_y4m"
Noelle:  Disable "close_file_y4m" as cold function
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Disable "x264_ratecontrol_summary" as cold function
Noelle:  Function "open_file_bsf"
Noelle:  Disable "open_file_bsf" as cold function
Noelle:  Function "x264_clip3"
Noelle:  Disable "x264_clip3" as cold function
Noelle:  Function "set_param_bsf"
Noelle:  Disable "set_param_bsf" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3" as cold function
Noelle:  Function "row_bits_so_far"
Noelle:  Disable "row_bits_so_far" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Disable "x264_macroblock_cache_mvd.842" as cold function
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:  Disable "x264_slicetype_mb_cost" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3" as cold function
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Disable "x264_median_mv_mmxext.824" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x8_sse2" as cold function
Noelle:  Function "accum_p_qp_update"
Noelle:  Disable "accum_p_qp_update" as cold function
Noelle:  Function "update_predictor"
Noelle:  Disable "update_predictor" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x4_ssse3" as cold function
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Disable "x264_me_refine_qpel" as cold function
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Disable "x264_me_refine_bidir_satd" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x4_ssse3" as cold function
Noelle:  Function "x264_me_refine_bidir"
Noelle:  Disable "x264_me_refine_bidir" as cold function
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Disable "x264_me_refine_bidir_rd" as cold function
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:  Disable "x264_me_refine_qpel_rd" as cold function
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Disable "x264_macroblock_cache_mv.841" as cold function
Noelle:  Function "x264_rc_analyse_slice"
Noelle:  Disable "x264_rc_analyse_slice" as cold function
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:  Disable "predict_16x16_p_mmxext" as cold function
Noelle:  Function "x264_clip3f.856"
Noelle:  Disable "x264_clip3f.856" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x4_mmxext" as cold function
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Disable "x264_partition_i4x4_size_cabac" as cold function
Noelle:  Function "ac_energy_mb"
Noelle:  Disable "ac_energy_mb" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x8_mmxext" as cold function
Noelle:  Function "x264_adaptive_quant"
Noelle:  Disable "x264_adaptive_quant" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x4_mmxext" as cold function
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Disable "cavlc_intra4x4_pred_size" as cold function
Noelle:  Function "predict_size"
Noelle:  Disable "predict_size" as cold function
Noelle:  Function "fix_underflow"
Noelle:  Disable "fix_underflow" as cold function
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Disable "x264_partition_i4x4_size_cavlc" as cold function
Noelle:  Function "find_underflow"
Noelle:  Disable "find_underflow" as cold function
Noelle:  Function "qscale2qp"
Noelle:  Disable "qscale2qp" as cold function
Noelle:  Function "count_expected_bits"
Noelle:  Disable "count_expected_bits" as cold function
Noelle:  Function "vbv_pass2"
Noelle:  Disable "vbv_pass2" as cold function
Noelle:  Function "clip_qscale"
Noelle:  Disable "clip_qscale" as cold function
Noelle:  Function "get_diff_limited_q"
Noelle:  Disable "get_diff_limited_q" as cold function
Noelle:  Function "get_qscale"
Noelle:  Disable "get_qscale" as cold function
Noelle:  Function "qscale2bits"
Noelle:  Disable "qscale2bits" as cold function
Noelle:  Function "init_pass2"
Noelle:  Disable "init_pass2" as cold function
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Disable "x264_ratecontrol_get_estimated_size" as cold function
Noelle:  Function "x264_slicetype_path"
Noelle:  Disable "x264_slicetype_path" as cold function
Noelle:  Function "rate_estimate_qscale"
Noelle:  Disable "rate_estimate_qscale" as cold function
Noelle:  Function "update_vbv_plan"
Noelle:  Disable "update_vbv_plan" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:  Disable "x264_macroblock_cache_rect4.843" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:  Disable "x264_mb_analyse_inter_b8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:  Disable "x264_mb_analyse_inter_b16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x8_mmxext" as cold function
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:  Disable "x264_adaptive_quant_frame" as cold function
Noelle:  Function "x264_slicetype_path_cost"
Noelle:  Disable "x264_slicetype_path_cost" as cold function
Noelle:  Function "x264_slicetype_path_search"
Noelle:  Disable "x264_slicetype_path_search" as cold function
Noelle:  Function "scenecut"
Noelle:  Disable "scenecut" as cold function
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Disable "x264_ratecontrol_set_estimated_size" as cold function
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:  Disable "x264_slicetype_frame_cost" as cold function
Noelle:  Function "x264_lowres_context_init"
Noelle:  Disable "x264_lowres_context_init" as cold function
Noelle:  Function "x264_slicetype_analyse"
Noelle:  Disable "x264_slicetype_analyse" as cold function
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Disable "predict_8x8_vr_mmxext" as cold function
Noelle:  Function "parse_zone"
Noelle:  Disable "parse_zone" as cold function
Noelle:  Function "x264_frame_unshift"
Noelle:  Disable "x264_frame_unshift" as cold function
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Disable "array_non_zero_count_mmx.1086" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:  Disable "x264_macroblock_luma_write_cavlc.1087" as cold function
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Disable "bs_size_ue_big.963" as cold function
Noelle:  Function "bs_size_se.962"
Noelle:  Disable "bs_size_se.962" as cold function
Noelle:  Function "scaling_list_write"
Noelle:  Disable "scaling_list_write" as cold function
Noelle:  Function "transpose"
Noelle:  Disable "transpose" as cold function
Noelle:  Function "endian_fix32.950"
Noelle:  Disable "endian_fix32.950" as cold function
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Disable "x264_thread_sync_ratecontrol" as cold function
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:  Disable "x264_ratecontrol_slice_type" as cold function
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Disable "x264_clip_uint8.729" as cold function
Noelle:  Function "predict_row_size"
Noelle:  Disable "predict_row_size" as cold function
Noelle:  Function "predict_row_size_sum"
Noelle:  Disable "predict_row_size_sum" as cold function
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:  Disable "block_residual_write_cavlc.1085" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Disable "x264_mb_predict_non_zero_code.1088" as cold function
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Disable "bs_write_vlc.1090" as cold function
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Disable "x264_frame_cond_broadcast" as cold function
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Disable "cavlc_mb_mvd.1093" as cold function
Noelle:  Function "deblock_luma_c"
Noelle:  Disable "deblock_luma_c" as cold function
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Disable "x264_clip_uint8.704" as cold function
Noelle:  Function "x264_clip3.703"
Noelle:  Disable "x264_clip3.703" as cold function
Noelle:  Function "deblock_chroma_c"
Noelle:  Disable "deblock_chroma_c" as cold function
Noelle:  Function "deblock_luma_intra_c"
Noelle:  Disable "deblock_luma_intra_c" as cold function
Noelle:  Function "deblock_chroma_intra_c"
Noelle:  Disable "deblock_chroma_intra_c" as cold function
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Disable "deblock_h_chroma_intra_c" as cold function
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Disable "deblock_v_chroma_intra_c" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1066" as cold function
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Disable "x264_cabac_mb_transform_size.1018" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Disable "x264_cabac_mb_sub_p_partition.1026" as cold function
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Disable "x264_macroblock_encode_p4x4" as cold function
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:  Disable "x264_macroblock_encode_p8x8" as cold function
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:  Disable "x264_macroblock_probe_skip" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Disable "x264_cabac_mb8x8_mvd.1027" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Disable "x264_cabac_mb_sub_b_partition.1028" as cold function
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:  Disable "x264_macroblock_write_cavlc" as cold function
Noelle:  Function "bs_pos.1063"
Noelle:  Disable "bs_pos.1063" as cold function
Noelle:  Function "bs_write1.1065"
Noelle:  Disable "bs_write1.1065" as cold function
Noelle:  Function "bs_write_ue"
Noelle:  Disable "bs_write_ue" as cold function
Noelle:  Function "bs_align_0"
Noelle:  Disable "bs_align_0" as cold function
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Disable "deblock_h_luma_intra_c" as cold function
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Disable "x264_predict_lossless_16x16" as cold function
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Disable "x264_predict_lossless_8x8" as cold function
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Disable "x264_predict_lossless_4x4" as cold function
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Disable "x264_predict_lossless_8x8_chroma" as cold function
Noelle:  Function "bs_write.1069"
Noelle:  Disable "bs_write.1069" as cold function
Noelle:  Function "bs_write_te"
Noelle:  Disable "bs_write_te" as cold function
Noelle:  Function "bs_write_se.1072"
Noelle:  Disable "bs_write_se.1072" as cold function
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Disable "cavlc_mb8x8_mvd.1074" as cold function
Noelle:  Function "x264_quant_8x8"
Noelle:  Disable "x264_quant_8x8" as cold function
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Disable "x264_mb_encode_i8x8" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1083" as cold function
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Disable "cavlc_qp_delta.1084" as cold function
Noelle:  Function "pixel_satd_wxh"
Noelle:  Disable "pixel_satd_wxh" as cold function
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Disable "x264_mb_mc_8x8" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Disable "x264_mb_load_mv_direct8x8" as cold function
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:  Disable "x264_macroblock_cache_rect1" as cold function
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:  Disable "x264_macroblock_cache_rect4" as cold function
Noelle:  Function "pack16to32_mask"
Noelle:  Disable "pack16to32_mask" as cold function
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Disable "x264_macroblock_cache_mv" as cold function
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Disable "x264_macroblock_cache_ref" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_temporal" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_spatial" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:  Disable "x264_mb_predict_mv_direct16x16" as cold function
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:  Disable "predict_16x16_dc_mmxext" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_sse2" as cold function
Noelle:  Function "pixel_sa8d_wxh"
Noelle:  Disable "pixel_sa8d_wxh" as cold function
Noelle:  Function "pixel_hadamard_ac"
Noelle:  Disable "pixel_hadamard_ac" as cold function
Noelle:  Function "ssim_end1"
Noelle:  Disable "ssim_end1" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3_phadd" as cold function
Noelle:  Function "mc_luma_mmxext"
Noelle:  Disable "mc_luma_mmxext" as cold function
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Disable "deblock_v_luma_intra_c" as cold function
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Disable "deblock_h_chroma_c" as cold function
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Disable "deblock_v_chroma_c" as cold function
Noelle:  Function "deblock_h_luma_c"
Noelle:  Disable "deblock_h_luma_c" as cold function
Noelle:  Function "deblock_v_luma_c"
Noelle:  Disable "deblock_v_luma_c" as cold function
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:  Disable "restore_cavlc_nnz_row" as cold function
Noelle:  Function "endian_fix.1095"
Noelle:  Disable "endian_fix.1095" as cold function
Noelle:  Function "bs_flush.1096"
Noelle:  Disable "bs_flush.1096" as cold function
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Disable "munge_cavlc_nnz" as cold function
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:  Disable "munge_cavlc_nnz_row" as cold function
Noelle:  Function "endian_fix32.1097"
Noelle:  Disable "endian_fix32.1097" as cold function
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:  Disable "x264_frame_expand_border_lowres" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:  Disable "x264_macroblock_bipred_init" as cold function
Noelle:  Function "get_ref_mmxext"
Noelle:  Disable "get_ref_mmxext" as cold function
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:  Disable "x264_hpel_filter_mmxext" as cold function
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:  Disable "x264_hpel_filter_sse2_amd" as cold function
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:  Disable "x264_hpel_filter_sse2_misalign" as cold function
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Disable "mc_luma_cache64_sse2" as cold function
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Disable "get_ref_cache64_sse2" as cold function
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Disable "get_ref_sse2_misalign" as cold function
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Disable "x264_mb_mc_direct8x8" as cold function
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Disable "x264_mb_mc_01xywh" as cold function
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Disable "x264_mb_mc_1xywh" as cold function
Noelle:  Function "strtable_lookup"
Noelle:  Disable "strtable_lookup" as cold function
Noelle:  Function "x264_decimate_score64"
Noelle:  Disable "x264_decimate_score64" as cold function
Noelle:  Function "x264_coeff_last4"
Noelle:  Disable "x264_coeff_last4" as cold function
Noelle:  Function "x264_coeff_last15"
Noelle:  Disable "x264_coeff_last15" as cold function
Noelle:  Function "x264_coeff_last16"
Noelle:  Disable "x264_coeff_last16" as cold function
Noelle:  Function "x264_coeff_last64"
Noelle:  Disable "x264_coeff_last64" as cold function
Noelle:  Function "parse_qpfile"
Noelle:  Disable "parse_qpfile" as cold function
Noelle:  Function "Help"
Noelle:  Disable "Help" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "mk_flushContextID"
Noelle:  Disable "mk_flushContextID" as cold function
Noelle:  Function "x264_decimate_score16"
Noelle:  Disable "x264_decimate_score16" as cold function
Noelle:  Function "mk_createWriter"
Noelle:  Disable "mk_createWriter" as cold function
Noelle:  Function "mk_createContext"
Noelle:  Disable "mk_createContext" as cold function
Noelle:  Function "mk_destroyContexts"
Noelle:  Disable "mk_destroyContexts" as cold function
Noelle:  Function "mk_writeHeader"
Noelle:  Disable "mk_writeHeader" as cold function
Noelle:  Function "mk_writeUInt"
Noelle:  Disable "mk_writeUInt" as cold function
Noelle:  Function "mk_writeStr"
Noelle:  Disable "mk_writeStr" as cold function
Noelle:  Function "mk_closeContext"
Noelle:  Disable "mk_closeContext" as cold function
Noelle:  Function "mk_writeFloat"
Noelle:  Disable "mk_writeFloat" as cold function
Noelle:  Function "quant_8x8"
Noelle:  Disable "quant_8x8" as cold function
Noelle:  Function "parse_cqm"
Noelle:  Disable "parse_cqm" as cold function
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Disable "zigzag_scan_8x8_frame" as cold function
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Disable "zigzag_scan_4x4_frame" as cold function
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Disable "zigzag_sub_8x8_frame" as cold function
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Disable "zigzag_sub_4x4_frame" as cold function
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:  Disable "zigzag_interleave_8x8_cavlc" as cold function
Noelle:  Function "x264_cqm_parse_file"
Noelle:  Disable "x264_cqm_parse_file" as cold function
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:  Disable "x264_cqm_parse_jmlist" as cold function
Noelle:  Function "mk_writeBin"
Noelle:  Disable "mk_writeBin" as cold function
Noelle:  Function "quant_4x4"
Noelle:  Disable "quant_4x4" as cold function
Noelle:  Function "quant_4x4_dc"
Noelle:  Disable "quant_4x4_dc" as cold function
Noelle:  Function "quant_2x2_dc"
Noelle:  Disable "quant_2x2_dc" as cold function
Noelle:  Function "dequant_4x4"
Noelle:  Disable "dequant_4x4" as cold function
Noelle:  Function "dequant_4x4_dc"
Noelle:  Disable "dequant_4x4_dc" as cold function
Noelle:  Function "dequant_8x8"
Noelle:  Disable "dequant_8x8" as cold function
Noelle:  Function "x264_denoise_dct"
Noelle:  Disable "x264_denoise_dct" as cold function
Noelle:  Function "x264_decimate_score15"
Noelle:  Disable "x264_decimate_score15" as cold function
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:  Disable "x264_pixel_sad_4x8" as cold function
Noelle:  Function "close_file_yuv"
Noelle:  Disable "close_file_yuv" as cold function
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Disable "x264_encoder_reconfig" as cold function
Noelle:  Function "x264_thread_sync_context"
Noelle:  Disable "x264_thread_sync_context" as cold function
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Disable "bs_rbsp_trailing" as cold function
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:  Disable "x264_pixel_sad_16x16" as cold function
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:  Disable "x264_pixel_sad_16x8" as cold function
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:  Disable "x264_pixel_sad_8x16" as cold function
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:  Disable "x264_pixel_sad_8x8" as cold function
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:  Disable "x264_pixel_sad_8x4" as cold function
Noelle:  Function "read_frame_yuv"
Noelle:  Disable "read_frame_yuv" as cold function
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:  Disable "x264_pixel_sad_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Disable "x264_pixel_sad_x3_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Disable "x264_pixel_sad_x3_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Disable "x264_pixel_sad_x3_8x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Disable "x264_pixel_sad_x3_8x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Disable "x264_pixel_sad_x3_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Disable "x264_pixel_sad_x3_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Disable "x264_pixel_sad_x3_4x4" as cold function
Noelle:  Function "mk_closeCluster"
Noelle:  Disable "mk_closeCluster" as cold function
Noelle:  Function "mk_flushContextData"
Noelle:  Disable "mk_flushContextData" as cold function
Noelle:  Function "mk_appendContextData"
Noelle:  Disable "mk_appendContextData" as cold function
Noelle:  Function "mk_writeID"
Noelle:  Disable "mk_writeID" as cold function
Noelle:  Function "x264_clip3.467"
Noelle:  Disable "x264_clip3.467" as cold function
Noelle:  Function "mk_writeSize"
Noelle:  Disable "mk_writeSize" as cold function
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Disable "mk_writeFloatRaw" as cold function
Noelle:  Function "mk_startFrame"
Noelle:  Disable "mk_startFrame" as cold function
Noelle:  Function "mk_flushFrame"
Noelle:  Disable "mk_flushFrame" as cold function
Noelle:  Function "x264_atof"
Noelle:  Disable "x264_atof" as cold function
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Disable "mk_ebmlSizeSize" as cold function
Noelle:  Function "mk_ebmlSIntSize"
Noelle:  Disable "mk_ebmlSIntSize" as cold function
Noelle:  Function "mk_writeSInt"
Noelle:  Disable "mk_writeSInt" as cold function
Noelle:  Function "mk_setFrameFlags"
Noelle:  Disable "mk_setFrameFlags" as cold function
Noelle:  Function "mk_addFrameData"
Noelle:  Disable "mk_addFrameData" as cold function
Noelle:  Function "mk_close"
Noelle:  Disable "mk_close" as cold function
Noelle:  Function "open_file_yuv"
Noelle:  Disable "open_file_yuv" as cold function
Noelle:  Function "get_frame_total_yuv"
Noelle:  Disable "get_frame_total_yuv" as cold function
Noelle:  Function "bs_write_vlc"
Noelle:  Disable "bs_write_vlc" as cold function
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Disable "x264_rd_cost_subpart" as cold function
Noelle:  Function "x264_partition_size_cabac"
Noelle:  Disable "x264_partition_size_cabac" as cold function
Noelle:  Function "x264_partition_size_cavlc"
Noelle:  Disable "x264_partition_size_cavlc" as cold function
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Disable "cavlc_mb8x8_mvd" as cold function
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Disable "cavlc_mb_mvd" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:  Disable "x264_macroblock_luma_write_cavlc" as cold function
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Disable "array_non_zero_count_mmx" as cold function
Noelle:  Function "block_residual_write_cavlc"
Noelle:  Disable "block_residual_write_cavlc" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Disable "x264_mb_predict_non_zero_code" as cold function
Noelle:  Function "x264_rd_cost_part"
Noelle:  Disable "x264_rd_cost_part" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Disable "x264_cabac_mb8x8_mvd" as cold function
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Disable "array_non_zero_int_mmx" as cold function
Noelle:  Function "array_non_zero_int_c"
Noelle:  Disable "array_non_zero_int_c" as cold function
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Disable "x264_subpartition_size_cabac" as cold function
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Disable "x264_subpartition_size_cavlc" as cold function
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:  Disable "x264_macroblock_size_cavlc" as cold function
Noelle:  Function "cavlc_qp_delta"
Noelle:  Disable "cavlc_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Disable "x264_cabac_mb_transform_size" as cold function
Noelle:  Function "predict_16x16_dc_top"
Noelle:  Disable "predict_16x16_dc_top" as cold function
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:  Disable "pixel_avg_weight_wxh" as cold function
Noelle:  Function "pixel_avg"
Noelle:  Disable "pixel_avg" as cold function
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Disable "x264_predict_8x8_filter" as cold function
Noelle:  Function "predict_16x16_v"
Noelle:  Disable "predict_16x16_v" as cold function
Noelle:  Function "predict_16x16_h"
Noelle:  Disable "predict_16x16_h" as cold function
Noelle:  Function "predict_16x16_dc"
Noelle:  Disable "predict_16x16_dc" as cold function
Noelle:  Function "predict_16x16_p"
Noelle:  Disable "predict_16x16_p" as cold function
Noelle:  Function "predict_16x16_dc_left"
Noelle:  Disable "predict_16x16_dc_left" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Disable "x264_cabac_mb_sub_p_partition" as cold function
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Disable "x264_clip_uint8.650" as cold function
Noelle:  Function "predict_8x8c_v"
Noelle:  Disable "predict_8x8c_v" as cold function
Noelle:  Function "predict_8x8c_h"
Noelle:  Disable "predict_8x8c_h" as cold function
Noelle:  Function "predict_8x8c_dc"
Noelle:  Disable "predict_8x8c_dc" as cold function
Noelle:  Function "x264_realloc"
Noelle:  Disable "x264_realloc" as cold function
Noelle:  Function "x264_slurp_file"
Noelle:  Disable "x264_slurp_file" as cold function
Noelle:  Function "x264_coeff_last_internal"
Noelle:  Disable "x264_coeff_last_internal" as cold function
Noelle:  Function "x264_decimate_score_internal"
Noelle:  Disable "x264_decimate_score_internal" as cold function
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Disable "x264_partition_i8x8_size_cabac" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Disable "x264_mb_cache_mv_b8x8" as cold function
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Disable "x264_macroblock_cache_skip" as cold function
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Disable "x264_macroblock_cache_intra8x8_pred" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Disable "x264_mb_analyse_inter_p4x4_chroma" as cold function
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Disable "x264_rd_cost_i4x4" as cold function
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Disable "x264_rd_cost_i8x8" as cold function
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Disable "x264_rd_cost_i8x8_chroma" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:  Disable "x264_i8x8_chroma_size_cabac" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:  Disable "x264_i8x8_chroma_size_cavlc" as cold function
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Disable "x264_mb_cache_mv_b16x8" as cold function
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:  Disable "x264_partition_i8x8_size_cavlc" as cold function
Noelle:  Function "open_file_mkv"
Noelle:  Disable "open_file_mkv" as cold function
Noelle:  Function "set_param_mkv"
Noelle:  Disable "set_param_mkv" as cold function
Noelle:  Function "gcd"
Noelle:  Disable "gcd" as cold function
Noelle:  Function "write_nalu_mkv"
Noelle:  Disable "write_nalu_mkv" as cold function
Noelle:  Function "write_header_mkv"
Noelle:  Disable "write_header_mkv" as cold function
Noelle:  Function "set_eop_mkv"
Noelle:  Disable "set_eop_mkv" as cold function
Noelle:  Function "close_file_mkv"
Noelle:  Disable "close_file_mkv" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:  Disable "x264_mb_analyse_inter_p8x8_mixed_ref" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Disable "x264_cabac_mb_sub_b_partition" as cold function
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Disable "x264_quant_dc_trellis" as cold function
Noelle:  Function "quant_trellis_cabac"
Noelle:  Disable "quant_trellis_cabac" as cold function
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Disable "x264_cabac_size_decision_noup2" as cold function
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Disable "x264_quant_4x4_trellis" as cold function
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Disable "x264_quant_8x8_trellis" as cold function
Noelle:  Function "x264_intra_rd_refine"
Noelle:  Disable "x264_intra_rd_refine" as cold function
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Disable "x264_macroblock_probe_pskip" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Disable "x264_pixel_sad_x4_16x16" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:  Disable "x264_mb_analyse_inter_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:  Disable "x264_mb_analyse_inter_p4x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:  Disable "x264_mb_analyse_inter_b8x16" as cold function
Noelle:  Function "x264_refine_bidir"
Noelle:  Disable "x264_refine_bidir" as cold function
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Disable "x264_mb_analyse_transform" as cold function
Noelle:  Function "x264_psy_trellis_init"
Noelle:  Disable "x264_psy_trellis_init" as cold function
Noelle:  Function "x264_me_search"
Noelle:  Disable "x264_me_search" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Disable "x264_mb_cache_mv_b8x16" as cold function
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:  Disable "x264_pixel_ssd_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Disable "x264_pixel_sad_x4_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Disable "x264_pixel_sad_x4_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Disable "x264_pixel_sad_x4_4x4" as cold function
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:  Disable "x264_pixel_ssd_16x16" as cold function
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:  Disable "x264_pixel_ssd_16x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:  Disable "x264_pixel_ssd_8x16" as cold function
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:  Disable "x264_pixel_ssd_8x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:  Disable "x264_pixel_ssd_8x4" as cold function
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:  Disable "x264_pixel_ssd_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Disable "x264_pixel_sad_x4_8x8" as cold function
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Disable "x264_pixel_satd_16x16" as cold function
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Disable "x264_pixel_satd_16x8" as cold function
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Disable "x264_pixel_satd_8x16" as cold function
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Disable "x264_pixel_satd_8x8" as cold function
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Disable "x264_pixel_satd_8x4" as cold function
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Disable "x264_pixel_satd_4x8" as cold function
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Disable "x264_pixel_satd_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Disable "x264_pixel_satd_x3_16x16" as cold function
Noelle:  Function "sub16x16_dct8"
Noelle:  Disable "sub16x16_dct8" as cold function
Noelle:  Function "sub4x4_dct"
Noelle:  Disable "sub4x4_dct" as cold function
Noelle:  Function "add4x4_idct"
Noelle:  Disable "add4x4_idct" as cold function
Noelle:  Function "sub8x8_dct"
Noelle:  Disable "sub8x8_dct" as cold function
Noelle:  Function "add8x8_idct"
Noelle:  Disable "add8x8_idct" as cold function
Noelle:  Function "sub16x16_dct"
Noelle:  Disable "sub16x16_dct" as cold function
Noelle:  Function "add16x16_idct"
Noelle:  Disable "add16x16_idct" as cold function
Noelle:  Function "sub8x8_dct8"
Noelle:  Disable "sub8x8_dct8" as cold function
Noelle:  Function "add8x8_idct8"
Noelle:  Disable "add8x8_idct8" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Disable "x264_pixel_satd_x3_16x8" as cold function
Noelle:  Function "add16x16_idct8"
Noelle:  Disable "add16x16_idct8" as cold function
Noelle:  Function "dct4x4dc"
Noelle:  Disable "dct4x4dc" as cold function
Noelle:  Function "idct4x4dc"
Noelle:  Disable "idct4x4dc" as cold function
Noelle:  Function "pixel_sub_wxh"
Noelle:  Disable "pixel_sub_wxh" as cold function
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Disable "zigzag_scan_8x8_field" as cold function
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Disable "zigzag_scan_4x4_field" as cold function
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Disable "zigzag_sub_8x8_field" as cold function
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Disable "zigzag_sub_4x4_field" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Disable "x264_pixel_hadamard_ac_8x16" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Disable "x264_pixel_hadamard_ac_8x8" as cold function
Noelle:  Function "x264_pixel_ads4"
Noelle:  Disable "x264_pixel_ads4" as cold function
Noelle:  Function "x264_pixel_ads2"
Noelle:  Disable "x264_pixel_ads2" as cold function
Noelle:  Function "x264_pixel_ads1"
Noelle:  Disable "x264_pixel_ads1" as cold function
Noelle:  Function "x264_pixel_var_16x16"
Noelle:  Disable "x264_pixel_var_16x16" as cold function
Noelle:  Function "x264_pixel_var_8x8"
Noelle:  Disable "x264_pixel_var_8x8" as cold function
Noelle:  Function "ssim_4x4x2_core"
Noelle:  Disable "ssim_4x4x2_core" as cold function
Noelle:  Function "ssim_end4"
Noelle:  Disable "ssim_end4" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Disable "x264_pixel_hadamard_ac_16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:  Disable "x264_mb_analyse_inter_p8x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:  Disable "x264_mb_analyse_inter_p4x8" as cold function
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Disable "x264_mb_cache_mv_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:  Disable "x264_mb_analyse_inter_p16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:  Disable "x264_mb_analyse_inter_p8x16" as cold function
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Disable "x264_macroblock_probe_bskip" as cold function
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:  Disable "x264_mb_analyse_inter_direct" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:  Disable "x264_mb_analyse_inter_b16x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Disable "x264_pixel_satd_x4_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Disable "x264_pixel_satd_x3_8x16" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Disable "x264_pixel_satd_x3_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Disable "x264_pixel_satd_x3_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Disable "x264_pixel_satd_x3_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Disable "x264_pixel_satd_x3_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Disable "x264_pixel_satd_x4_16x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Disable "x264_pixel_satd_x4_16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Disable "x264_pixel_satd_x4_8x16" as cold function
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:  Disable "x264_pixel_ssim_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Disable "x264_pixel_satd_x4_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Disable "x264_pixel_satd_x4_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Disable "x264_pixel_satd_x4_4x4" as cold function
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Disable "x264_pixel_sa8d_16x16" as cold function
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Disable "x264_pixel_sa8d_16x8" as cold function
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Disable "x264_pixel_sa8d_8x16" as cold function
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Disable "x264_pixel_sa8d_8x8" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Disable "x264_pixel_hadamard_ac_16x16" as cold function
Noelle:  Function "mc_copy_w8"
Noelle:  Disable "mc_copy_w8" as cold function
Noelle:  Function "mc_copy_w16"
Noelle:  Disable "mc_copy_w16" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x8_mmxext" as cold function
Noelle:  Function "pixel_avg_2x2"
Noelle:  Disable "pixel_avg_2x2" as cold function
Noelle:  Function "mc_copy_w4"
Noelle:  Disable "mc_copy_w4" as cold function
Noelle:  Function "plane_copy"
Noelle:  Disable "plane_copy" as cold function
Noelle:  Function "hpel_filter"
Noelle:  Disable "hpel_filter" as cold function
Noelle:  Function "prefetch_fenc_null"
Noelle:  Disable "prefetch_fenc_null" as cold function
Noelle:  Function "prefetch_ref_null"
Noelle:  Disable "prefetch_ref_null" as cold function
Noelle:  Function "memzero_aligned"
Noelle:  Disable "memzero_aligned" as cold function
Noelle:  Function "frame_init_lowres_core"
Noelle:  Disable "frame_init_lowres_core" as cold function
Noelle:  Function "x264_clip_uint8"
Noelle:  Disable "x264_clip_uint8" as cold function
Noelle:  Function "pixel_avg_16x16"
Noelle:  Disable "pixel_avg_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Disable "x264_pixel_sad_x4_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Disable "x264_pixel_sad_x4_8x16" as cold function
Noelle:  Function "x264_psnr"
Noelle:  Disable "x264_psnr" as cold function
Noelle:  Function "x264_frame_dump"
Noelle:  Disable "x264_frame_dump" as cold function
Noelle:  Function "x264_frame_init_lowres"
Noelle:  Disable "x264_frame_init_lowres" as cold function
Noelle:  Function "mc_luma"
Noelle:  Disable "mc_luma" as cold function
Noelle:  Function "get_ref"
Noelle:  Disable "get_ref" as cold function
Noelle:  Function "mc_chroma"
Noelle:  Disable "mc_chroma" as cold function
Noelle:  Function "mc_copy"
Noelle:  Disable "mc_copy" as cold function
Noelle:  Function "pixel_avg_16x8"
Noelle:  Disable "pixel_avg_16x8" as cold function
Noelle:  Function "pixel_avg_8x16"
Noelle:  Disable "pixel_avg_8x16" as cold function
Noelle:  Function "pixel_avg_8x8"
Noelle:  Disable "pixel_avg_8x8" as cold function
Noelle:  Function "pixel_avg_8x4"
Noelle:  Disable "pixel_avg_8x4" as cold function
Noelle:  Function "pixel_avg_4x8"
Noelle:  Disable "pixel_avg_4x8" as cold function
Noelle:  Function "pixel_avg_4x4"
Noelle:  Disable "pixel_avg_4x4" as cold function
Noelle:  Function "pixel_avg_4x2"
Noelle:  Disable "pixel_avg_4x2" as cold function
Noelle:  Function "pixel_avg_2x4"
Noelle:  Disable "pixel_avg_2x4" as cold function
Noelle:  Function "pack16to32"
Noelle:  Disable "pack16to32" as cold function
Noelle:  Function "predict_8x8_vr"
Noelle:  Disable "predict_8x8_vr" as cold function
Noelle:  Function "predict_8x8_hd"
Noelle:  Disable "predict_8x8_hd" as cold function
Noelle:  Function "predict_8x8_vl"
Noelle:  Disable "predict_8x8_vl" as cold function
Noelle:  Function "predict_8x8_hu"
Noelle:  Disable "predict_8x8_hu" as cold function
Noelle:  Function "predict_8x8_dc_left"
Noelle:  Disable "predict_8x8_dc_left" as cold function
Noelle:  Function "predict_8x8_dc_top"
Noelle:  Disable "predict_8x8_dc_top" as cold function
Noelle:  Function "predict_8x8_dc_128"
Noelle:  Disable "predict_8x8_dc_128" as cold function
Noelle:  Function "pack8to16"
Noelle:  Disable "pack8to16" as cold function
Noelle:  Function "predict_8x8_ddr"
Noelle:  Disable "predict_8x8_ddr" as cold function
Noelle:  Function "predict_4x4_dc"
Noelle:  Disable "predict_4x4_dc" as cold function
Noelle:  Function "predict_4x4_ddl"
Noelle:  Disable "predict_4x4_ddl" as cold function
Noelle:  Function "predict_4x4_ddr"
Noelle:  Disable "predict_4x4_ddr" as cold function
Noelle:  Function "predict_4x4_vr"
Noelle:  Disable "predict_4x4_vr" as cold function
Noelle:  Function "predict_4x4_hd"
Noelle:  Disable "predict_4x4_hd" as cold function
Noelle:  Function "predict_4x4_vl"
Noelle:  Disable "predict_4x4_vl" as cold function
Noelle:  Function "predict_4x4_hu"
Noelle:  Disable "predict_4x4_hu" as cold function
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:  Disable "x264_pixel_ssd_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x8_sse2" as cold function
Noelle:  Function "pixel_avg_wxh"
Noelle:  Disable "pixel_avg_wxh" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x16_sse2" as cold function
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Disable "x264_mb_analyse_b_rd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x16_sse2" as cold function
Noelle:  Function "predict_8x8c_p"
Noelle:  Disable "predict_8x8c_p" as cold function
Noelle:  Function "predict_8x8c_dc_left"
Noelle:  Disable "predict_8x8c_dc_left" as cold function
Noelle:  Function "predict_8x8c_dc_top"
Noelle:  Disable "predict_8x8c_dc_top" as cold function
Noelle:  Function "predict_8x8_v"
Noelle:  Disable "predict_8x8_v" as cold function
Noelle:  Function "predict_8x8_h"
Noelle:  Disable "predict_8x8_h" as cold function
Noelle:  Function "predict_8x8_dc"
Noelle:  Disable "predict_8x8_dc" as cold function
Noelle:  Function "predict_8x8_ddl"
Noelle:  Disable "predict_8x8_ddl" as cold function
EnablersManager:   Try to improve all 69 loops, one at a time
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_analyse"
EnablersManager:     Entry instruction =   %exitcond165 = icmp eq i32 %.1, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_mb_analysis_t, align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond165 = icmp eq i32 %.1, 2"
LICM:     Invariant = "  store i32 1, i32* %5, align 4, !tbaa !30
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond165, label %.loopexit110, label %431
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode"
EnablersManager:     Entry instruction =   %.b9 = load i1, i1* @b_ctrl_c, align 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [200 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %78, label %80, label %..loopexit_crit_edge, !prof !54
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_encoder_encode"
EnablersManager:     Entry instruction =   %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %Pivot52, label %NodeBlock30, label %NodeBlock26, !prof !91
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_slice_write"
EnablersManager:     Entry instruction =   %51 = mul nsw i32 %.07, %50
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %51 = mul nsw i32 %.07, %50"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %54, label %55, label %152, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond20 = icmp eq i64 %indvars.iv18, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond20, label %._crit_edge108.loopexit1, label %207, !prof !86
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac"
EnablersManager:     Entry instruction =   %76 = icmp slt i64 %indvars.iv19, %41
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %76 = icmp slt i64 %indvars.iv19, %41"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %76, label %77, label %.loopexit11.loopexit1, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_inter_p16x16"
EnablersManager:     Entry instruction =   %78 = load i32, i32* %11, align 16, !tbaa !31
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [8 x [2 x i16]], align 4
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %struct.x264_me_t, align 16
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %80, label %81, label %173, !prof !45
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond17 = icmp eq i64 %indvars.iv15, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond17, label %._crit_edge108.loopexit, label %192, !prof !83
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac"
EnablersManager:     Entry instruction =   %indvars.iv.next = add nsw i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %115, label %144, label %117, !prof !77
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond21 = icmp eq i64 %indvars.iv19, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond21, label %._crit_edge120.loopexit, label %260, !prof !90
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %350 = icmp slt i64 %indvars.iv55, %348
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %350 = icmp slt i64 %indvars.iv55, %348"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %350, label %351, label %376, !prof !105
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %337 = icmp sgt i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %337 = icmp sgt i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %337, label %338, label %346, !prof !103
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %300 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca [9 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %300 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %314, label %315, label %.._crit_edge92_crit_edge, !prof !100
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %130 = icmp slt i32 %.3, %128
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %130 = icmp slt i32 %.3, %128"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %130, label %131, label %133, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %indvars.iv.next = add nsw i64 %indvars.iv, -1
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %123, label %139, label %124, !prof !77
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "block_residual_write_cabac.1036"
EnablersManager:     Entry instruction =   %78 = icmp slt i64 %indvars.iv22, %42
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [64 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %78 = icmp slt i64 %indvars.iv22, %42"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %78, label %79, label %.loopexit14.loopexit1, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond24 = icmp eq i64 %indvars.iv22, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond24, label %._crit_edge120.loopexit2, label %275, !prof !93
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit612.loopexit, label %1765, !prof !247
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1761 = shl nsw i64 %indvars.iv662, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1761 = shl nsw i64 %indvars.iv662, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1762, label %.preheader, label %1800, !prof !246
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond18 = icmp eq i64 %indvars.iv16, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond18, label %.loopexit.loopexit, label %141, !prof !87
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond12 = icmp eq i64 %indvars.iv10, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond12, label %.us-lcssa.us.loopexit1, label %96, !prof !81
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond15 = icmp eq i64 %indvars.iv13, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond15, label %.us-lcssa.us.loopexit, label %75, !prof !74
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond21 = icmp eq i64 %indvars.iv19, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca [4 x [4 x [4 x i16]]], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca [2 x [2 x i16]], align 16 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond21, label %148, label %40, !prof !63
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_fdec_filter_row"
EnablersManager:     Entry instruction =   %67 = icmp slt i32 %.01, %1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %67 = icmp slt i32 %.01, %1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %67, label %68, label %._crit_edge17.loopexit, !prof !81
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %335 = icmp slt i64 %indvars.iv86, %spec.select
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %335, label %336, label %503, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %710 = icmp slt i64 %indvars.iv100, %spec.select
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %710, label %711, label %880, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_frame_deblock_row"
EnablersManager:     Entry instruction =   %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73"
LICM:     Invariant = "  store i32 0, i32* %3, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 0, i32* %4, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Invariant = "  store i32 50529027, i32* %4, align 4, !tbaa !67
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %82, label %83, label %885, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %18 = icmp ult i64 %indvars.iv33, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %18 = icmp ult i64 %indvars.iv33, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %18, label %19, label %._crit_edge83.loopexit, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond60 = icmp eq i64 %indvars.iv58, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond60, label %497, label %486, !prof !134
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond63 = icmp eq i64 %indvars.iv61, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond63, label %504, label %444, !prof !131
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_8x8_chroma"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 8
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [2 x [2 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %164, label %152, !prof !93
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %434, label %423, !prof !130
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_size_cabac"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 24
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %._crit_edge107.loopexit, label %226, !prof !90
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond81 = icmp eq i64 %indvars.iv79, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond81, label %.us-lcssa34.us.us, label %339, !prof !107
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond84 = icmp eq i64 %indvars.iv82, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond84, label %.us-lcssa36.us.loopexit, label %.split33.us.us, !prof !106
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_i16x16"
EnablersManager:     Entry instruction =   %exitcond4 = icmp eq i64 %indvars.iv2, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [4 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond4, label %59, label %46, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode_frame"
EnablersManager:     Entry instruction =   %22 = icmp slt i64 %indvars.iv, %19
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %struct.x264_nal_t*, align 8
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %22 = icmp slt i64 %indvars.iv, %19"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %22, label %23, label %47, !prof !38
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_nal_encode"
EnablersManager:     Entry instruction =   %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %25, label %26, label %37, !prof !41
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %89 = icmp slt i64 %indvars.iv707, %87
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %89 = icmp slt i64 %indvars.iv707, %87"
LICM:     Invariant = "  store i32 16, i32* %9, align 4, !tbaa !66
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %89, label %90, label %121, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond99 = icmp eq i64 %indvars.iv97, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond99, label %123, label %117
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1426 = icmp slt i64 %indvars.iv670, %1424
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1426, label %1427, label %.loopexit614, !prof !207
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 24
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %._crit_edge119.loopexit, label %294, !prof !97
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "Encode"
EnablersManager:     Entry instruction =   %148 = load i8*, i8** %40, align 8, !tbaa !50
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [200 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_picture_t, align 8
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %152, label %153, label %._crit_edge22.._crit_edge22_crit_edge, !prof !48
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond13 = icmp eq i64 %indvars.iv11, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond13, label %38, label %25, !prof !66
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond16 = icmp eq i64 %indvars.iv14, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond16, label %39, label %22, !prof !65
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "copy_column8"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 8
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 8"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %9, label %4, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "refine_subpel"
EnablersManager:     Entry instruction =   %258 = icmp sgt i32 %.179, 0
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %15 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %14 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [2 x [576 x i8]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca i32, align 4 can be cloned
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %258 = icmp sgt i32 %.179, 0"
LICM:     Invariant = "  store i32 16, i32* %12, align 4, !tbaa !72
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %258, label %259, label %..loopexit_crit_edge, !prof !91
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "refine_subpel"
EnablersManager:     Entry instruction =   %111 = icmp sgt i32 %.078, 0
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [2 x [576 x i8]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca [4 x i32], align 16
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca [4 x i32], align 16 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca i32, align 4
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca i32, align 4 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %111 = icmp sgt i32 %.078, 0"
LICM:     Invariant = "  store i32 32, i32* %10, align 4, !tbaa !72
LICM:       The instruction might generate unwanted side-effects if it does not execute at least once per loop invocation
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %111, label %112, label %.._crit_edge138_crit_edge, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "predict_16x16_p_sse2"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 9
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 9"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %28, label %3, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %exitcond15 = icmp eq i64 %indvars.iv13, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [2 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond15, label %.loopexit6.us, label %114, !prof !74
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %98 = icmp slt i64 %indvars.iv16, %95
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [2 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %98 = icmp slt i64 %indvars.iv16, %95"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %98, label %.preheader5.us, label %.us-lcssa.us.loopexit, !prof !73
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "predict_8x8c_p_mmxext"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 5
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 5"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %28, label %3, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_encode_i16x16"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [4 x i16]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %100, label %93, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_me_search_ref"
EnablersManager:     Entry instruction =   %1558 = icmp slt i64 %indvars.iv666, %1556
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca [3 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [6 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [256 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca [64 x i16], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %1558, label %1559, label %.loopexit613, !prof !223
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_load_pic_pointers"
EnablersManager:     Entry instruction =   %119 = icmp slt i64 %indvars.iv18, %95
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [2 x i32], align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %119 = icmp slt i64 %indvars.iv18, %95"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %119, label %120, label %.us-lcssa.us.loopexit2, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_cabac_mb_type"
EnablersManager:     Entry instruction =   %90 = icmp slt i64 %indvars.iv, %88
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %90 = icmp slt i64 %indvars.iv, %88"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %90, label %91, label %.loopexit.loopexit
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond75 = icmp eq i64 %indvars.iv73, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond75, label %389, label %384, !prof !118
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_encode"
EnablersManager:     Entry instruction =   %exitcond78 = icmp eq i64 %indvars.iv76, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [16 x [4 x [4 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x [8 x [8 x i16]]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond78, label %.loopexit29.loopexit, label %377, !prof !116
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_rect4.786"
EnablersManager:     Entry instruction =   %32 = icmp slt i64 %indvars.iv8, %24
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %32 = icmp slt i64 %indvars.iv8, %24"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %32, label %33, label %36, !prof !37
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_rect4.786"
EnablersManager:     Entry instruction =   %27 = icmp slt i64 %indvars.iv10, %25
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %27 = icmp slt i64 %indvars.iv10, %25"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %27, label %28, label %.loopexit.loopexit1, !prof !36
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %59, label %46, !prof !71
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_cache_fenc_satd"
EnablersManager:     Entry instruction =   %exitcond10 = icmp eq i64 %indvars.iv8, 2
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [16 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond10, label %60, label %43, !prof !70
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra_chroma"
EnablersManager:     Entry instruction =   %122 = icmp eq i64 %119, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %122 = icmp eq i64 %119, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %122, label %73, label %123, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra_chroma"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv5, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca [4 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %138, label %57, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_cache_load"
EnablersManager:     Entry instruction =   %exitcond8 = icmp eq i64 %indvars.iv18, %359
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond8, label %527, label %361, !prof !110
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_macroblock_write_cabac"
EnablersManager:     Entry instruction =   %82 = icmp ult i64 %indvars.iv43, 16
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %82 = icmp ult i64 %indvars.iv43, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %82, label %83, label %._crit_edge96.loopexit, !prof !78
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_mb_analyse_intra"
EnablersManager:     Entry instruction =   %exitcond = icmp eq i64 %indvars.iv65, 4
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %exitcond, label %.loopexit.loopexit, label %52, !prof !75
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "predict_16x16_dc_sse2"
EnablersManager:     Entry instruction =   %3 = icmp ult i64 %indvars.iv, 16
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %3 = icmp ult i64 %indvars.iv, 16"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %3, label %4, label %17, !prof !31
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager:   Loop:
EnablersManager:     Function = "x264_cabac_encode_ue_bypass"
EnablersManager:     Entry instruction =   %25 = sub nsw i32 %.1, %.0
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
EnablersManager:     Try to apply loop distribution
EnablersManager:     Try to devirtualize indirect calls
EnablersManager:     Try to extract invariants out of loops
LICM: Start
LICM:   Loop "  %25 = sub nsw i32 %.1, %.0"
LICM:     Check invariants that can be hoisted conditionally
LICM:       Check the invariants
LICM:   The loop has not been modified
LICM: Exit
Mem2Reg: Start
Mem2Reg:   Checking loop:   br i1 %35, label %._crit_edge.._crit_edge_crit_edge, label %36, !prof !39
Mem2Reg:   The loop has 0SCCs that each one access the same memory location
Mem2Reg:   No changes have been made
Mem2Reg: Exit
EnablersManager:     Try to simplify IV related SCEVs and their corresponding instructions in loops
SCEVSimplification:  Start
EnablersManager:     Try to simplify constant SCEVs and their corresponding instructions in loops
EnablersManager: Exit
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.544774e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.894353e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.013689e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.405267e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.776975e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1" (7.501979e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.832804e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.084756e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.490210e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.396522e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.854524e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.334014e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.665391e-04%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.016525e-03%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.665391e-04%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.483939e-03%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.395865e-04%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.564883e-03%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.514044e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.799399e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.068916e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.213643e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.466988e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.008548e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.113947e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.335790e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.241999e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.566400e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.946378e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.766926e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.564997e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.111238e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.094911e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.003839e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.237459e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.395328e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.758597e-02%)
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.772607e-03%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.805846e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.513312e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.286223e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.240080e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.525597e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.725526e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.464604e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.169932e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.475470e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.288537e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.027676e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.138588e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.042242e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.812928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.035402e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.810349e-02%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv67, %69" (6.558940e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.262946e-01%)
Noelle:     Loop "  %146 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %191 = icmp slt i64 %indvars.iv61, %189" (0.000000e+00%)
Noelle:     Loop "  %300 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.742781e+00%)
Noelle:     Loop "  %337 = icmp sgt i64 %indvars.iv, -1" (9.661391e-01%)
Noelle:     Loop "  %350 = icmp slt i64 %indvars.iv55, %348" (3.725457e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.123017e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.029377e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.535361e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.156144e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.496125e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.405689e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.077314e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.083239e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.909026e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.350594e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.753974e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.733764e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.649723e-02%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.436418e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.268016e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.946067e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.967372e-02%)
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.513369e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.232070e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.884015e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.084040e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.729710e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.028479e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.198618e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.048469e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv18, %95" (2.740440e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv16, %95" (3.808274e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.298736e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.013623e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.443173e-02%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.070676e-03%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.604630e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.981893e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.650252e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.307747e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.530653e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.049672e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.550393e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.481654e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.402022e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.168714e-01%)
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.450512e-01%)
Noelle:     Loop "  %122 = icmp eq i64 %119, 4" (1.463017e-01%)
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (7.390210e-03%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.430678e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.927813e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.215373e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.971277e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.650121e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.039588e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.959574e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.341691e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.245692e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.467104e-02%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.116251e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.485271e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.490709e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.011178e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.705124e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.406845e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.406845e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.750977e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.786753e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.560113e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.097961e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.097961e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.347846e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.347846e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.010787e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.746125e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.664805e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.981053e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.944800e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.379166e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.347185e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.444594e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.919079e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.554774e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.712678e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.806321e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %54 = icmp sgt i32 %53, 65535" (0.000000e+00%)
Noelle:     Loop "  %227 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (4.237779e-06%)
Noelle:     Loop "  %332 = load i32, i32* %330, align 4, !tbaa !83" (3.615853e-08%)
Noelle:     Loop "  %340 = sext i32 %339 to i64" (3.333816e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %Pivot5 = icmp ult i64 %indvars.iv16, 14" (8.886276e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.363770e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.390057e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.512360e-03%)
Noelle:     Loop "  %7 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.474003e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.630462e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.776253e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.201911e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.138271e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.916113e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.499277e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.198221e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.175441e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (8.951839e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.604166e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count" (1.560660e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.247036e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.615853e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.929999e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.792741e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.193231e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.566967e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.282109e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.684410e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.549901e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.510414e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.502170e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.105585e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.007523e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (5.970496e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.400349e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.678047e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.708490e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.271624e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.095315e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.768876e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.076657e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.200320e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.403242e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.256149e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.068918e-04%)
Noelle:     Loop "  %49 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %62, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp slt i64 %indvars.iv, %72" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.230548e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.156784e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.374024e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.027193e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.426816e-05%)
Noelle:     Loop "  %Pivot = icmp ult i64 %indvars.iv58, 17" (1.415968e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.334250e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.321956e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.217819e-05%)
Noelle:     Loop "  %396 = icmp sgt i64 %indvars.iv44, %394" (5.713047e-07%)
Noelle:     Loop "  %504 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.615853e-08%)
Noelle:     Loop "  %516 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.615853e-08%)
Noelle:     Loop "  %528 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.541366e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.231053e-04%)
Noelle:     Loop "  %553 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.714060e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.175586e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.306914e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.306914e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.051780e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (1.995589e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.373591e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.301997e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.461096e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.626847e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.565664e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.474401e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.053227e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.136537e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.880243e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.921609e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.379232e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.941569e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.479608e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.709865e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.529651e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.734308e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.241829e-07%)
Noelle:     Loop "  %163 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.461096e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.581719e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.285219e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.986694e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %183 = sext i32 %182 to i64" (0.000000e+00%)
Noelle:     Loop "  %319 = add nsw i32 %318, 2" (5.373157e-06%)
Noelle:     Loop "  %323 = add nsw i32 %322, 2" (4.056987e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %370 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %352 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.820656e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.525167e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.051780e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.207695e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.206248e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.051780e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.626267e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.424646e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.832804e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.892682e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.713047e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.604572e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.628292e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.362743e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.533413e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (9.979754e-07%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (8.533413e-07%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %441 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %474 = icmp slt i64 %indvars.iv57, %470" (0.000000e+00%)
Noelle:     Loop "  %491 = icmp slt i32 %.36, %490" (0.000000e+00%)
Noelle:     Loop "  %574 = load i32, i32* %7, align 4, !tbaa !30" (1.446341e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.835120e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.146950e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.917560e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.977438e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.688170e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.977438e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.531097e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.772926e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.785364e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %Pivot17 = icmp slt i8 %11, 80" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i32 %.02, %12" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %218 = icmp slt i64 %indvars.iv84, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %197 = icmp slt i64 %indvars.iv90, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %248 = icmp slt i64 %indvars.iv92, %.pre-phi30" (0.000000e+00%)
Noelle:     Loop "  %286 = icmp slt i64 %indvars.iv, %284" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %8 = icmp slt i64 %indvars.iv, %6" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %23" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %153" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in1, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %210" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us15 = icmp ult i64 %indvars.iv24.us14, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us = icmp ult i64 %indvars.iv24.us9, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv24.us, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (2.566514e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us.us = icmp eq i64 %indvars.iv69.us.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %483 = icmp slt i64 %indvars.iv, %481" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.384755e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.526230e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw i32 %60, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %71" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv, %70" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4" (7.544774e+01%)
Noelle:     Loop "  %148 = load i8*, i8** %40, align 8, !tbaa !50" (5.894353e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19" (1.013689e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44" (7.405267e-06%)
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0" (2.776975e-06%)
Noelle:     Loop "  %150 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %149, i64 0, i32 1" (7.501979e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv" (3.832804e-06%)
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !62" (1.084756e-07%)
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50" (7.490210e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !64" (3.396522e-02%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4" (2.854524e-02%)
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2" (1.334014e+11%)
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2" (8.665391e-04%)
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4" (1.016525e-03%)
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2" (8.665391e-04%)
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2" (1.483939e-03%)
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4" (5.395865e-04%)
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2" (1.564883e-03%)
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16" (1.514044e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (1.799399e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16" (1.068916e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (1.213643e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41" (1.466988e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.008548e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !31" (1.113947e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16" (1.335790e-01%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16" (4.241999e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16" (9.566400e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (5.946378e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42" (4.766926e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (7.564997e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128" (1.111238e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4" (1.094911e+00%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4" (1.003839e+00%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4" (2.237459e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4" (1.395328e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16" (2.758597e-02%)
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4" (2.772607e-03%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (6.805846e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4" (1.513312e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4" (1.286223e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (1.240080e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173" (0.000000e+00%)
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87" (8.525597e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364" (0.000000e+00%)
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383" (0.000000e+00%)
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32" (0.000000e+00%)
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159" (0.000000e+00%)
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182" (0.000000e+00%)
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3" (0.000000e+00%)
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32" (0.000000e+00%)
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270" (0.000000e+00%)
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270" (0.000000e+00%)
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295" (0.000000e+00%)
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294" (0.000000e+00%)
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62" (0.000000e+00%)
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000" (6.725526e-02%)
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066" (5.464604e-02%)
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123" (7.169932e-02%)
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066" (5.475470e-02%)
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424" (6.288537e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493" (8.027676e-02%)
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556" (3.138588e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631" (7.042242e-02%)
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2" (2.812928e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.035402e-01%)
Noelle:     Loop "  %240 = sext i32 %.728 to i64" (0.000000e+00%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431" (6.810349e-02%)
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %71 = icmp slt i64 %indvars.iv67, %69" (6.558940e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4" (1.262946e-01%)
Noelle:     Loop "  %146 = trunc i64 %indvars.iv63 to i32" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i64 %indvars.iv59, -1" (0.000000e+00%)
Noelle:     Loop "  %191 = icmp slt i64 %indvars.iv61, %189" (0.000000e+00%)
Noelle:     Loop "  %300 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57" (8.742781e+00%)
Noelle:     Loop "  %337 = icmp sgt i64 %indvars.iv, -1" (9.661391e-01%)
Noelle:     Loop "  %350 = icmp slt i64 %indvars.iv55, %348" (3.725457e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2" (2.123017e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (5.029377e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.535361e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (2.156144e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (1.496125e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286" (0.000000e+00%)
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359" (1.405689e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.077314e-03%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (9.083239e-04%)
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64" (3.909026e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3" (3.350594e-03%)
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1" (1.753974e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !73" (1.733764e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4" (7.649723e-02%)
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select" (5.436418e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (5.268016e-02%)
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4" (4.946067e-02%)
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4" (6.967372e-02%)
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select" (5.513369e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4" (5.232070e-02%)
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4" (4.884015e-02%)
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0" (4.084040e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0" (4.729710e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16" (1.028479e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.198618e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0" (5.048469e-02%)
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i64 %indvars.iv18, %95" (2.740440e-01%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv16, %95" (3.808274e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (2.298736e-01%)
Noelle:     Loop "  %163 = icmp slt i64 %indvars.iv11, %140" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv9, %140" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1" (1.013623e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16" (4.443173e-02%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.070676e-03%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !80" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4" (5.604630e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (4.981893e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2" (1.650252e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (1.307747e-01%)
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24" (0.000000e+00%)
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4" (5.530653e-02%)
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251" (2.049672e-02%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (1.550393e-02%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (4.481654e-02%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4" (6.402022e-02%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "deblock_edge"
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (5.168714e-01%)
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4" (1.450512e-01%)
Noelle:     Loop "  %122 = icmp eq i64 %119, 4" (1.463017e-01%)
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (7.390210e-03%)
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88" (2.430678e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (3.927813e-01%)
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5" (3.215373e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "dct2x2dc"
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139" (0.000000e+00%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (3.971277e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01" (7.650121e-02%)
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0" (1.039588e-01%)
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (1.959574e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (1.341691e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (1.245692e-01%)
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:     Loop "  %80 = icmp slt i64 %indvars.iv, %78" (4.467104e-02%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (2.116251e-02%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46" (8.485271e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (6.490709e-03%)
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "deblock_edge_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:     Loop "  %50 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (6.011178e-02%)
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Function "predict_4x4_h"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Function "bs_size_ue"
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (2.705124e-02%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (1.406845e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (1.406845e-02%)
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Function "x264_ratecontrol_mb"
Noelle:     Loop "  %.02 = fptosi double %.02.in to i32" (0.000000e+00%)
Noelle:     Loop "  %178 = icmp slt i32 %177, %130" (0.000000e+00%)
Noelle:     Loop "  %192 = icmp sgt i32 %191, %.01" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9" (4.750977e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42" (4.786753e-03%)
Noelle:  Function "plane_expand_border"
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv5, %18" (4.560113e-02%)
Noelle:     Loop "  %38 = icmp slt i64 %indvars.iv3, %36" (2.097961e-03%)
Noelle:     Loop "  %54 = icmp slt i64 %indvars.iv, %52" (2.097961e-03%)
Noelle:  Function "bs_size_ue_big"
Noelle:  Function "x264_cabac_pos"
Noelle:  Function "predict_4x4_v"
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (2.347846e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (2.347846e-02%)
Noelle:  Function "mc_luma_sse2"
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Function "bs_size_te"
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (4.010787e-02%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (2.746125e-02%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:     Loop "  %51 = icmp eq i32 %.1, 0" (0.000000e+00%)
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Function "bs_pos"
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:     Loop "  %52 = icmp sgt i64 %indvars.iv, %50" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Function "x264_cabac_mb_ref"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (8.664805e-03%)
Noelle:  Function "x264_frame_expand_border"
Noelle:     Loop "  %116 = load i32, i32* %12, align 4, !tbaa !63" (1.981053e-04%)
Noelle:     Loop "  %17 = load i32, i32* %12, align 4, !tbaa !63" (2.944800e-02%)
Noelle:     Loop "  %79 = load i32, i32* %12, align 4, !tbaa !63" (1.379166e-03%)
Noelle:     Loop "  %45 = load i32, i32* %12, align 4, !tbaa !63" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (1.347185e-02%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (1.444594e-02%)
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (2.919079e-02%)
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Function "sum_sa8d"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "sum_satd"
Noelle:     Loop "  %26 = icmp slt i64 %indvars.iv4, %24" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %22" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 16385" (3.554774e-03%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4096" (0.000000e+00%)
Noelle:  Function "x264_cabac_context_init"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 460" (1.712678e-02%)
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Function "pack16to32_mask.829"
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:     Loop "  %33 = icmp sgt i32 %.01, 0" (2.806321e-03%)
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "x264_encoder_open"
Noelle:     Loop "  %54 = icmp sgt i32 %53, 65535" (0.000000e+00%)
Noelle:     Loop "  %227 = getelementptr inbounds [16 x %struct.x264_cpu_name_t], [16 x %struct.x264_cpu_name_t]* @x264_cpu_names, i64 0, i64 %indvars.iv36, i32 1" (4.237779e-06%)
Noelle:     Loop "  %332 = load i32, i32* %330, align 4, !tbaa !83" (3.615853e-08%)
Noelle:     Loop "  %340 = sext i32 %339 to i64" (3.333816e-06%)
Noelle:  Function "x264_clip3.664"
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Function "x264_rdo_init"
Noelle:     Loop "  %Pivot5 = icmp ult i64 %indvars.iv16, 14" (8.886276e-03%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 128" (4.363770e-03%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv16, %indvars.iv19" (2.390057e-03%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 128" (4.512360e-03%)
Noelle:     Loop "  %7 = icmp ugt i64 %indvars.iv16, %indvars.iv21" (3.474003e-03%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, 128" (9.630462e-05%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.13, 5" (7.776253e-05%)
Noelle:  Function "x264_clip3.813"
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Function "x264_clip3.748"
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Function "x264_encoder_frame_end"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 4" (6.201911e-05%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 19" (2.138271e-04%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 17" (1.916113e-04%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 2" (2.499277e-05%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (1.198221e-04%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 32" (1.175441e-04%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "pack16to32_mask.785"
Noelle:  Function "x264_frame_filter"
Noelle:     Loop "  %33 = icmp sgt i32 %.04, %6" (8.951839e-04%)
Noelle:     Loop "  %79 = icmp slt i64 %indvars.iv13, %77" (0.000000e+00%)
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %76" (0.000000e+00%)
Noelle:     Loop "  %119 = icmp slt i32 %.16, %69" (0.000000e+00%)
Noelle:  Function "x264_clip3.1001"
Noelle:  Function "bs_size_se"
Noelle:  Function "x264_noise_reduction_update"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (1.604166e-03%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv2, %wide.trip.count" (1.560660e-03%)
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Function "x264_cqm_init"
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 6" (3.247036e-06%)
Noelle:     Loop "  %34 = icmp ult i64 %indvars.iv99, %indvars.iv103" (3.615853e-07%)
Noelle:     Loop "  %77 = icmp ult i64 %indvars.iv101, %indvars.iv103" (5.929999e-07%)
Noelle:     Loop "  %exitcond98 = icmp eq i64 %indvars.iv96, 6" (6.792741e-05%)
Noelle:     Loop "  %exitcond92 = icmp eq i64 %indvars.iv90, 16" (1.193231e-05%)
Noelle:     Loop "  %exitcond95 = icmp eq i64 %indvars.iv93, 64" (5.566967e-05%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv87, 6" (2.282109e-04%)
Noelle:     Loop "  %exitcond80 = icmp eq i64 %indvars.iv78, 4" (7.684410e-05%)
Noelle:     Loop "  %exitcond77 = icmp eq i64 %indvars.iv75, 16" (7.549901e-05%)
Noelle:     Loop "  %exitcond86 = icmp eq i64 %indvars.iv84, 2" (1.510414e-04%)
Noelle:     Loop "  %exitcond83 = icmp eq i64 %indvars.iv81, 64" (1.502170e-04%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 52" (8.105585e-04%)
Noelle:     Loop "  %exitcond59 = icmp eq i64 %indvars.iv57, 4" (8.007523e-04%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (5.970496e-04%)
Noelle:     Loop "  %exitcond53 = icmp eq i64 %indvars.iv51, 16" (8.400349e-05%)
Noelle:     Loop "  %exitcond56 = icmp eq i64 %indvars.iv54, 16" (8.678047e-05%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond62 = icmp eq i64 %indvars.iv60, 64" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 64" (0.000000e+00%)
Noelle:  Function "x264_reference_build_list"
Noelle:     Loop "  %8 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 4, i64 %indvars.iv55" (1.708490e-04%)
Noelle:     Loop "  br label %._crit_edge66" (6.271624e-04%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv53, %29" (5.095315e-04%)
Noelle:     Loop "  br label %._crit_edge67" (6.768876e-06%)
Noelle:     Loop "  %45 = icmp slt i64 %indvars.iv51, %43" (5.076657e-06%)
Noelle:     Loop "  %61 = icmp slt i64 %indvars.iv, %29" (5.200320e-05%)
Noelle:  Function "x264_slice_header_write"
Noelle:     Loop "  %129 = load i32, i32* %127, align 8, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %148 = load i32, i32* %146, align 4, !tbaa !70" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Function "predict_8x8c_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (8.403242e-04%)
Noelle:  Function "predict_16x16_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (8.256149e-04%)
Noelle:  Function "pack8to32"
Noelle:  Function "x264_slice_init"
Noelle:  Function "bs_write_ue_big"
Noelle:  Function "bs_write"
Noelle:  Function "x264_macroblock_slice_init"
Noelle:     Loop "  %36 = load i32, i32* %29, align 8, !tbaa !64" (1.068918e-04%)
Noelle:     Loop "  %49 = load i32, i32* %32, align 8, !tbaa !66" (0.000000e+00%)
Noelle:     Loop "  %64 = load i32, i32* %62, align 8, !tbaa !65" (0.000000e+00%)
Noelle:     Loop "  %74 = icmp slt i64 %indvars.iv, %72" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:     Loop "  %8 = load i32, i32* %3, align 4, !tbaa !30" (3.230548e-04%)
Noelle:     Loop "  %35 = icmp slt i32 %.0, %17" (0.000000e+00%)
Noelle:     Loop "  %57 = icmp slt i32 %.1, %50" (2.156784e-04%)
Noelle:  Function "x264_encoder_close"
Noelle:     Loop "  %32 = load i32, i32* %30, align 4, !tbaa !63" (1.374024e-07%)
Noelle:     Loop "  %exitcond70 = icmp eq i64 %indvars.iv68, 5" (8.027193e-07%)
Noelle:     Loop "  %108 = icmp sgt i64 %indvars.iv66, %106" (0.000000e+00%)
Noelle:     Loop "  %119 = sext i32 %118 to i64" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 2" (1.426816e-05%)
Noelle:     Loop "  %Pivot = icmp ult i64 %indvars.iv58, 17" (1.415968e-05%)
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 17" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 2" (1.334250e-05%)
Noelle:     Loop "  %exitcond48 = icmp eq i64 %indvars.iv46, 2" (1.321956e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv42, 32" (1.217819e-05%)
Noelle:     Loop "  %396 = icmp sgt i64 %indvars.iv44, %394" (5.713047e-07%)
Noelle:     Loop "  %504 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 0, i64 %indvars.iv40" (3.615853e-08%)
Noelle:     Loop "  %516 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 1, i64 %indvars.iv38" (3.615853e-08%)
Noelle:     Loop "  %528 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.0, i64 0, i32 36, i32 2, i64 %indvars.iv36" (1.541366e-04%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (1.231053e-04%)
Noelle:     Loop "  %553 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !65" (7.714060e-05%)
Noelle:  Function "x264_reference_update"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (1.175586e-04%)
Noelle:  Function "x264_frame_delete"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4" (2.306914e-06%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (2.306914e-06%)
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 18" (2.051780e-04%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 18" (1.995589e-04%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (3.373591e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (3.301997e-05%)
Noelle:  Function "x264_slice_header_init"
Noelle:     Loop "  %68 = load i32, i32* %66, align 8, !tbaa !93" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_start"
Noelle:     Loop "  %87 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (8.461096e-06%)
Noelle:  Function "x264_ratecontrol_end"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 17" (9.626847e-05%)
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:     Loop "  %5 = load i32, i32* %2, align 8, !tbaa !31" (1.565664e-04%)
Noelle:  Function "bs_write_se"
Noelle:  Function "x264_cabac_encode_flush"
Noelle:     Loop "  %29 = icmp sgt i32 %28, 0" (5.474401e-06%)
Noelle:  Function "x264_frame_copy_picture"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 3" (8.053227e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "bs_write.943"
Noelle:  Function "x264_frame_shift"
Noelle:     Loop "  %5 = icmp eq %struct.x264_frame_t* %4, null" (9.136537e-05%)
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Function "x264_free"
Noelle:  Function "x264_sei_version_write"
Noelle:     Loop "  %16 = icmp sgt i32 %.0, %14" (1.880243e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv1, 16" (2.921609e-06%)
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (7.379232e-05%)
Noelle:  Function "x264_frame_push"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv" (5.941569e-05%)
Noelle:  Function "read_frame_y4m"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 80" (6.479608e-06%)
Noelle:  Function "x264_sps_write"
Noelle:     Loop "  %40 = load i32, i32* %37, align 4, !tbaa !51" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp eq i64 %indvars.iv, 13" (0.000000e+00%)
Noelle:  Function "bs_align_1"
Noelle:  Function "x264_slicetype_decide"
Noelle:     Loop "  %10 = icmp eq %struct.x264_frame_t* %9, null" (0.000000e+00%)
Noelle:     Loop "  %34 = sext i32 %.02 to i64" (3.709865e-05%)
Noelle:  Function "x264_nal_end"
Noelle:  Function "x264_frame_push_unused"
Noelle:  Function "x264_nal_start"
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Function "bs_write1"
Noelle:  Function "bs_init"
Noelle:  Function "x264_frame_pop"
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.529651e-05%)
Noelle:  Function "bs_flush"
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Function "Parse"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #17" (2.734308e-05%)
Noelle:     Loop "  %87 = getelementptr inbounds [101 x %struct.option], [101 x %struct.option]* @Parse.long_options, i64 0, i64 %indvars.iv, i32 0" (0.000000e+00%)
Noelle:     Loop "  %.06 = getelementptr inbounds i8, i8* %.pn, i64 -1" (2.241829e-07%)
Noelle:     Loop "  %163 = load i8, i8* %.17, align 1, !tbaa !38" (0.000000e+00%)
Noelle:  Function "x264_pps_write"
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Function "get_zone"
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (8.461096e-06%)
Noelle:  Function "x264_frame_new"
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 3" (2.581719e-06%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 3" (2.285219e-06%)
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4" (2.986694e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv22, 4" (0.000000e+00%)
Noelle:     Loop "  %179 = icmp ne i32 %178, 0" (0.000000e+00%)
Noelle:     Loop "  %183 = sext i32 %182 to i64" (0.000000e+00%)
Noelle:     Loop "  %319 = add nsw i32 %318, 2" (5.373157e-06%)
Noelle:     Loop "  %323 = add nsw i32 %322, 2" (4.056987e-06%)
Noelle:  Function "x264_param_parse"
Noelle:     Loop "  %19 = tail call i8* @strchr(i8* %17, i32 95) #50" (0.000000e+00%)
Noelle:     Loop "  %65 = getelementptr [2 x i8], [2 x i8]* @.str.7.348, i64 0, i64 0" (0.000000e+00%)
Noelle:     Loop "  %68 = icmp eq i64 %indvars.iv, 15" (0.000000e+00%)
Noelle:  Function "update_vbv"
Noelle:  Function "x264_validate_parameters"
Noelle:     Loop "  %370 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.2, i64 0, i32 0" (0.000000e+00%)
Noelle:     Loop "  %352 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.04, i64 0, i32 0" (9.820656e-06%)
Noelle:  Function "x264_dct_init_weights"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 2" (1.525167e-05%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (3.051780e-06%)
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 64" (1.207695e-05%)
Noelle:  Function "x264_log"
Noelle:  Function "x264_reference_reset"
Noelle:     Loop "  %4 = load %struct.x264_frame_t*, %struct.x264_frame_t** %2, align 8, !tbaa !31" (1.206248e-05%)
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Function "endian_fix"
Noelle:  Function "x264_validate_levels"
Noelle:     Loop "  %21 = getelementptr inbounds %struct.x264_level_t, %struct.x264_level_t* %.0, i64 0, i32 0" (3.051780e-06%)
Noelle:  Function "x264_clip3.848"
Noelle:  Function "bs_write1.946"
Noelle:  Function "open_file_y4m"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 80" (5.626267e-06%)
Noelle:     Loop "  %69 = icmp ult i8* %.01, %54" (1.424646e-06%)
Noelle:  Function "x264_macroblock_cache_end"
Noelle:     Loop "  %4 = load i32, i32* %2, align 4, !tbaa !30" (3.832804e-07%)
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 3" (2.892682e-07%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 2" (5.713047e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 32" (5.604572e-06%)
Noelle:  Function "write_nalu_bsf"
Noelle:  Function "bs_write_se.945"
Noelle:  Function "x264_sps_init"
Noelle:     Loop "  %54 = shl i32 1, %53" (4.628292e-07%)
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Function "x264_cqm_delete"
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 6" (3.362743e-06%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv11" (8.533413e-07%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv7, %indvars.iv11" (9.979754e-07%)
Noelle:  Function "bs_write32"
Noelle:  Function "x264_ratecontrol_new"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv59, 5" (8.533413e-07%)
Noelle:     Loop "  %exitcond.us = icmp eq i64 %indvars.iv59.us, 5" (0.000000e+00%)
Noelle:     Loop "  %441 = icmp eq i8* %.014, null" (0.000000e+00%)
Noelle:     Loop "  %474 = icmp slt i64 %indvars.iv57, %470" (0.000000e+00%)
Noelle:     Loop "  %491 = icmp slt i32 %.36, %490" (0.000000e+00%)
Noelle:     Loop "  %574 = load i32, i32* %7, align 4, !tbaa !30" (1.446341e-07%)
Noelle:  Function "x264_malloc"
Noelle:  Function "x264_pixel_init"
Noelle:  Function "x264_macroblock_cache_init"
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 2" (9.835120e-07%)
Noelle:     Loop "  %115 = icmp slt i64 %indvars.iv10, %113" (6.146950e-07%)
Noelle:     Loop "  %126 = load i32, i32* %13, align 4, !tbaa !68" (4.917560e-07%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (3.977438e-07%)
Noelle:  Function "endian_fix.949"
Noelle:  Function "x264_param_default"
Noelle:  Function "bs_flush.948"
Noelle:  Function "x264_param2string"
Noelle:  Function "x264_cpu_detect"
Noelle:     Loop "  %113 = call i32 @x264_cpu_cpuid(i32 2, i32* nonnull %109, i32* nonnull %110, i32* nonnull %111, i32* nonnull %112) #17" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %122 = icmp eq i32 %121, 0" (0.000000e+00%)
Noelle:  Function "x264_mc_init"
Noelle:  Function "set_eop_bsf"
Noelle:  Function "x264_pps_init"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 6" (3.688170e-07%)
Noelle:  Function "x264_clip3.593"
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Function "x264_quant_init"
Noelle:  Function "x264_frame_sort"
Noelle:     Loop "  br label %18" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next16 = add nuw i64 %indvars.iv15, 1" (0.000000e+00%)
Noelle:     Loop "  br label %4" (3.977438e-07%)
Noelle:     Loop "  %indvars.iv.next = add nuw i64 %indvars.iv, 1" (2.531097e-07%)
Noelle:  Function "parse_enum"
Noelle:     Loop "  %5 = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv" (4.772926e-07%)
Noelle:  Function "qp2qscale"
Noelle:  Function "x264_atobool"
Noelle:  Function "x264_atoi"
Noelle:  Function "mbcmp_init"
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Function "x264_dct_init"
Noelle:  Function "x264_ratecontrol_delete"
Noelle:     Loop "  %49 = load i32, i32* %47, align 8, !tbaa !74" (0.000000e+00%)
Noelle:  Function "x264_reduce_fraction"
Noelle:     Loop "  %10 = icmp eq i32 %.01, 0" (5.785364e-08%)
Noelle:  Function "x264_zigzag_init"
Noelle:  Function "x264_print_intra"
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Function "x264_picture_alloc"
Noelle:  Function "get_frame_total_y4m"
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Function "x264_deblock_init"
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Function "endian_fix32"
Noelle:  Function "x264_mdate"
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Function "x264_clip3f"
Noelle:  Function "parse_zones"
Noelle:     Loop "  %23 = load i8, i8* %.03, align 1, !tbaa !64" (0.000000e+00%)
Noelle:     Loop "  %36 = load i32, i32* %10, align 8, !tbaa !63" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv20, %59" (0.000000e+00%)
Noelle:     Loop "  %105 = icmp slt i64 %indvars.iv, %103" (0.000000e+00%)
Noelle:  Function "close_file_bsf"
Noelle:  Function "x264_picture_clean"
Noelle:  Function "close_file_y4m"
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Function "open_file_bsf"
Noelle:  Function "x264_clip3"
Noelle:  Function "set_param_bsf"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Function "ssim_end1"
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Function "x264_slicetype_analyse"
Noelle:     Loop "  %35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 1, i64 %indvars.iv19" (0.000000e+00%)
Noelle:     Loop "  %149 = load i32, i32* %144, align 16, !tbaa !76" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp sgt i64 %indvars.iv10, %101" (0.000000e+00%)
Noelle:  Function "x264_lowres_context_init"
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:     Loop "  %112 = icmp sgt i32 %111, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge11.in = load i32, i32* %storemerge11.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:     Loop "  %176 = icmp sgt i32 %175, 0" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %171, align 16, !tbaa !71" (0.000000e+00%)
Noelle:     Loop "  %88 = icmp sgt i32 %87, -1" (0.000000e+00%)
Noelle:     Loop "  %storemerge12.in = load i32, i32* %storemerge12.in.in, align 4, !tbaa !34" (0.000000e+00%)
Noelle:  Function "scenecut"
Noelle:  Function "x264_slicetype_path_search"
Noelle:     Loop "  %13 = icmp slt i32 %.0, %10" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv9, %14" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, %indvars.iv11" (0.000000e+00%)
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_slicetype_path_cost"
Noelle:     Loop "  %7 = sext i32 %.06 to i64" (0.000000e+00%)
Noelle:     Loop "  %Pivot17 = icmp slt i8 %11, 80" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i32 %.02, %12" (0.000000e+00%)
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv40, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, %250" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Function "x264_rc_analyse_slice"
Noelle:     Loop "  %12 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i64 0, i32 36, i32 0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Function "x264_me_refine_bidir"
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 8" (0.000000e+00%)
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:     Loop "  %exitcond132 = icmp eq i64 %indvars.iv130, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 6" (0.000000e+00%)
Noelle:     Loop "  %exitcond129 = icmp eq i32 %.024, 10" (0.000000e+00%)
Noelle:     Loop "  %exitcond125 = icmp eq i64 %indvars.iv123, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond128 = icmp eq i64 %indvars.iv126, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond122 = icmp eq i64 %indvars.iv120, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Function "update_vbv_plan"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, %14" (0.000000e+00%)
Noelle:  Function "rate_estimate_qscale"
Noelle:     Loop "  %exitcond = icmp eq i32 %.09, %155" (0.000000e+00%)
Noelle:     Loop "  %.08 = fsub fast double %263, %.pn" (0.000000e+00%)
Noelle:  Function "accum_p_qp_update"
Noelle:  Function "row_bits_so_far"
Noelle:     Loop "  %6 = icmp sgt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "update_predictor"
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Function "get_diff_limited_q"
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:     Loop "  %11 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %10, i64 0, i32 17" (0.000000e+00%)
Noelle:     Loop "  %15 = getelementptr inbounds %struct.x264_sps_t, %struct.x264_sps_t* %14, i64 0, i32 16" (0.000000e+00%)
Noelle:  Function "ac_energy_mb"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3" (0.000000e+00%)
Noelle:  Function "x264_adaptive_quant"
Noelle:  Function "x264_clip3f.856"
Noelle:  Function "init_pass2"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv102, %15" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp slt i64 %indvars.iv100, %15" (0.000000e+00%)
Noelle:     Loop "  %55 = trunc i64 %indvars.iv96 to i32" (0.000000e+00%)
Noelle:     Loop "  %89 = trunc i64 %indvars.iv98 to i32" (0.000000e+00%)
Noelle:     Loop "  %137 = load i32, i32* %6, align 8, !tbaa !61" (0.000000e+00%)
Noelle:     Loop "  %163 = fcmp fast ogt double %.08, %151" (0.000000e+00%)
Noelle:     Loop "  %168 = sext i32 %167 to i64" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next81 = add nsw i64 %indvars.iv80, -1" (0.000000e+00%)
Noelle:     Loop "  %218 = icmp slt i64 %indvars.iv84, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv82, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %197 = icmp slt i64 %indvars.iv90, %196" (0.000000e+00%)
Noelle:     Loop "  %exitcond89 = icmp eq i64 %indvars.iv86, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %248 = icmp slt i64 %indvars.iv92, %.pre-phi30" (0.000000e+00%)
Noelle:     Loop "  %286 = icmp slt i64 %indvars.iv, %284" (0.000000e+00%)
Noelle:  Function "qscale2bits"
Noelle:  Function "get_qscale"
Noelle:  Function "clip_qscale"
Noelle:  Function "vbv_pass2"
Noelle:     Loop "  %37 = fcmp fast une double %.03, 0.000000e+00" (0.000000e+00%)
Noelle:     Loop "  store i32 %storemerge, i32* %2, align 4, !tbaa !69" (0.000000e+00%)
Noelle:     Loop "  %62 = icmp eq i32 %.0, 0" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp slt i64 %indvars.iv, %82" (0.000000e+00%)
Noelle:  Function "count_expected_bits"
Noelle:     Loop "  %8 = icmp slt i64 %indvars.iv, %6" (0.000000e+00%)
Noelle:  Function "qscale2qp"
Noelle:  Function "find_underflow"
Noelle:     Loop "  %25 = icmp slt i64 %indvars.iv, %23" (0.000000e+00%)
Noelle:  Function "fix_underflow"
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "predict_size"
Noelle:  Function "parse_zone"
Noelle:     Loop "  %42 = getelementptr [2 x i8], [2 x i8]* @.str.53.910, i64 0, i64 0" (0.000000e+00%)
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:     Loop "  %53 = icmp slt i64 %indvars.iv25, %51" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv14, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_quant_8x8"
Noelle:  Function "endian_fix32.950"
Noelle:  Function "transpose"
Noelle:     Loop "  %5 = icmp slt i64 %indvars.iv3, %3" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %indvars.iv3" (0.000000e+00%)
Noelle:  Function "scaling_list_write"
Noelle:     Loop "  %26 = icmp sgt i64 %indvars.iv6, 1" (0.000000e+00%)
Noelle:     Loop "  %55 = icmp slt i64 %indvars.iv, %53" (0.000000e+00%)
Noelle:  Function "bs_size_se.962"
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:     Loop "  %exitcond57 = icmp eq i64 %indvars.iv55, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond54 = icmp eq i64 %indvars.iv52, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond51 = icmp eq i64 %indvars.iv49, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond48 = icmp eq i32 %.8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i32 %.4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i64 %indvars.iv35, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond34 = icmp eq i64 %indvars.iv32, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv29, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond28 = icmp eq i64 %indvars.iv26, 2" (0.000000e+00%)
Noelle:     Loop "  %103 = icmp ult i64 %indvars.iv41, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:     Loop "  %exitcond34 = icmp eq i32 %.011, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond33 = icmp eq i64 %indvars.iv31, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mc_luma_mmxext"
Noelle:  Function "get_ref_mmxext"
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:     Loop "  %25 = icmp eq i32 %.04, 0" (0.000000e+00%)
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next38 = add nsw i64 %indvars.iv37, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv35, %57" (0.000000e+00%)
Noelle:     Loop "  %84 = icmp ult i64 %indvars.iv33, %82" (0.000000e+00%)
Noelle:     Loop "  %128 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %165 = icmp slt i64 %indvars.iv, %153" (0.000000e+00%)
Noelle:  Function "bs_pos.1063"
Noelle:  Function "bs_write1.1065"
Noelle:  Function "bs_write_ue"
Noelle:  Function "bs_align_0"
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Function "bs_write.1069"
Noelle:  Function "bs_write_te"
Noelle:  Function "bs_write_se.1072"
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Function "endian_fix.1095"
Noelle:  Function "bs_flush.1096"
Noelle:  Function "endian_fix32.1097"
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv16, %7" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv14, %16" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next13 = add nsw i64 %indvars.iv12, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:     Loop "  %19 = sext i32 %18 to i64" (0.000000e+00%)
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:     Loop "  %15 = sext i32 %14 to i64" (0.000000e+00%)
Noelle:  Function "x264_frame_deblock"
Noelle:     Loop "  %5 = load %struct.x264_sps_t*, %struct.x264_sps_t** %2, align 16, !tbaa !30" (0.000000e+00%)
Noelle:  Function "deblock_v_luma_c"
Noelle:  Function "deblock_h_luma_c"
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Function "pixel_sa8d_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.05, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv20, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond19 = icmp eq i64 %indvars.iv17, 8" (0.000000e+00%)
Noelle:  Function "pixel_satd_wxh"
Noelle:     Loop "  %17 = icmp slt i32 %.08, %5" (0.000000e+00%)
Noelle:     Loop "  %18 = icmp slt i64 %indvars.iv16, %15" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv23, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i32 %.02, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03.us11, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i32 %.03.us, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond20.us = icmp eq i32 %.03.us.us, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.05, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Function "pack16to32_mask"
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24" (0.000000e+00%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1" (0.000000e+00%)
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv2, %20" (0.000000e+00%)
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Function "x264_frame_unshift"
Noelle:     Loop "  %4 = getelementptr inbounds %struct.x264_frame_t*, %struct.x264_frame_t** %0, i64 %indvars.iv1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Function "predict_row_size_sum"
Noelle:     Loop "  %.01 = add nsw i32 %.01.in, 1" (0.000000e+00%)
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Function "predict_row_size"
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv, %62" (0.000000e+00%)
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9" (0.000000e+00%)
Noelle:  Function "pixel_hadamard_ac"
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "deblock_chroma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "deblock_luma_intra_c"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "deblock_chroma_c"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.02, 2" (0.000000e+00%)
Noelle:  Function "x264_clip3.703"
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Function "deblock_luma_c"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.03, 4" (0.000000e+00%)
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Function "x264_frame_cond_wait"
Noelle:     Loop "  br label %..split_crit_edge" (0.000000e+00%)
Noelle:  Function "SigIntHandler"
Noelle:  Function "parse_qpfile"
Noelle:     Loop "  %14 = icmp slt i32 %13, %2" (0.000000e+00%)
Noelle:  Function "Help"
Noelle:  Function "atoi"
Noelle:  Function "mk_flushContextID"
Noelle:  Function "strtable_lookup"
Noelle:     Loop "  %4 = getelementptr inbounds i8*, i8** %0, i64 %indvars.iv" (0.000000e+00%)
Noelle:  Function "mk_createWriter"
Noelle:  Function "mk_createContext"
Noelle:  Function "dequant_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_denoise_dct"
Noelle:     Loop "  %7 = icmp slt i64 %indvars.iv, %5" (0.000000e+00%)
Noelle:  Function "x264_decimate_score15"
Noelle:  Function "x264_decimate_score16"
Noelle:  Function "x264_decimate_score64"
Noelle:  Function "x264_coeff_last4"
Noelle:  Function "x264_coeff_last15"
Noelle:  Function "x264_coeff_last16"
Noelle:  Function "x264_coeff_last64"
Noelle:  Function "mk_destroyContexts"
Noelle:     Loop "  %5 = icmp eq %struct.mk_Context* %.in, null" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp eq %struct.mk_Context* %.in1, null" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "get_frame_total_yuv"
Noelle:  Function "read_frame_yuv"
Noelle:  Function "close_file_yuv"
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Function "x264_encoder_headers"
Noelle:  Function "x264_thread_sync_context"
Noelle:     Loop "  %7 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.01, align 8, !tbaa !30" (0.000000e+00%)
Noelle:     Loop "  %17 = load %struct.x264_frame_t*, %struct.x264_frame_t** %.1, align 8, !tbaa !30" (0.000000e+00%)
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Function "open_file_yuv"
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Function "mk_writeHeader"
Noelle:  Function "mk_writeUInt"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeStr"
Noelle:  Function "mk_closeContext"
Noelle:  Function "mk_writeFloat"
Noelle:  Function "mk_writeBin"
Noelle:  Function "mk_flushContextData"
Noelle:  Function "mk_appendContextData"
Noelle:     Loop "  %15 = icmp ugt i32 %6, %.02" (0.000000e+00%)
Noelle:  Function "mk_writeID"
Noelle:  Function "x264_clip3.467"
Noelle:  Function "dequant_4x4_dc"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "mk_writeSize"
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Function "mk_startFrame"
Noelle:  Function "mk_flushFrame"
Noelle:  Function "mk_closeCluster"
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Function "mk_ebmlSIntSize"
Noelle:     Loop "  %35 = icmp ult i64 %indvars.iv7, 7" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_writeSInt"
Noelle:     Loop "  %40 = icmp ult i64 %indvars.iv8, 7" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp ult i64 %indvars.iv, 7" (0.000000e+00%)
Noelle:  Function "mk_setFrameFlags"
Noelle:  Function "mk_addFrameData"
Noelle:  Function "mk_close"
Noelle:  Function "cavlc_qp_delta"
Noelle:  Function "x264_partition_size_cavlc"
Noelle:     Loop "  %43 = icmp sgt i32 %.02, -1" (0.000000e+00%)
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:     Loop "  %14 = icmp sgt i64 %indvars.iv5, %12" (0.000000e+00%)
Noelle:     Loop "  %29 = icmp sgt i64 %indvars.iv3, %.pre-phi2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Function "block_residual_write_cavlc"
Noelle:     Loop "  %36 = icmp sgt i32 %.013, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv.next41 = add nsw i64 %indvars.iv40, -1" (0.000000e+00%)
Noelle:     Loop "  %59 = icmp ult i64 %indvars.iv38, %57" (0.000000e+00%)
Noelle:     Loop "  %147 = icmp ult i64 %indvars.iv36, %84" (0.000000e+00%)
Noelle:     Loop "  %186 = add nsw i32 %.0, -3" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp ult i64 %indvars.iv34, %84" (0.000000e+00%)
Noelle:     Loop "  %116 = add nsw i32 %.0.us, -3" (0.000000e+00%)
Noelle:     Loop "  %222 = icmp slt i64 %indvars.iv, %210" (0.000000e+00%)
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Function "bs_write_vlc"
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Function "array_non_zero_int_c"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29" (0.000000e+00%)
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:     Loop "  %exitcond46 = icmp eq i64 %indvars.iv44, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond43 = icmp eq i64 %indvars.iv41, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.6, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond32 = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us15 = icmp ult i64 %indvars.iv24.us14, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot39.us = icmp ult i64 %indvars.iv24.us9, 2" (0.000000e+00%)
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv24.us, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 2" (0.000000e+00%)
Noelle:     Loop "  %48 = icmp ult i64 %indvars.iv30, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_partition_size_cabac"
Noelle:     Loop "  %46 = icmp sgt i32 %.03, -1" (2.566514e-02%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Function "quant_trellis_cabac"
Noelle:     Loop "  %51 = icmp slt i64 %indvars.iv87, %35" (0.000000e+00%)
Noelle:     Loop "  %36 = icmp slt i64 %indvars.iv85, %35" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp slt i64 %indvars.iv83, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 63" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv75, %35" (0.000000e+00%)
Noelle:     Loop "  %exitcond65 = icmp eq i64 %indvars.iv63, 8" (0.000000e+00%)
Noelle:     Loop "  %219 = icmp slt i32 %.05, %211" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us = icmp eq i64 %indvars.iv69.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond71.us.us = icmp eq i64 %indvars.iv69.us.us, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond74 = icmp eq i64 %indvars.iv72, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv61, 8" (0.000000e+00%)
Noelle:     Loop "  %483 = icmp slt i64 %indvars.iv, %481" (0.000000e+00%)
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Function "x264_intra_rd_refine"
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv54, %31" (0.000000e+00%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4" (0.000000e+00%)
Noelle:     Loop "  %195 = icmp slt i64 %indvars.iv64, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 3" (0.000000e+00%)
Noelle:     Loop "  %158 = icmp slt i64 %indvars.iv72, %157" (0.000000e+00%)
Noelle:     Loop "  %exitcond68 = icmp eq i64 %indvars.iv66, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond71 = icmp eq i64 %indvars.iv69, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond76 = icmp eq i64 %indvars.iv74, 7" (0.000000e+00%)
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 3" (0.000000e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 16" (1.384755e-02%)
Noelle:     Loop "  %88 = icmp slt i64 %indvars.iv56, %82" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv52, %wide.trip.count" (0.000000e+00%)
Noelle:     Loop "  %exitcond25 = icmp eq i64 %indvars.iv, %288" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:     Loop "  %54 = icmp sgt i64 %indvars.iv11, %52" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %129 = icmp sgt i64 %indvars.iv, %52" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_slurp_file"
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:     Loop "  %18 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:  Function "pixel_avg"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Function "predict_16x16_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.02, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_left"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "predict_16x16_dc_top"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.1, 16" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Function "predict_8x8c_v"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_h"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc"
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:  Function "x264_realloc"
Noelle:  Function "x264_refine_bidir"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_coeff_last_internal"
Noelle:     Loop "  %7 = icmp sgt i64 %indvars.iv3, 2" (0.000000e+00%)
Noelle:     Loop "  %16 = icmp sgt i64 %indvars.iv, -1" (0.000000e+00%)
Noelle:  Function "x264_decimate_score_internal"
Noelle:     Loop "  %10 = icmp sgt i64 %indvars.iv10, -1" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp sgt i32 %.25, -1" (0.000000e+00%)
Noelle:     Loop "  %indvars.iv = add nsw i64 %indvars.iv.in, -1" (0.000000e+00%)
Noelle:  Function "x264_rd_cost_part"
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Function "x264_atof"
Noelle:  Function "parse_cqm"
Noelle:     Loop "  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #17" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Function "x264_cqm_parse_file"
Noelle:     Loop "  %8 = tail call i8* @strchr(i8* nonnull %4, i32 35) #50" (0.000000e+00%)
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:     Loop "  %23 = icmp slt i64 %indvars.iv, %21" (0.000000e+00%)
Noelle:  Function "quant_8x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 64" (0.000000e+00%)
Noelle:  Function "quant_4x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_4x4_dc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "quant_2x2_dc"
Noelle:  Function "dequant_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv3, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Function "x264_psy_trellis_init"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_me_search"
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "open_file_mkv"
Noelle:  Function "set_param_mkv"
Noelle:  Function "gcd"
Noelle:     Loop "  %3 = srem i64 %.01, %.03" (0.000000e+00%)
Noelle:  Function "write_nalu_mkv"
Noelle:  Function "write_header_mkv"
Noelle:  Function "set_eop_mkv"
Noelle:  Function "close_file_mkv"
Noelle:  Function "x264_log_default"
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Function "x264_pixel_ads4"
Noelle:     Loop "  %16 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads2"
Noelle:     Loop "  %12 = icmp slt i64 %indvars.iv, %10" (0.000000e+00%)
Noelle:  Function "x264_pixel_ads1"
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv, %8" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_16x16"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_var_8x8"
Noelle:     Loop "  %exitcond6 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "ssim_4x4x2_core"
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond14 = icmp eq i64 %indvars.iv12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "ssim_end4"
Noelle:     Loop "  %6 = icmp slt i64 %indvars.iv, %4" (0.000000e+00%)
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Function "pixel_sub_wxh"
Noelle:     Loop "  %9 = icmp slt i64 %indvars.iv5, %7" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count" (0.000000e+00%)
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 16" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.01, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %57" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, %56" (0.000000e+00%)
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:     Loop "  %77 = load i32, i32* %19, align 16, !tbaa !30" (1.526230e-03%)
Noelle:     Loop "  %141 = load i32, i32* %132, align 4, !tbaa !30" (0.000000e+00%)
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv6, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Function "mc_copy_w4"
Noelle:  Function "plane_copy"
Noelle:     Loop "  %11 = icmp eq i32 %.01, 0" (0.000000e+00%)
Noelle:  Function "hpel_filter"
Noelle:     Loop "  %23 = icmp slt i32 %.04, %6" (0.000000e+00%)
Noelle:     Loop "  %24 = icmp slt i64 %indvars.iv, %18" (0.000000e+00%)
Noelle:     Loop "  %63 = icmp slt i64 %indvars.iv9, %21" (0.000000e+00%)
Noelle:     Loop "  %98 = icmp slt i64 %indvars.iv11, %21" (0.000000e+00%)
Noelle:  Function "prefetch_fenc_null"
Noelle:  Function "prefetch_ref_null"
Noelle:  Function "memzero_aligned"
Noelle:  Function "frame_init_lowres_core"
Noelle:     Loop "  %16 = icmp slt i32 %.05, %8" (0.000000e+00%)
Noelle:     Loop "  %21 = icmp slt i64 %indvars.iv, %14" (0.000000e+00%)
Noelle:  Function "x264_clip_uint8"
Noelle:  Function "mc_copy"
Noelle:     Loop "  %11 = icmp slt i32 %.01, %5" (0.000000e+00%)
Noelle:  Function "pixel_avg_wxh"
Noelle:     Loop "  %14 = icmp slt i32 %.01, %7" (0.000000e+00%)
Noelle:     Loop "  %15 = icmp slt i64 %indvars.iv, %12" (0.000000e+00%)
Noelle:  Function "mc_copy_w8"
Noelle:  Function "pixel_avg_4x8"
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Function "x264_psnr"
Noelle:  Function "x264_frame_dump"
Noelle:     Loop "  %23 = load %struct.x264_frame_t*, %struct.x264_frame_t** %8, align 16, !tbaa !60" (0.000000e+00%)
Noelle:     Loop "  %32 = load i32, i32* %12, align 16, !tbaa !63" (0.000000e+00%)
Noelle:  Function "x264_frame_init_lowres"
Noelle:     Loop "  %17 = icmp slt i64 %indvars.iv12, %12" (0.000000e+00%)
Noelle:     Loop "  %57 = add nsw i32 %56, 2" (0.000000e+00%)
Noelle:     Loop "  %61 = add nsw i32 %60, 2" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, %71" (0.000000e+00%)
Noelle:     Loop "  %73 = icmp sgt i64 %indvars.iv, %70" (0.000000e+00%)
Noelle:  Function "mc_luma"
Noelle:  Function "get_ref"
Noelle:  Function "mc_chroma"
Noelle:     Loop "  %.04 = getelementptr inbounds i8, i8* %.pn, i64 %23" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp slt i64 %indvars.iv, %25" (0.000000e+00%)
Noelle:  Function "pixel_avg_16x16"
Noelle:  Function "pixel_avg_16x8"
Noelle:  Function "pixel_avg_8x16"
Noelle:  Function "pixel_avg_8x8"
Noelle:  Function "pixel_avg_8x4"
Noelle:  Function "pixel_avg_4x4"
Noelle:  Function "pixel_avg_4x2"
Noelle:  Function "pixel_avg_2x4"
Noelle:  Function "pixel_avg_2x2"
Noelle:  Function "mc_copy_w16"
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Function "sub16x16_dct"
Noelle:  Function "pack16to32"
Noelle:  Function "predict_4x4_dc"
Noelle:  Function "predict_4x4_ddl"
Noelle:  Function "predict_4x4_ddr"
Noelle:  Function "predict_4x4_vr"
Noelle:  Function "predict_4x4_hd"
Noelle:  Function "predict_4x4_vl"
Noelle:  Function "predict_4x4_hu"
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:     Loop "  %57 = icmp slt i64 %indvars.iv31, %22" (0.000000e+00%)
Noelle:     Loop "  %64 = icmp slt i64 %indvars.iv29, %21" (0.000000e+00%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv27, %28" (0.000000e+00%)
Noelle:     Loop "  %39 = icmp slt i64 %indvars.iv23, %26" (0.000000e+00%)
Noelle:     Loop "  %40 = icmp slt i64 %indvars.iv25, %27" (0.000000e+00%)
Noelle:     Loop "  %85 = icmp slt i64 %indvars.iv21, %83" (0.000000e+00%)
Noelle:     Loop "  %104 = icmp slt i64 %indvars.iv19, %100" (0.000000e+00%)
Noelle:     Loop "  %109 = icmp slt i64 %indvars.iv17, %99" (0.000000e+00%)
Noelle:     Loop "  %134 = icmp slt i64 %indvars.iv15, %130" (0.000000e+00%)
Noelle:     Loop "  %139 = icmp slt i64 %indvars.iv, %128" (0.000000e+00%)
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:     Loop "  %25 = icmp slt i32 %.07, %16" (0.000000e+00%)
Noelle:     Loop "  %28 = icmp sgt i32 %.16, %.07" (0.000000e+00%)
Noelle:     Loop "  %33 = icmp slt i64 %indvars.iv, %20" (0.000000e+00%)
Noelle:     Loop "  %50 = icmp slt i64 %indvars.iv16, %21" (0.000000e+00%)
Noelle:  Function "sub4x4_dct"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "add4x4_idct"
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv4, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "sub8x8_dct"
Noelle:  Function "add8x8_idct"
Noelle:  Function "pack8to16"
Noelle:  Function "add16x16_idct"
Noelle:  Function "sub8x8_dct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "add8x8_idct8"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "sub16x16_dct8"
Noelle:  Function "add16x16_idct8"
Noelle:  Function "dct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "idct4x4dc"
Noelle:     Loop "  %exitcond3 = icmp eq i64 %indvars.iv1, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_left"
Noelle:     Loop "  %exitcond6 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond5 = icmp eq i32 %.12, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.2, 4" (0.000000e+00%)
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Function "predict_8x8c_p"
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv9, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond8 = icmp eq i32 %.03, 8" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8c_dc_top"
Noelle:     Loop "  %exitcond5 = icmp eq i64 %indvars.iv, 4" (0.000000e+00%)
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_v"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_h"
Noelle:  Function "predict_8x8_dc"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_ddl"
Noelle:  Function "predict_8x8_ddr"
Noelle:  Function "predict_8x8_vr"
Noelle:  Function "predict_8x8_hd"
Noelle:  Function "predict_8x8_vl"
Noelle:  Function "predict_8x8_hu"
Noelle:  Function "predict_8x8_dc_left"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_top"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
Noelle:  Function "predict_8x8_dc_128"
Noelle:     Loop "  %exitcond = icmp eq i32 %.01, 8" (0.000000e+00%)
NOELLE: FixedPoint: Exit
NOELLE: Enablers: Exit
noelle-simplification baseline_pre.bc -o baseline_pre.bc
opt -basicaa -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -mem2reg -tbaa -early-cse-memssa -licm -simplifycfg -simplifycfg-sink-common=false -instcombine -tailcallelim -loop-simplify -lcssa -licm -loop-unswitch -globalopt -instcombine -ipsccp -dce -gvn -dse -adce -loop-simplify -lcssa -indvars -loop-deletion -instcombine -indvars -break-constgeps -lowerswitch -mergereturn --break-crit-edges -loop-simplify -lcssa --functionattrs --rpo-functionattrs baseline_pre.bc -o baseline_pre.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true baseline_pre.bc -o baseline_pre.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata baseline_pre.bc -o baseline_pre.bc
Running: ./baseline_pre_prof --quiet --qp 20 --partitions b8x8,i4x4 --ref 5 --direct auto --b-pyramid --weightb --mixed-refs --no-fast-pskip --me umh --subme 7 --analyse b8x8,i4x4 --threads 1 -o eledream.264 eledream_640x360_128.y4m in /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/x264
PARSEC Benchmark Suite Version 3.0-beta-20150206
yuv4mpeg: 640x360@25/1fps, 0:0

encoded 128 frames, 18.00 fps, 12552.15 kb/s
--------------------------------------------------------------------------------------
DONE
opt -pgo-test-profile-file=/tmp/tmp.8xWCKR3MfO -block-freq -pgo-instr-use baseline_pre.bc -o baseline_with_metadata.bc
noelle-load -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -PDGAnalysis -noelle-pdg-verbose=3 -noelle-pdg-embed baseline_with_metadata.bc -o baseline_with_metadata.bc
PDGAnalysis: Construct PDG from Analysis
Embed PDG as metadata
noelle-parallelizer baseline_with_metadata.bc -o baseline_parallelized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-meta-loop-embed baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopMetadata.so -LoopMetadata baseline_with_metadata.bc -o afterLoopMetadata.bc
noelle-parallelization-planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Planner.so -planner afterLoopMetadata.bc -o baseline_with_parallel_plan.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Planner: Start
Planner:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4, !noelle.pdg.inst.id !44" (8.943908e+01%)
Noelle:     Loop "  %147 = load i8*, i8** %40, align 8, !tbaa !1990, !noelle.pdg.inst.id !96" (6.987426e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19, !noelle.pdg.inst.id !290" (1.038878e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44, !noelle.pdg.inst.id !18743" (7.357034e-06%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0, !noelle.pdg.inst.id !18771" (2.758888e-06%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %149 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %148, i64 0, i32 1, !noelle.pdg.inst.id !18824" (8.909529e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv, !noelle.pdg.inst.id !19035" (3.843763e-06%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !18646, !noelle.pdg.inst.id !310" (1.077691e-07%)
Noelle:  Disable loop "7" as cold code
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50, !noelle.pdg.inst.id !4215" (8.897036e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !4316" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !4173, !noelle.pdg.inst.id !170" (5.168340e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4, !noelle.pdg.inst.id !4341" (4.343605e-02%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2, !noelle.pdg.inst.id !30930" (0.000000e+00%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2, !noelle.pdg.inst.id !31155" (0.000000e+00%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4, !noelle.pdg.inst.id !31176" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2, !noelle.pdg.inst.id !31137" (0.000000e+00%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2, !noelle.pdg.inst.id !31403" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2, !noelle.pdg.inst.id !31365" (0.000000e+00%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4, !noelle.pdg.inst.id !31440" (0.000000e+00%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4, !noelle.pdg.inst.id !30558" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4, !noelle.pdg.inst.id !30642" (0.000000e+00%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !30852" (0.000000e+00%)
Noelle:  Disable loop "21" as cold code
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2, !noelle.pdg.inst.id !2441" (0.000000e+00%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4, !noelle.pdg.inst.id !2460" (0.000000e+00%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4, !noelle.pdg.inst.id !2478" (0.000000e+00%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4, !noelle.pdg.inst.id !2485" (0.000000e+00%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4, !noelle.pdg.inst.id !2428" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2, !noelle.pdg.inst.id !2495" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2, !noelle.pdg.inst.id !2511" (0.000000e+00%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2, !noelle.pdg.inst.id !2571" (0.000000e+00%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16, !noelle.pdg.inst.id !2366" (1.511001e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4, !noelle.pdg.inst.id !2677" (0.000000e+00%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16, !noelle.pdg.inst.id !2691" (1.802819e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16, !noelle.pdg.inst.id !2661" (1.071903e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24, !noelle.pdg.inst.id !2727" (1.257046e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41, !noelle.pdg.inst.id !560" (1.469622e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41, !noelle.pdg.inst.id !526" (0.000000e+00%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1, !noelle.pdg.inst.id !617" (1.013398e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !1883, !noelle.pdg.inst.id !506" (1.127850e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2, !noelle.pdg.inst.id !4320" (0.000000e+00%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4, !noelle.pdg.inst.id !4339" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4, !noelle.pdg.inst.id !4357" (0.000000e+00%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4, !noelle.pdg.inst.id !4364" (0.000000e+00%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4, !noelle.pdg.inst.id !4307" (0.000000e+00%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8, !noelle.pdg.inst.id !4177" (0.000000e+00%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8, !noelle.pdg.inst.id !4194" (0.000000e+00%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2, !noelle.pdg.inst.id !4374" (0.000000e+00%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2, !noelle.pdg.inst.id !4390" (0.000000e+00%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2, !noelle.pdg.inst.id !4450" (0.000000e+00%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16, !noelle.pdg.inst.id !4246" (2.610856e-02%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4, !noelle.pdg.inst.id !4556" (0.000000e+00%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16, !noelle.pdg.inst.id !4570" (4.895312e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16, !noelle.pdg.inst.id !4540" (8.960800e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24, !noelle.pdg.inst.id !4606" (5.187598e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42, !noelle.pdg.inst.id !882" (4.727703e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42, !noelle.pdg.inst.id !847" (0.000000e+00%)
Noelle:  Disable loop "55" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1, !noelle.pdg.inst.id !947" (7.551625e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128, !noelle.pdg.inst.id !963" (1.125528e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4, !noelle.pdg.inst.id !8803" (0.000000e+00%)
Noelle:  Disable loop "58" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4, !noelle.pdg.inst.id !8832" (0.000000e+00%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16, !noelle.pdg.inst.id !8950" (0.000000e+00%)
Noelle:  Disable loop "60" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4, !noelle.pdg.inst.id !8923" (0.000000e+00%)
Noelle:  Disable loop "61" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4, !noelle.pdg.inst.id !9134" (0.000000e+00%)
Noelle:  Disable loop "62" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4, !noelle.pdg.inst.id !9140" (0.000000e+00%)
Noelle:  Disable loop "63" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4, !noelle.pdg.inst.id !9088" (9.723978e-01%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4, !noelle.pdg.inst.id !9100" (8.918346e-01%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4, !noelle.pdg.inst.id !9170" (2.172980e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4, !noelle.pdg.inst.id !9182" (1.364048e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4, !noelle.pdg.inst.id !9014" (0.000000e+00%)
Noelle:  Disable loop "68" as cold code
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4, !noelle.pdg.inst.id !8991" (0.000000e+00%)
Noelle:  Disable loop "69" as cold code
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4, !noelle.pdg.inst.id !9043" (0.000000e+00%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16, !noelle.pdg.inst.id !8869" (1.305459e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4, !noelle.pdg.inst.id !9264" (1.549973e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4, !noelle.pdg.inst.id !9307" (1.317134e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16, !noelle.pdg.inst.id !9239" (1.193086e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173, !noelle.pdg.inst.id !41275" (0.000000e+00%)
Noelle:  Disable loop "75" as cold code
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87, !noelle.pdg.inst.id !41182" (9.856427e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364, !noelle.pdg.inst.id !43978" (0.000000e+00%)
Noelle:  Disable loop "77" as cold code
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383, !noelle.pdg.inst.id !43999" (0.000000e+00%)
Noelle:  Disable loop "78" as cold code
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32, !noelle.pdg.inst.id !44069" (0.000000e+00%)
Noelle:  Disable loop "79" as cold code
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159, !noelle.pdg.inst.id !43701" (0.000000e+00%)
Noelle:  Disable loop "80" as cold code
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182, !noelle.pdg.inst.id !43725" (0.000000e+00%)
Noelle:  Disable loop "81" as cold code
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3, !noelle.pdg.inst.id !43744" (0.000000e+00%)
Noelle:  Disable loop "82" as cold code
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32, !noelle.pdg.inst.id !43790" (0.000000e+00%)
Noelle:  Disable loop "83" as cold code
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270, !noelle.pdg.inst.id !43843" (0.000000e+00%)
Noelle:  Disable loop "84" as cold code
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270, !noelle.pdg.inst.id !43861" (0.000000e+00%)
Noelle:  Disable loop "85" as cold code
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295, !noelle.pdg.inst.id !43890" (0.000000e+00%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294, !noelle.pdg.inst.id !43900" (0.000000e+00%)
Noelle:  Disable loop "87" as cold code
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62, !noelle.pdg.inst.id !43929" (0.000000e+00%)
Noelle:  Disable loop "88" as cold code
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000, !noelle.pdg.inst.id !42229" (7.173762e-02%)
Noelle:  Disable loop "89" as cold code
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066, !noelle.pdg.inst.id !42317" (5.851493e-02%)
Noelle:  Disable loop "90" as cold code
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123, !noelle.pdg.inst.id !42396" (7.635272e-02%)
Noelle:  Disable loop "91" as cold code
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066, !noelle.pdg.inst.id !42490" (5.873480e-02%)
Noelle:  Disable loop "92" as cold code
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424, !noelle.pdg.inst.id !42790" (6.028811e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493, !noelle.pdg.inst.id !42882" (8.500369e-02%)
Noelle:  Disable loop "94" as cold code
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556, !noelle.pdg.inst.id !42969" (3.016258e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631, !noelle.pdg.inst.id !43067" (6.945093e-02%)
Noelle:  Disable loop "96" as cold code
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2, !noelle.pdg.inst.id !43224" (2.759902e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16, !noelle.pdg.inst.id !43235" (3.505932e-01%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431, !noelle.pdg.inst.id !41580" (5.837094e-02%)
Noelle:  Disable loop "99" as cold code
Noelle:     Loop "  %240 = sext i32 %.728 to i64, !noelle.pdg.inst.id !41370" (0.000000e+00%)
Noelle:  Disable loop "100" as cold code
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %67 = icmp slt i64 %indvars.iv67, %65, !noelle.pdg.inst.id !5598" (6.546065e-03%)
Noelle:  Disable loop "101" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4, !noelle.pdg.inst.id !5576" (1.164764e-01%)
Noelle:     Loop "  %142 = trunc i64 %indvars.iv63 to i32, !noelle.pdg.inst.id !5695" (0.000000e+00%)
Noelle:  Disable loop "103" as cold code
Noelle:     Loop "  %172 = icmp sgt i64 %indvars.iv59, -1, !noelle.pdg.inst.id !5724" (0.000000e+00%)
Noelle:  Disable loop "104" as cold code
Noelle:     Loop "  %187 = icmp slt i64 %indvars.iv61, %185, !noelle.pdg.inst.id !5749" (0.000000e+00%)
Noelle:  Disable loop "105" as cold code
Noelle:     Loop "  %296 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57, !noelle.pdg.inst.id !5872" (8.544239e+00%)
Noelle:     Loop "  %333 = icmp sgt i64 %indvars.iv, -1, !noelle.pdg.inst.id !5911" (8.777786e-01%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv55, %342, !noelle.pdg.inst.id !5935" (3.711947e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4, !noelle.pdg.inst.id !1227" (0.000000e+00%)
Noelle:  Disable loop "109" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !1252" (0.000000e+00%)
Noelle:  Disable loop "110" as cold code
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2, !noelle.pdg.inst.id !2912" (2.100300e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4, !noelle.pdg.inst.id !2929" (0.000000e+00%)
Noelle:  Disable loop "112" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4, !noelle.pdg.inst.id !2990" (4.685934e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4, !noelle.pdg.inst.id !2964" (2.933772e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4, !noelle.pdg.inst.id !3041" (2.009174e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8, !noelle.pdg.inst.id !3064" (1.494508e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29, !noelle.pdg.inst.id !84" (0.000000e+00%)
Noelle:  Disable loop "117" as cold code
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286, !noelle.pdg.inst.id !23615" (0.000000e+00%)
Noelle:  Disable loop "118" as cold code
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304, !noelle.pdg.inst.id !23632" (0.000000e+00%)
Noelle:  Disable loop "119" as cold code
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359, !noelle.pdg.inst.id !23690" (1.396533e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !23787" (1.070298e-03%)
Noelle:  Disable loop "121" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4, !noelle.pdg.inst.id !23842" (9.024078e-04%)
Noelle:  Disable loop "122" as cold code
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64, !noelle.pdg.inst.id !786" (3.900162e-03%)
Noelle:  Disable loop "123" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3, !noelle.pdg.inst.id !794" (3.342996e-03%)
Noelle:  Disable loop "124" as cold code
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1, !noelle.pdg.inst.id !829" (1.932129e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3, !noelle.pdg.inst.id !887" (0.000000e+00%)
Noelle:  Disable loop "126" as cold code
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !7390, !noelle.pdg.inst.id !260" (1.911984e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !7630" (0.000000e+00%)
Noelle:  Disable loop "128" as cold code
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4, !noelle.pdg.inst.id !7512" (9.604694e-02%)
Noelle:  Disable loop "129" as cold code
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select, !noelle.pdg.inst.id !7691" (5.976475e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4, !noelle.pdg.inst.id !7827" (7.817345e-02%)
Noelle:  Disable loop "131" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4, !noelle.pdg.inst.id !7716" (6.617709e-02%)
Noelle:  Disable loop "132" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4, !noelle.pdg.inst.id !8079" (0.000000e+00%)
Noelle:  Disable loop "133" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4, !noelle.pdg.inst.id !7967" (8.685249e-02%)
Noelle:  Disable loop "134" as cold code
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select, !noelle.pdg.inst.id !8137" (6.088996e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4, !noelle.pdg.inst.id !8270" (7.861169e-02%)
Noelle:  Disable loop "136" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4, !noelle.pdg.inst.id !8162" (6.623952e-02%)
Noelle:  Disable loop "137" as cold code
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0, !noelle.pdg.inst.id !11994" (4.034412e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0, !noelle.pdg.inst.id !12163" (4.649938e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16, !noelle.pdg.inst.id !660" (0.000000e+00%)
Noelle:  Disable loop "140" as cold code
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16, !noelle.pdg.inst.id !693" (9.895036e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16, !noelle.pdg.inst.id !736" (3.077404e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0, !noelle.pdg.inst.id !189" (5.088736e-02%)
Noelle:  Disable loop "143" as cold code
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count, !noelle.pdg.inst.id !662" (0.000000e+00%)
Noelle:  Disable loop "144" as cold code
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %96, !noelle.pdg.inst.id !713" (2.728011e-01%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv16, %96, !noelle.pdg.inst.id !685" (3.790807e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4, !noelle.pdg.inst.id !701" (2.288127e-01%)
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv11, %139, !noelle.pdg.inst.id !768" (0.000000e+00%)
Noelle:  Disable loop "148" as cold code
Noelle:     Loop "  %140 = icmp slt i64 %indvars.iv9, %139, !noelle.pdg.inst.id !742" (0.000000e+00%)
Noelle:  Disable loop "149" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !757" (0.000000e+00%)
Noelle:  Disable loop "150" as cold code
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1, !noelle.pdg.inst.id !128" (1.038813e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4, !noelle.pdg.inst.id !3243" (0.000000e+00%)
Noelle:  Disable loop "152" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4, !noelle.pdg.inst.id !3232" (0.000000e+00%)
Noelle:  Disable loop "153" as cold code
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4, !noelle.pdg.inst.id !3162" (0.000000e+00%)
Noelle:  Disable loop "154" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16, !noelle.pdg.inst.id !3147" (2.102685e-01%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !3322, !noelle.pdg.inst.id !50" (0.000000e+00%)
Noelle:  Disable loop "156" as cold code
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4, !noelle.pdg.inst.id !343" (5.591921e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4, !noelle.pdg.inst.id !351" (4.970596e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2, !noelle.pdg.inst.id !376" (1.646510e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2, !noelle.pdg.inst.id !384" (1.304782e-01%)
Noelle:  Function "deblock_edge"
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24, !noelle.pdg.inst.id !6767" (0.000000e+00%)
Noelle:  Disable loop "161" as cold code
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4, !noelle.pdg.inst.id !6887" (7.270320e-02%)
Noelle:  Disable loop "162" as cold code
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4, !noelle.pdg.inst.id !6923" (0.000000e+00%)
Noelle:  Disable loop "163" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251, !noelle.pdg.inst.id !6952" (5.783879e-03%)
Noelle:  Disable loop "164" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4, !noelle.pdg.inst.id !6964" (4.374985e-03%)
Noelle:  Disable loop "165" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4, !noelle.pdg.inst.id !7024" (5.223322e-02%)
Noelle:  Disable loop "166" as cold code
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4, !noelle.pdg.inst.id !7051" (0.000000e+00%)
Noelle:  Disable loop "167" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4, !noelle.pdg.inst.id !7075" (5.920579e-02%)
Noelle:  Disable loop "168" as cold code
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4, !noelle.pdg.inst.id !7095" (0.000000e+00%)
Noelle:  Disable loop "169" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !7129" (0.000000e+00%)
Noelle:  Disable loop "170" as cold code
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8, !noelle.pdg.inst.id !41" (5.156994e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9, !noelle.pdg.inst.id !53" (3.914264e-01%)
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4, !noelle.pdg.inst.id !872" (1.189813e-01%)
Noelle:     Loop "  %110 = icmp eq i64 %107, 4, !noelle.pdg.inst.id !941" (1.365154e-01%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv, %73, !noelle.pdg.inst.id !898" (7.376785e-03%)
Noelle:  Disable loop "175" as cold code
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5, !noelle.pdg.inst.id !53" (3.218147e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "dct2x2dc"
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01, !noelle.pdg.inst.id !81" (8.395751e-02%)
Noelle:  Disable loop "177" as cold code
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0, !noelle.pdg.inst.id !109" (1.126446e-01%)
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1, !noelle.pdg.inst.id !2176" (0.000000e+00%)
Noelle:  Disable loop "179" as cold code
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139, !noelle.pdg.inst.id !2186" (0.000000e+00%)
Noelle:  Disable loop "180" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4, !noelle.pdg.inst.id !2245" (3.945411e-02%)
Noelle:  Disable loop "181" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !2270" (0.000000e+00%)
Noelle:  Disable loop "182" as cold code
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25, !noelle.pdg.inst.id !78" (2.165786e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24, !noelle.pdg.inst.id !86" (1.482881e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8, !noelle.pdg.inst.id !50" (0.000000e+00%)
Noelle:  Disable loop "185" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1, !noelle.pdg.inst.id !57" (0.000000e+00%)
Noelle:  Disable loop "186" as cold code
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88, !noelle.pdg.inst.id !470" (0.000000e+00%)
Noelle:  Disable loop "187" as cold code
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4, !noelle.pdg.inst.id !411" (0.000000e+00%)
Noelle:  Disable loop "188" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2, !noelle.pdg.inst.id !425" (0.000000e+00%)
Noelle:  Disable loop "189" as cold code
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16, !noelle.pdg.inst.id !44" (1.201489e-01%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4, !noelle.pdg.inst.id !254" (1.789357e-02%)
Noelle:  Disable loop "191" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46, !noelle.pdg.inst.id !234" (9.721789e-03%)
Noelle:  Disable loop "192" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !203" (6.762947e-03%)
Noelle:  Disable loop "193" as cold code
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9, !noelle.pdg.inst.id !186" (1.698058e-02%)
Noelle:  Disable loop "194" as cold code
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42, !noelle.pdg.inst.id !170" (9.385370e-03%)
Noelle:  Disable loop "195" as cold code
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Disable "x264_macroblock_cache_ref.799" as cold function
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:  Disable "x264_cabac_mb_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Disable "x264_cabac_mb_cbp_chroma" as cold function
Noelle:  Function "bs_size_ue"
Noelle:  Disable "bs_size_ue" as cold function
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:  Disable "x264_cabac_mb_type.1017" as cold function
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:  Disable "x264_macroblock_cache_rect1.801" as cold function
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Disable "zigzag_scan_2x2_dc" as cold function
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Disable "x264_cabac_encode_terminal" as cold function
Noelle:  Function "deblock_edge_intra"
Noelle:  Disable "deblock_edge_intra" as cold function
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Disable "x264_macroblock_cache_mvd" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Disable "x264_macroblock_cache_mvd.1052" as cold function
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Disable "x264_mb_predict_mv" as cold function
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Disable "x264_cabac_encode_renorm" as cold function
Noelle:  Function "predict_4x4_h"
Noelle:  Disable "predict_4x4_h" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:  Disable "x264_macroblock_cache_rect4.1053" as cold function
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Disable "x264_cabac_pos.1016" as cold function
Noelle:  Function "x264_ratecontrol_mb"
Noelle:  Disable "x264_ratecontrol_mb" as cold function
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:  Disable "predict_8x8c_dc_left.1111" as cold function
Noelle:  Function "mc_luma_sse2"
Noelle:  Disable "mc_luma_sse2" as cold function
Noelle:  Function "plane_expand_border"
Noelle:  Disable "plane_expand_border" as cold function
Noelle:  Function "bs_size_ue_big"
Noelle:  Disable "bs_size_ue_big" as cold function
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Disable "x264_cabac_mb_type_intra.1056" as cold function
Noelle:  Function "x264_cabac_pos"
Noelle:  Disable "x264_cabac_pos" as cold function
Noelle:  Function "predict_4x4_v"
Noelle:  Disable "predict_4x4_v" as cold function
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:  Disable "predict_16x16_dc_left.1108" as cold function
Noelle:  Function "bs_size_te"
Noelle:  Disable "bs_size_te" as cold function
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:  Disable "x264_cabac_mb_qp_delta.1035" as cold function
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Disable "x264_predictor_difference_mmxext" as cold function
Noelle:  Function "bs_pos"
Noelle:  Disable "bs_pos" as cold function
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Disable "x264_mb_predict_mv_pskip" as cold function
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:  Disable "x264_bitstream_check_buffer" as cold function
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Disable "x264_cabac_mb_cbp_luma.1032" as cold function
Noelle:  Function "x264_cabac_mb_ref"
Noelle:  Disable "x264_cabac_mb_ref" as cold function
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Disable "x264_cabac_mb_intra_chroma_pred_mode.1023" as cold function
Noelle:  Function "x264_frame_expand_border"
Noelle:  Disable "x264_frame_expand_border" as cold function
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:  Disable "x264_frame_expand_border_filtered" as cold function
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:  Disable "predict_8x8c_dc_top.1112" as cold function
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Disable "x264_median_mv_mmxext" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:  Disable "x264_mb_transform_8x8_allowed" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Disable "x264_cabac_mb_cbp_chroma.1033" as cold function
Noelle:  Function "sum_satd"
Noelle:  Disable "sum_satd" as cold function
Noelle:  Function "sum_sa8d"
Noelle:  Disable "sum_sa8d" as cold function
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Disable "x264_cabac_mb_skip" as cold function
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:  Disable "x264_mb_analyse_load_costs" as cold function
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:  Disable "x264_cabac_mb_ref.1024" as cold function
Noelle:  Function "x264_cabac_context_init"
Noelle:  Disable "x264_cabac_context_init" as cold function
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Disable "predict_8x8chroma_mode_available" as cold function
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Disable "predict_16x16_mode_available" as cold function
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Disable "x264_macroblock_encode_pskip" as cold function
Noelle:  Function "pack16to32_mask.829"
Noelle:  Disable "pack16to32_mask.829" as cold function
Noelle:  Function "x264_clip3.664"
Noelle:  Disable "x264_clip3.664" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1019" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1034" as cold function
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Disable "predict_4x4_dc_left" as cold function
Noelle:  Function "x264_clip3.813"
Noelle:  Disable "x264_clip3.813" as cold function
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Disable "x264_mb_analyse_transform_rd" as cold function
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Disable "x264_ratecontrol_qp" as cold function
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Disable "x264_cabac_mb_intra4x4_pred_mode.1022" as cold function
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Disable "predict_4x4_dc_top" as cold function
Noelle:  Function "x264_clip3.748"
Noelle:  Disable "x264_clip3.748" as cold function
Noelle:  Function "x264_encoder_open"
Noelle:  Disable "x264_encoder_open" as cold function
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Disable "x264_macroblock_encode_skip" as cold function
Noelle:  Function "x264_encoder_frame_end"
Noelle:  Disable "x264_encoder_frame_end" as cold function
Noelle:  Function "pack16to32_mask.785"
Noelle:  Disable "pack16to32_mask.785" as cold function
Noelle:  Function "x264_frame_filter"
Noelle:  Disable "x264_frame_filter" as cold function
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Disable "pack16to32_mask.1051" as cold function
Noelle:  Function "x264_clip3.1001"
Noelle:  Disable "x264_clip3.1001" as cold function
Noelle:  Function "bs_size_se"
Noelle:  Disable "bs_size_se" as cold function
Noelle:  Function "x264_rdo_init"
Noelle:  Disable "x264_rdo_init" as cold function
Noelle:  Function "x264_noise_reduction_update"
Noelle:  Disable "x264_noise_reduction_update" as cold function
Noelle:  Function "x264_cqm_init"
Noelle:  Disable "x264_cqm_init" as cold function
Noelle:  Function "x264_reference_build_list"
Noelle:  Disable "x264_reference_build_list" as cold function
Noelle:  Function "x264_slice_header_write"
Noelle:  Disable "x264_slice_header_write" as cold function
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Disable "x264_cabac_size_decision2" as cold function
Noelle:  Function "predict_8x8c_dc_128"
Noelle:  Disable "predict_8x8c_dc_128" as cold function
Noelle:  Function "predict_16x16_dc_128"
Noelle:  Disable "predict_16x16_dc_128" as cold function
Noelle:  Function "x264_slice_init"
Noelle:  Disable "x264_slice_init" as cold function
Noelle:  Function "bs_write_ue_big"
Noelle:  Disable "bs_write_ue_big" as cold function
Noelle:  Function "bs_write"
Noelle:  Disable "bs_write" as cold function
Noelle:  Function "x264_macroblock_slice_init"
Noelle:  Disable "x264_macroblock_slice_init" as cold function
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:  Disable "x264_frame_expand_border_mod16" as cold function
Noelle:  Function "x264_encoder_close"
Noelle:  Disable "x264_encoder_close" as cold function
Noelle:  Function "x264_reference_update"
Noelle:  Disable "x264_reference_update" as cold function
Noelle:  Function "x264_frame_delete"
Noelle:  Disable "x264_frame_delete" as cold function
Noelle:  Function "x264_slice_header_init"
Noelle:  Disable "x264_slice_header_init" as cold function
Noelle:  Function "x264_ratecontrol_start"
Noelle:  Disable "x264_ratecontrol_start" as cold function
Noelle:  Function "x264_ratecontrol_end"
Noelle:  Disable "x264_ratecontrol_end" as cold function
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:  Disable "setup_inverse_delta_pocs" as cold function
Noelle:  Function "bs_write_se"
Noelle:  Disable "bs_write_se" as cold function
Noelle:  Function "pack8to32"
Noelle:  Disable "pack8to32" as cold function
Noelle:  Function "x264_cabac_encode_flush"
Noelle:  Disable "x264_cabac_encode_flush" as cold function
Noelle:  Function "x264_frame_copy_picture"
Noelle:  Disable "x264_frame_copy_picture" as cold function
Noelle:  Function "bs_write.943"
Noelle:  Disable "bs_write.943" as cold function
Noelle:  Function "x264_frame_shift"
Noelle:  Disable "x264_frame_shift" as cold function
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Disable "x264_frame_pop_unused" as cold function
Noelle:  Function "x264_free"
Noelle:  Disable "x264_free" as cold function
Noelle:  Function "x264_sei_version_write"
Noelle:  Disable "x264_sei_version_write" as cold function
Noelle:  Function "x264_frame_push"
Noelle:  Disable "x264_frame_push" as cold function
Noelle:  Function "read_frame_y4m"
Noelle:  Disable "read_frame_y4m" as cold function
Noelle:  Function "x264_sps_write"
Noelle:  Disable "x264_sps_write" as cold function
Noelle:  Function "bs_align_1"
Noelle:  Disable "bs_align_1" as cold function
Noelle:  Function "x264_slicetype_decide"
Noelle:  Disable "x264_slicetype_decide" as cold function
Noelle:  Function "x264_nal_end"
Noelle:  Disable "x264_nal_end" as cold function
Noelle:  Function "x264_frame_push_unused"
Noelle:  Disable "x264_frame_push_unused" as cold function
Noelle:  Function "x264_nal_start"
Noelle:  Disable "x264_nal_start" as cold function
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Disable "bs_write_ue_big.944" as cold function
Noelle:  Function "bs_write1"
Noelle:  Disable "bs_write1" as cold function
Noelle:  Function "bs_init"
Noelle:  Disable "bs_init" as cold function
Noelle:  Function "x264_frame_pop"
Noelle:  Disable "x264_frame_pop" as cold function
Noelle:  Function "bs_flush"
Noelle:  Disable "bs_flush" as cold function
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Disable "predict_4x4_dc_128" as cold function
Noelle:  Function "Parse"
Noelle:  Disable "Parse" as cold function
Noelle:  Function "x264_pps_write"
Noelle:  Disable "x264_pps_write" as cold function
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Disable "x264_cabac_encode_init" as cold function
Noelle:  Function "get_zone"
Noelle:  Disable "get_zone" as cold function
Noelle:  Function "x264_frame_new"
Noelle:  Disable "x264_frame_new" as cold function
Noelle:  Function "x264_param_parse"
Noelle:  Disable "x264_param_parse" as cold function
Noelle:  Function "update_vbv"
Noelle:  Disable "update_vbv" as cold function
Noelle:  Function "x264_validate_parameters"
Noelle:  Disable "x264_validate_parameters" as cold function
Noelle:  Function "x264_dct_init_weights"
Noelle:  Disable "x264_dct_init_weights" as cold function
Noelle:  Function "x264_log"
Noelle:  Disable "x264_log" as cold function
Noelle:  Function "x264_reference_reset"
Noelle:  Disable "x264_reference_reset" as cold function
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Disable "x264_thread_sync_stat" as cold function
Noelle:  Function "endian_fix"
Noelle:  Disable "endian_fix" as cold function
Noelle:  Function "x264_validate_levels"
Noelle:  Disable "x264_validate_levels" as cold function
Noelle:  Function "x264_clip3.848"
Noelle:  Disable "x264_clip3.848" as cold function
Noelle:  Function "bs_write1.946"
Noelle:  Disable "bs_write1.946" as cold function
Noelle:  Function "open_file_y4m"
Noelle:  Disable "open_file_y4m" as cold function
Noelle:  Function "x264_macroblock_cache_end"
Noelle:  Disable "x264_macroblock_cache_end" as cold function
Noelle:  Function "write_nalu_bsf"
Noelle:  Disable "write_nalu_bsf" as cold function
Noelle:  Function "bs_write_se.945"
Noelle:  Disable "bs_write_se.945" as cold function
Noelle:  Function "x264_sps_init"
Noelle:  Disable "x264_sps_init" as cold function
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Disable "bs_rbsp_trailing.947" as cold function
Noelle:  Function "x264_cqm_delete"
Noelle:  Disable "x264_cqm_delete" as cold function
Noelle:  Function "bs_write32"
Noelle:  Disable "bs_write32" as cold function
Noelle:  Function "x264_ratecontrol_new"
Noelle:  Disable "x264_ratecontrol_new" as cold function
Noelle:  Function "x264_malloc"
Noelle:  Disable "x264_malloc" as cold function
Noelle:  Function "x264_pixel_init"
Noelle:  Disable "x264_pixel_init" as cold function
Noelle:  Function "x264_macroblock_cache_init"
Noelle:  Disable "x264_macroblock_cache_init" as cold function
Noelle:  Function "endian_fix.949"
Noelle:  Disable "endian_fix.949" as cold function
Noelle:  Function "x264_param_default"
Noelle:  Disable "x264_param_default" as cold function
Noelle:  Function "bs_flush.948"
Noelle:  Disable "bs_flush.948" as cold function
Noelle:  Function "x264_param2string"
Noelle:  Disable "x264_param2string" as cold function
Noelle:  Function "x264_cpu_detect"
Noelle:  Disable "x264_cpu_detect" as cold function
Noelle:  Function "x264_mc_init"
Noelle:  Disable "x264_mc_init" as cold function
Noelle:  Function "set_eop_bsf"
Noelle:  Disable "set_eop_bsf" as cold function
Noelle:  Function "x264_pps_init"
Noelle:  Disable "x264_pps_init" as cold function
Noelle:  Function "x264_clip3.593"
Noelle:  Disable "x264_clip3.593" as cold function
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Disable "x264_mc_init_mmx" as cold function
Noelle:  Function "x264_quant_init"
Noelle:  Disable "x264_quant_init" as cold function
Noelle:  Function "x264_frame_sort"
Noelle:  Disable "x264_frame_sort" as cold function
Noelle:  Function "parse_enum"
Noelle:  Disable "parse_enum" as cold function
Noelle:  Function "x264_atobool"
Noelle:  Disable "x264_atobool" as cold function
Noelle:  Function "x264_atoi"
Noelle:  Disable "x264_atoi" as cold function
Noelle:  Function "mbcmp_init"
Noelle:  Disable "mbcmp_init" as cold function
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Disable "x264_predict_8x8_init" as cold function
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Disable "x264_predict_16x16_init" as cold function
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Disable "x264_predict_4x4_init" as cold function
Noelle:  Function "x264_dct_init"
Noelle:  Disable "x264_dct_init" as cold function
Noelle:  Function "x264_ratecontrol_delete"
Noelle:  Disable "x264_ratecontrol_delete" as cold function
Noelle:  Function "x264_print_intra"
Noelle:  Disable "x264_print_intra" as cold function
Noelle:  Function "x264_reduce_fraction"
Noelle:  Disable "x264_reduce_fraction" as cold function
Noelle:  Function "x264_zigzag_init"
Noelle:  Disable "x264_zigzag_init" as cold function
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Disable "x264_predict_8x8c_init" as cold function
Noelle:  Function "x264_picture_alloc"
Noelle:  Disable "x264_picture_alloc" as cold function
Noelle:  Function "get_frame_total_y4m"
Noelle:  Disable "get_frame_total_y4m" as cold function
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Disable "x264_predict_16x16_init_mmx" as cold function
Noelle:  Function "x264_deblock_init"
Noelle:  Disable "x264_deblock_init" as cold function
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Disable "x264_predict_8x8_init_mmx" as cold function
Noelle:  Function "endian_fix32"
Noelle:  Disable "endian_fix32" as cold function
Noelle:  Function "x264_mdate"
Noelle:  Disable "x264_mdate" as cold function
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Disable "x264_predict_8x8c_init_mmx" as cold function
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Disable "x264_predict_4x4_init_mmx" as cold function
Noelle:  Function "x264_clip3f"
Noelle:  Disable "x264_clip3f" as cold function
Noelle:  Function "qp2qscale"
Noelle:  Disable "qp2qscale" as cold function
Noelle:  Function "parse_zones"
Noelle:  Disable "parse_zones" as cold function
Noelle:  Function "x264_picture_clean"
Noelle:  Disable "x264_picture_clean" as cold function
Noelle:  Function "close_file_y4m"
Noelle:  Disable "close_file_y4m" as cold function
Noelle:  Function "close_file_bsf"
Noelle:  Disable "close_file_bsf" as cold function
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Disable "x264_ratecontrol_summary" as cold function
Noelle:  Function "open_file_bsf"
Noelle:  Disable "open_file_bsf" as cold function
Noelle:  Function "x264_clip3"
Noelle:  Disable "x264_clip3" as cold function
Noelle:  Function "set_param_bsf"
Noelle:  Disable "set_param_bsf" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x4_ssse3" as cold function
Noelle:  Function "ssim_end1"
Noelle:  Disable "ssim_end1" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3" as cold function
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Disable "x264_median_mv_mmxext.824" as cold function
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Disable "x264_partition_i4x4_size_cavlc" as cold function
Noelle:  Function "x264_slicetype_analyse"
Noelle:  Disable "x264_slicetype_analyse" as cold function
Noelle:  Function "x264_lowres_context_init"
Noelle:  Disable "x264_lowres_context_init" as cold function
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:  Disable "x264_slicetype_frame_cost" as cold function
Noelle:  Function "scenecut"
Noelle:  Disable "scenecut" as cold function
Noelle:  Function "x264_slicetype_path_search"
Noelle:  Disable "x264_slicetype_path_search" as cold function
Noelle:  Function "x264_slicetype_path"
Noelle:  Disable "x264_slicetype_path" as cold function
Noelle:  Function "x264_slicetype_path_cost"
Noelle:  Disable "x264_slicetype_path_cost" as cold function
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:  Disable "x264_slicetype_mb_cost" as cold function
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Disable "x264_partition_i4x4_size_cabac" as cold function
Noelle:  Function "x264_rc_analyse_slice"
Noelle:  Disable "x264_rc_analyse_slice" as cold function
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Disable "x264_me_refine_qpel" as cold function
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Disable "x264_me_refine_bidir_satd" as cold function
Noelle:  Function "x264_me_refine_bidir"
Noelle:  Disable "x264_me_refine_bidir" as cold function
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Disable "x264_me_refine_bidir_rd" as cold function
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:  Disable "x264_me_refine_qpel_rd" as cold function
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Disable "x264_macroblock_cache_mv.841" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Disable "x264_macroblock_cache_mvd.842" as cold function
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Disable "cavlc_intra4x4_pred_size" as cold function
Noelle:  Function "update_vbv_plan"
Noelle:  Disable "update_vbv_plan" as cold function
Noelle:  Function "rate_estimate_qscale"
Noelle:  Disable "rate_estimate_qscale" as cold function
Noelle:  Function "accum_p_qp_update"
Noelle:  Disable "accum_p_qp_update" as cold function
Noelle:  Function "row_bits_so_far"
Noelle:  Disable "row_bits_so_far" as cold function
Noelle:  Function "update_predictor"
Noelle:  Disable "update_predictor" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_4x8_sse2" as cold function
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Disable "x264_ratecontrol_get_estimated_size" as cold function
Noelle:  Function "get_diff_limited_q"
Noelle:  Disable "get_diff_limited_q" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:  Disable "x264_macroblock_cache_rect4.843" as cold function
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:  Disable "x264_adaptive_quant_frame" as cold function
Noelle:  Function "ac_energy_mb"
Noelle:  Disable "ac_energy_mb" as cold function
Noelle:  Function "x264_adaptive_quant"
Noelle:  Disable "x264_adaptive_quant" as cold function
Noelle:  Function "x264_clip3f.856"
Noelle:  Disable "x264_clip3f.856" as cold function
Noelle:  Function "init_pass2"
Noelle:  Disable "init_pass2" as cold function
Noelle:  Function "qscale2bits"
Noelle:  Disable "qscale2bits" as cold function
Noelle:  Function "get_qscale"
Noelle:  Disable "get_qscale" as cold function
Noelle:  Function "clip_qscale"
Noelle:  Disable "clip_qscale" as cold function
Noelle:  Function "vbv_pass2"
Noelle:  Disable "vbv_pass2" as cold function
Noelle:  Function "count_expected_bits"
Noelle:  Disable "count_expected_bits" as cold function
Noelle:  Function "qscale2qp"
Noelle:  Disable "qscale2qp" as cold function
Noelle:  Function "find_underflow"
Noelle:  Disable "find_underflow" as cold function
Noelle:  Function "fix_underflow"
Noelle:  Disable "fix_underflow" as cold function
Noelle:  Function "predict_size"
Noelle:  Disable "predict_size" as cold function
Noelle:  Function "parse_zone"
Noelle:  Disable "parse_zone" as cold function
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Disable "x264_ratecontrol_set_estimated_size" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Disable "x264_cabac_mb8x8_mvd.1027" as cold function
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Disable "x264_macroblock_encode_p4x4" as cold function
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Disable "x264_cabac_mb_transform_size.1018" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Disable "x264_cabac_mb_sub_p_partition.1026" as cold function
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:  Disable "x264_macroblock_encode_p8x8" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Disable "x264_cabac_mb_sub_b_partition.1028" as cold function
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Disable "get_ref_sse2_misalign" as cold function
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Disable "get_ref_cache64_sse2" as cold function
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Disable "mc_luma_cache64_sse2" as cold function
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:  Disable "x264_hpel_filter_sse2_misalign" as cold function
Noelle:  Function "x264_quant_8x8"
Noelle:  Disable "x264_quant_8x8" as cold function
Noelle:  Function "endian_fix32.950"
Noelle:  Disable "endian_fix32.950" as cold function
Noelle:  Function "transpose"
Noelle:  Disable "transpose" as cold function
Noelle:  Function "scaling_list_write"
Noelle:  Disable "scaling_list_write" as cold function
Noelle:  Function "bs_size_se.962"
Noelle:  Disable "bs_size_se.962" as cold function
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Disable "bs_size_ue_big.963" as cold function
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Disable "x264_mb_encode_i8x8" as cold function
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:  Disable "x264_macroblock_write_cavlc" as cold function
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Disable "x264_predict_lossless_8x8_chroma" as cold function
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Disable "x264_predict_lossless_4x4" as cold function
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Disable "x264_predict_lossless_8x8" as cold function
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Disable "x264_predict_lossless_16x16" as cold function
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:  Disable "x264_macroblock_probe_skip" as cold function
Noelle:  Function "mc_luma_mmxext"
Noelle:  Disable "mc_luma_mmxext" as cold function
Noelle:  Function "get_ref_mmxext"
Noelle:  Disable "get_ref_mmxext" as cold function
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:  Disable "x264_hpel_filter_sse2_amd" as cold function
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:  Disable "x264_hpel_filter_mmxext" as cold function
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:  Disable "block_residual_write_cavlc.1085" as cold function
Noelle:  Function "bs_pos.1063"
Noelle:  Disable "bs_pos.1063" as cold function
Noelle:  Function "bs_write1.1065"
Noelle:  Disable "bs_write1.1065" as cold function
Noelle:  Function "bs_write_ue"
Noelle:  Disable "bs_write_ue" as cold function
Noelle:  Function "bs_align_0"
Noelle:  Disable "bs_align_0" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1066" as cold function
Noelle:  Function "bs_write.1069"
Noelle:  Disable "bs_write.1069" as cold function
Noelle:  Function "bs_write_te"
Noelle:  Disable "bs_write_te" as cold function
Noelle:  Function "bs_write_se.1072"
Noelle:  Disable "bs_write_se.1072" as cold function
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Disable "cavlc_mb8x8_mvd.1074" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1083" as cold function
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Disable "cavlc_qp_delta.1084" as cold function
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Disable "array_non_zero_count_mmx.1086" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:  Disable "x264_macroblock_luma_write_cavlc.1087" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Disable "x264_mb_predict_non_zero_code.1088" as cold function
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Disable "bs_write_vlc.1090" as cold function
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Disable "cavlc_mb_mvd.1093" as cold function
Noelle:  Function "endian_fix.1095"
Noelle:  Disable "endian_fix.1095" as cold function
Noelle:  Function "bs_flush.1096"
Noelle:  Disable "bs_flush.1096" as cold function
Noelle:  Function "endian_fix32.1097"
Noelle:  Disable "endian_fix32.1097" as cold function
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:  Disable "x264_macroblock_bipred_init" as cold function
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:  Disable "x264_frame_expand_border_lowres" as cold function
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:  Disable "munge_cavlc_nnz_row" as cold function
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Disable "munge_cavlc_nnz" as cold function
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:  Disable "restore_cavlc_nnz_row" as cold function
Noelle:  Function "x264_frame_deblock"
Noelle:  Disable "x264_frame_deblock" as cold function
Noelle:  Function "deblock_v_luma_c"
Noelle:  Disable "deblock_v_luma_c" as cold function
Noelle:  Function "deblock_h_luma_c"
Noelle:  Disable "deblock_h_luma_c" as cold function
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Disable "deblock_v_chroma_c" as cold function
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Disable "deblock_h_chroma_c" as cold function
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Disable "deblock_v_luma_intra_c" as cold function
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Disable "x264_mb_load_mv_direct8x8" as cold function
Noelle:  Function "pixel_sa8d_wxh"
Noelle:  Disable "pixel_sa8d_wxh" as cold function
Noelle:  Function "pixel_satd_wxh"
Noelle:  Disable "pixel_satd_wxh" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:  Disable "x264_mb_predict_mv_direct16x16" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_spatial" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_temporal" as cold function
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Disable "x264_macroblock_cache_ref" as cold function
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Disable "x264_macroblock_cache_mv" as cold function
Noelle:  Function "pack16to32_mask"
Noelle:  Disable "pack16to32_mask" as cold function
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:  Disable "x264_macroblock_cache_rect4" as cold function
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:  Disable "x264_macroblock_cache_rect1" as cold function
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Disable "deblock_h_luma_intra_c" as cold function
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Disable "x264_mb_mc_8x8" as cold function
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Disable "x264_mb_mc_1xywh" as cold function
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Disable "x264_mb_mc_01xywh" as cold function
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Disable "x264_mb_mc_direct8x8" as cold function
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Disable "predict_8x8_vr_mmxext" as cold function
Noelle:  Function "x264_frame_unshift"
Noelle:  Disable "x264_frame_unshift" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_ssse3" as cold function
Noelle:  Function "predict_row_size_sum"
Noelle:  Disable "predict_row_size_sum" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_sse2" as cold function
Noelle:  Function "predict_row_size"
Noelle:  Disable "predict_row_size" as cold function
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:  Disable "x264_ratecontrol_slice_type" as cold function
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Disable "x264_thread_sync_ratecontrol" as cold function
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:  Disable "predict_16x16_dc_mmxext" as cold function
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Disable "deblock_v_chroma_intra_c" as cold function
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Disable "deblock_h_chroma_intra_c" as cold function
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:  Disable "predict_16x16_p_mmxext" as cold function
Noelle:  Function "pixel_hadamard_ac"
Noelle:  Disable "pixel_hadamard_ac" as cold function
Noelle:  Function "deblock_chroma_intra_c"
Noelle:  Disable "deblock_chroma_intra_c" as cold function
Noelle:  Function "deblock_luma_intra_c"
Noelle:  Disable "deblock_luma_intra_c" as cold function
Noelle:  Function "deblock_chroma_c"
Noelle:  Disable "deblock_chroma_c" as cold function
Noelle:  Function "x264_clip3.703"
Noelle:  Disable "x264_clip3.703" as cold function
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Disable "x264_clip_uint8.704" as cold function
Noelle:  Function "deblock_luma_c"
Noelle:  Disable "deblock_luma_c" as cold function
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Disable "x264_frame_cond_broadcast" as cold function
Noelle:  Function "x264_frame_cond_wait"
Noelle:  Disable "x264_frame_cond_wait" as cold function
Noelle:  Function "SigIntHandler"
Noelle:  Disable "SigIntHandler" as cold function
Noelle:  Function "parse_qpfile"
Noelle:  Disable "parse_qpfile" as cold function
Noelle:  Function "Help"
Noelle:  Disable "Help" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "mk_flushContextID"
Noelle:  Disable "mk_flushContextID" as cold function
Noelle:  Function "strtable_lookup"
Noelle:  Disable "strtable_lookup" as cold function
Noelle:  Function "mk_createWriter"
Noelle:  Disable "mk_createWriter" as cold function
Noelle:  Function "mk_createContext"
Noelle:  Disable "mk_createContext" as cold function
Noelle:  Function "dequant_8x8"
Noelle:  Disable "dequant_8x8" as cold function
Noelle:  Function "x264_denoise_dct"
Noelle:  Disable "x264_denoise_dct" as cold function
Noelle:  Function "x264_decimate_score15"
Noelle:  Disable "x264_decimate_score15" as cold function
Noelle:  Function "x264_decimate_score16"
Noelle:  Disable "x264_decimate_score16" as cold function
Noelle:  Function "x264_decimate_score64"
Noelle:  Disable "x264_decimate_score64" as cold function
Noelle:  Function "x264_coeff_last4"
Noelle:  Disable "x264_coeff_last4" as cold function
Noelle:  Function "x264_coeff_last15"
Noelle:  Disable "x264_coeff_last15" as cold function
Noelle:  Function "x264_coeff_last16"
Noelle:  Disable "x264_coeff_last16" as cold function
Noelle:  Function "x264_coeff_last64"
Noelle:  Disable "x264_coeff_last64" as cold function
Noelle:  Function "mk_destroyContexts"
Noelle:  Disable "mk_destroyContexts" as cold function
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:  Disable "x264_pixel_sad_16x16" as cold function
Noelle:  Function "get_frame_total_yuv"
Noelle:  Disable "get_frame_total_yuv" as cold function
Noelle:  Function "read_frame_yuv"
Noelle:  Disable "read_frame_yuv" as cold function
Noelle:  Function "close_file_yuv"
Noelle:  Disable "close_file_yuv" as cold function
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Disable "x264_encoder_reconfig" as cold function
Noelle:  Function "x264_encoder_headers"
Noelle:  Disable "x264_encoder_headers" as cold function
Noelle:  Function "x264_thread_sync_context"
Noelle:  Disable "x264_thread_sync_context" as cold function
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Disable "bs_rbsp_trailing" as cold function
Noelle:  Function "open_file_yuv"
Noelle:  Disable "open_file_yuv" as cold function
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:  Disable "x264_pixel_sad_16x8" as cold function
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:  Disable "x264_pixel_sad_8x16" as cold function
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:  Disable "x264_pixel_sad_8x8" as cold function
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:  Disable "x264_pixel_sad_8x4" as cold function
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:  Disable "x264_pixel_sad_4x8" as cold function
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:  Disable "x264_pixel_sad_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Disable "x264_pixel_sad_x3_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Disable "x264_pixel_sad_x3_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Disable "x264_pixel_sad_x3_8x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Disable "x264_pixel_sad_x3_8x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Disable "x264_pixel_sad_x3_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Disable "x264_pixel_sad_x3_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Disable "x264_pixel_sad_x3_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Disable "x264_pixel_sad_x4_16x16" as cold function
Noelle:  Function "mk_writeHeader"
Noelle:  Disable "mk_writeHeader" as cold function
Noelle:  Function "mk_writeUInt"
Noelle:  Disable "mk_writeUInt" as cold function
Noelle:  Function "mk_writeStr"
Noelle:  Disable "mk_writeStr" as cold function
Noelle:  Function "mk_closeContext"
Noelle:  Disable "mk_closeContext" as cold function
Noelle:  Function "mk_writeFloat"
Noelle:  Disable "mk_writeFloat" as cold function
Noelle:  Function "mk_writeBin"
Noelle:  Disable "mk_writeBin" as cold function
Noelle:  Function "mk_flushContextData"
Noelle:  Disable "mk_flushContextData" as cold function
Noelle:  Function "mk_appendContextData"
Noelle:  Disable "mk_appendContextData" as cold function
Noelle:  Function "mk_writeID"
Noelle:  Disable "mk_writeID" as cold function
Noelle:  Function "x264_clip3.467"
Noelle:  Disable "x264_clip3.467" as cold function
Noelle:  Function "dequant_4x4_dc"
Noelle:  Disable "dequant_4x4_dc" as cold function
Noelle:  Function "mk_writeSize"
Noelle:  Disable "mk_writeSize" as cold function
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Disable "mk_writeFloatRaw" as cold function
Noelle:  Function "mk_startFrame"
Noelle:  Disable "mk_startFrame" as cold function
Noelle:  Function "mk_flushFrame"
Noelle:  Disable "mk_flushFrame" as cold function
Noelle:  Function "mk_closeCluster"
Noelle:  Disable "mk_closeCluster" as cold function
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Disable "mk_ebmlSizeSize" as cold function
Noelle:  Function "mk_ebmlSIntSize"
Noelle:  Disable "mk_ebmlSIntSize" as cold function
Noelle:  Function "mk_writeSInt"
Noelle:  Disable "mk_writeSInt" as cold function
Noelle:  Function "mk_setFrameFlags"
Noelle:  Disable "mk_setFrameFlags" as cold function
Noelle:  Function "mk_addFrameData"
Noelle:  Disable "mk_addFrameData" as cold function
Noelle:  Function "mk_close"
Noelle:  Disable "mk_close" as cold function
Noelle:  Function "cavlc_qp_delta"
Noelle:  Disable "cavlc_qp_delta" as cold function
Noelle:  Function "x264_partition_size_cavlc"
Noelle:  Disable "x264_partition_size_cavlc" as cold function
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Disable "cavlc_mb8x8_mvd" as cold function
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Disable "cavlc_mb_mvd" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:  Disable "x264_macroblock_luma_write_cavlc" as cold function
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Disable "array_non_zero_count_mmx" as cold function
Noelle:  Function "block_residual_write_cavlc"
Noelle:  Disable "block_residual_write_cavlc" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Disable "x264_mb_predict_non_zero_code" as cold function
Noelle:  Function "bs_write_vlc"
Noelle:  Disable "bs_write_vlc" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Disable "x264_cabac_mb8x8_mvd" as cold function
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Disable "array_non_zero_int_mmx" as cold function
Noelle:  Function "array_non_zero_int_c"
Noelle:  Disable "array_non_zero_int_c" as cold function
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Disable "x264_subpartition_size_cabac" as cold function
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Disable "x264_subpartition_size_cavlc" as cold function
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:  Disable "x264_macroblock_size_cavlc" as cold function
Noelle:  Function "x264_partition_size_cabac"
Noelle:  Disable "x264_partition_size_cabac" as cold function
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Disable "x264_cabac_mb_transform_size" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Disable "x264_cabac_mb_sub_p_partition" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Disable "x264_cabac_mb_sub_b_partition" as cold function
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Disable "x264_quant_dc_trellis" as cold function
Noelle:  Function "quant_trellis_cabac"
Noelle:  Disable "quant_trellis_cabac" as cold function
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Disable "x264_cabac_size_decision_noup2" as cold function
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Disable "x264_quant_4x4_trellis" as cold function
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Disable "x264_quant_8x8_trellis" as cold function
Noelle:  Function "x264_intra_rd_refine"
Noelle:  Disable "x264_intra_rd_refine" as cold function
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Disable "x264_macroblock_probe_pskip" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:  Disable "x264_mb_analyse_inter_p8x8_mixed_ref" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:  Disable "x264_mb_analyse_inter_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:  Disable "x264_mb_analyse_inter_p4x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:  Disable "x264_mb_analyse_inter_b8x16" as cold function
Noelle:  Function "x264_slurp_file"
Noelle:  Disable "x264_slurp_file" as cold function
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:  Disable "pixel_avg_weight_wxh" as cold function
Noelle:  Function "pixel_avg"
Noelle:  Disable "pixel_avg" as cold function
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Disable "x264_predict_8x8_filter" as cold function
Noelle:  Function "predict_16x16_v"
Noelle:  Disable "predict_16x16_v" as cold function
Noelle:  Function "predict_16x16_h"
Noelle:  Disable "predict_16x16_h" as cold function
Noelle:  Function "predict_16x16_dc"
Noelle:  Disable "predict_16x16_dc" as cold function
Noelle:  Function "predict_16x16_p"
Noelle:  Disable "predict_16x16_p" as cold function
Noelle:  Function "predict_16x16_dc_left"
Noelle:  Disable "predict_16x16_dc_left" as cold function
Noelle:  Function "predict_16x16_dc_top"
Noelle:  Disable "predict_16x16_dc_top" as cold function
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Disable "x264_clip_uint8.650" as cold function
Noelle:  Function "predict_8x8c_v"
Noelle:  Disable "predict_8x8c_v" as cold function
Noelle:  Function "predict_8x8c_h"
Noelle:  Disable "predict_8x8c_h" as cold function
Noelle:  Function "predict_8x8c_dc"
Noelle:  Disable "predict_8x8c_dc" as cold function
Noelle:  Function "x264_realloc"
Noelle:  Disable "x264_realloc" as cold function
Noelle:  Function "x264_refine_bidir"
Noelle:  Disable "x264_refine_bidir" as cold function
Noelle:  Function "x264_coeff_last_internal"
Noelle:  Disable "x264_coeff_last_internal" as cold function
Noelle:  Function "x264_decimate_score_internal"
Noelle:  Disable "x264_decimate_score_internal" as cold function
Noelle:  Function "x264_rd_cost_part"
Noelle:  Disable "x264_rd_cost_part" as cold function
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Disable "x264_rd_cost_subpart" as cold function
Noelle:  Function "x264_atof"
Noelle:  Disable "x264_atof" as cold function
Noelle:  Function "parse_cqm"
Noelle:  Disable "parse_cqm" as cold function
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Disable "zigzag_scan_8x8_frame" as cold function
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Disable "zigzag_scan_4x4_frame" as cold function
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Disable "zigzag_sub_8x8_frame" as cold function
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Disable "zigzag_sub_4x4_frame" as cold function
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:  Disable "zigzag_interleave_8x8_cavlc" as cold function
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Disable "x264_cpu_num_processors" as cold function
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Disable "x264_cabac_encode_decision_c" as cold function
Noelle:  Function "x264_cqm_parse_file"
Noelle:  Disable "x264_cqm_parse_file" as cold function
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:  Disable "x264_cqm_parse_jmlist" as cold function
Noelle:  Function "quant_8x8"
Noelle:  Disable "quant_8x8" as cold function
Noelle:  Function "quant_4x4"
Noelle:  Disable "quant_4x4" as cold function
Noelle:  Function "quant_4x4_dc"
Noelle:  Disable "quant_4x4_dc" as cold function
Noelle:  Function "quant_2x2_dc"
Noelle:  Disable "quant_2x2_dc" as cold function
Noelle:  Function "dequant_4x4"
Noelle:  Disable "dequant_4x4" as cold function
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Disable "x264_partition_i8x8_size_cabac" as cold function
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Disable "x264_mb_analyse_transform" as cold function
Noelle:  Function "x264_psy_trellis_init"
Noelle:  Disable "x264_psy_trellis_init" as cold function
Noelle:  Function "x264_me_search"
Noelle:  Disable "x264_me_search" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Disable "x264_mb_cache_mv_b8x16" as cold function
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Disable "x264_mb_cache_mv_b16x8" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Disable "x264_mb_cache_mv_b8x8" as cold function
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Disable "x264_macroblock_cache_skip" as cold function
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Disable "x264_macroblock_cache_intra8x8_pred" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Disable "x264_mb_analyse_inter_p4x4_chroma" as cold function
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Disable "x264_rd_cost_i4x4" as cold function
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Disable "x264_rd_cost_i8x8" as cold function
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Disable "x264_rd_cost_i8x8_chroma" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:  Disable "x264_i8x8_chroma_size_cabac" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:  Disable "x264_i8x8_chroma_size_cavlc" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Disable "x264_pixel_sad_x4_16x8" as cold function
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:  Disable "x264_partition_i8x8_size_cavlc" as cold function
Noelle:  Function "open_file_mkv"
Noelle:  Disable "open_file_mkv" as cold function
Noelle:  Function "set_param_mkv"
Noelle:  Disable "set_param_mkv" as cold function
Noelle:  Function "gcd"
Noelle:  Disable "gcd" as cold function
Noelle:  Function "write_nalu_mkv"
Noelle:  Disable "write_nalu_mkv" as cold function
Noelle:  Function "write_header_mkv"
Noelle:  Disable "write_header_mkv" as cold function
Noelle:  Function "set_eop_mkv"
Noelle:  Disable "set_eop_mkv" as cold function
Noelle:  Function "close_file_mkv"
Noelle:  Disable "close_file_mkv" as cold function
Noelle:  Function "x264_log_default"
Noelle:  Disable "x264_log_default" as cold function
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Disable "x264_pixel_sa8d_16x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Disable "x264_pixel_satd_x3_16x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Disable "x264_pixel_satd_x3_8x16" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Disable "x264_pixel_satd_x3_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Disable "x264_pixel_satd_x3_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Disable "x264_pixel_satd_x3_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Disable "x264_pixel_satd_x3_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Disable "x264_pixel_satd_x4_16x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Disable "x264_pixel_satd_x4_16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Disable "x264_pixel_satd_x4_8x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Disable "x264_pixel_satd_x4_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Disable "x264_pixel_satd_x4_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Disable "x264_pixel_satd_x4_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Disable "x264_pixel_satd_x4_4x4" as cold function
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Disable "x264_pixel_sa8d_16x16" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Disable "x264_pixel_satd_x3_16x16" as cold function
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Disable "x264_pixel_sa8d_8x16" as cold function
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Disable "x264_pixel_sa8d_8x8" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Disable "x264_pixel_hadamard_ac_16x16" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Disable "x264_pixel_hadamard_ac_16x8" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Disable "x264_pixel_hadamard_ac_8x16" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Disable "x264_pixel_hadamard_ac_8x8" as cold function
Noelle:  Function "x264_pixel_ads4"
Noelle:  Disable "x264_pixel_ads4" as cold function
Noelle:  Function "x264_pixel_ads2"
Noelle:  Disable "x264_pixel_ads2" as cold function
Noelle:  Function "x264_pixel_ads1"
Noelle:  Disable "x264_pixel_ads1" as cold function
Noelle:  Function "x264_pixel_var_16x16"
Noelle:  Disable "x264_pixel_var_16x16" as cold function
Noelle:  Function "x264_pixel_var_8x8"
Noelle:  Disable "x264_pixel_var_8x8" as cold function
Noelle:  Function "ssim_4x4x2_core"
Noelle:  Disable "ssim_4x4x2_core" as cold function
Noelle:  Function "ssim_end4"
Noelle:  Disable "ssim_end4" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Disable "x264_pixel_sad_x4_4x4" as cold function
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Disable "x264_clip_uint8.729" as cold function
Noelle:  Function "pixel_sub_wxh"
Noelle:  Disable "pixel_sub_wxh" as cold function
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Disable "zigzag_scan_8x8_field" as cold function
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Disable "zigzag_scan_4x4_field" as cold function
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Disable "zigzag_sub_8x8_field" as cold function
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Disable "zigzag_sub_4x4_field" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Disable "x264_pixel_sad_x4_8x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Disable "x264_pixel_sad_x4_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Disable "x264_pixel_sad_x4_4x8" as cold function
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:  Disable "x264_pixel_ssd_16x16" as cold function
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:  Disable "x264_pixel_ssd_16x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:  Disable "x264_pixel_ssd_8x16" as cold function
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:  Disable "x264_pixel_ssd_8x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:  Disable "x264_pixel_ssd_8x4" as cold function
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:  Disable "x264_pixel_ssd_4x8" as cold function
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:  Disable "x264_pixel_ssd_4x4" as cold function
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Disable "x264_pixel_satd_16x16" as cold function
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Disable "x264_pixel_satd_16x8" as cold function
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Disable "x264_pixel_satd_8x16" as cold function
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Disable "x264_pixel_satd_8x8" as cold function
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Disable "x264_pixel_satd_8x4" as cold function
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Disable "x264_pixel_satd_4x8" as cold function
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Disable "x264_pixel_satd_4x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:  Disable "x264_mb_analyse_inter_b8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x16_mmxext" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:  Disable "x264_mb_analyse_inter_p8x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:  Disable "x264_mb_analyse_inter_p4x8" as cold function
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Disable "x264_mb_cache_mv_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:  Disable "x264_mb_analyse_inter_p16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:  Disable "x264_mb_analyse_inter_p8x16" as cold function
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Disable "x264_macroblock_probe_bskip" as cold function
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:  Disable "x264_mb_analyse_inter_direct" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:  Disable "x264_mb_analyse_inter_b16x16" as cold function
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Disable "x264_mb_analyse_b_rd" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:  Disable "x264_mb_analyse_inter_b16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x4_mmxext" as cold function
Noelle:  Function "mc_copy_w4"
Noelle:  Disable "mc_copy_w4" as cold function
Noelle:  Function "plane_copy"
Noelle:  Disable "plane_copy" as cold function
Noelle:  Function "hpel_filter"
Noelle:  Disable "hpel_filter" as cold function
Noelle:  Function "prefetch_fenc_null"
Noelle:  Disable "prefetch_fenc_null" as cold function
Noelle:  Function "prefetch_ref_null"
Noelle:  Disable "prefetch_ref_null" as cold function
Noelle:  Function "memzero_aligned"
Noelle:  Disable "memzero_aligned" as cold function
Noelle:  Function "frame_init_lowres_core"
Noelle:  Disable "frame_init_lowres_core" as cold function
Noelle:  Function "x264_clip_uint8"
Noelle:  Disable "x264_clip_uint8" as cold function
Noelle:  Function "mc_copy"
Noelle:  Disable "mc_copy" as cold function
Noelle:  Function "pixel_avg_wxh"
Noelle:  Disable "pixel_avg_wxh" as cold function
Noelle:  Function "mc_copy_w8"
Noelle:  Disable "mc_copy_w8" as cold function
Noelle:  Function "pixel_avg_4x8"
Noelle:  Disable "pixel_avg_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Disable "x264_pixel_sad_x4_8x16" as cold function
Noelle:  Function "x264_psnr"
Noelle:  Disable "x264_psnr" as cold function
Noelle:  Function "x264_frame_dump"
Noelle:  Disable "x264_frame_dump" as cold function
Noelle:  Function "x264_frame_init_lowres"
Noelle:  Disable "x264_frame_init_lowres" as cold function
Noelle:  Function "mc_luma"
Noelle:  Disable "mc_luma" as cold function
Noelle:  Function "get_ref"
Noelle:  Disable "get_ref" as cold function
Noelle:  Function "mc_chroma"
Noelle:  Disable "mc_chroma" as cold function
Noelle:  Function "pixel_avg_16x16"
Noelle:  Disable "pixel_avg_16x16" as cold function
Noelle:  Function "pixel_avg_16x8"
Noelle:  Disable "pixel_avg_16x8" as cold function
Noelle:  Function "pixel_avg_8x16"
Noelle:  Disable "pixel_avg_8x16" as cold function
Noelle:  Function "pixel_avg_8x8"
Noelle:  Disable "pixel_avg_8x8" as cold function
Noelle:  Function "pixel_avg_8x4"
Noelle:  Disable "pixel_avg_8x4" as cold function
Noelle:  Function "pixel_avg_4x4"
Noelle:  Disable "pixel_avg_4x4" as cold function
Noelle:  Function "pixel_avg_4x2"
Noelle:  Disable "pixel_avg_4x2" as cold function
Noelle:  Function "pixel_avg_2x4"
Noelle:  Disable "pixel_avg_2x4" as cold function
Noelle:  Function "pixel_avg_2x2"
Noelle:  Disable "pixel_avg_2x2" as cold function
Noelle:  Function "mc_copy_w16"
Noelle:  Disable "mc_copy_w16" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x8_mmxext" as cold function
Noelle:  Function "sub16x16_dct"
Noelle:  Disable "sub16x16_dct" as cold function
Noelle:  Function "pack16to32"
Noelle:  Disable "pack16to32" as cold function
Noelle:  Function "predict_4x4_dc"
Noelle:  Disable "predict_4x4_dc" as cold function
Noelle:  Function "predict_4x4_ddl"
Noelle:  Disable "predict_4x4_ddl" as cold function
Noelle:  Function "predict_4x4_ddr"
Noelle:  Disable "predict_4x4_ddr" as cold function
Noelle:  Function "predict_4x4_vr"
Noelle:  Disable "predict_4x4_vr" as cold function
Noelle:  Function "predict_4x4_hd"
Noelle:  Disable "predict_4x4_hd" as cold function
Noelle:  Function "predict_4x4_vl"
Noelle:  Disable "predict_4x4_vl" as cold function
Noelle:  Function "predict_4x4_hu"
Noelle:  Disable "predict_4x4_hu" as cold function
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:  Disable "x264_pixel_ssd_wxh" as cold function
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:  Disable "x264_pixel_ssim_wxh" as cold function
Noelle:  Function "sub4x4_dct"
Noelle:  Disable "sub4x4_dct" as cold function
Noelle:  Function "add4x4_idct"
Noelle:  Disable "add4x4_idct" as cold function
Noelle:  Function "sub8x8_dct"
Noelle:  Disable "sub8x8_dct" as cold function
Noelle:  Function "add8x8_idct"
Noelle:  Disable "add8x8_idct" as cold function
Noelle:  Function "pack8to16"
Noelle:  Disable "pack8to16" as cold function
Noelle:  Function "add16x16_idct"
Noelle:  Disable "add16x16_idct" as cold function
Noelle:  Function "sub8x8_dct8"
Noelle:  Disable "sub8x8_dct8" as cold function
Noelle:  Function "add8x8_idct8"
Noelle:  Disable "add8x8_idct8" as cold function
Noelle:  Function "sub16x16_dct8"
Noelle:  Disable "sub16x16_dct8" as cold function
Noelle:  Function "add16x16_idct8"
Noelle:  Disable "add16x16_idct8" as cold function
Noelle:  Function "dct4x4dc"
Noelle:  Disable "dct4x4dc" as cold function
Noelle:  Function "idct4x4dc"
Noelle:  Disable "idct4x4dc" as cold function
Noelle:  Function "predict_8x8c_dc_left"
Noelle:  Disable "predict_8x8c_dc_left" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x16_sse2" as cold function
Noelle:  Function "predict_8x8c_p"
Noelle:  Disable "predict_8x8c_p" as cold function
Noelle:  Function "predict_8x8c_dc_top"
Noelle:  Disable "predict_8x8c_dc_top" as cold function
Noelle:  Function "predict_8x8_v"
Noelle:  Disable "predict_8x8_v" as cold function
Noelle:  Function "predict_8x8_h"
Noelle:  Disable "predict_8x8_h" as cold function
Noelle:  Function "predict_8x8_dc"
Noelle:  Disable "predict_8x8_dc" as cold function
Noelle:  Function "predict_8x8_ddl"
Noelle:  Disable "predict_8x8_ddl" as cold function
Noelle:  Function "predict_8x8_ddr"
Noelle:  Disable "predict_8x8_ddr" as cold function
Noelle:  Function "predict_8x8_vr"
Noelle:  Disable "predict_8x8_vr" as cold function
Noelle:  Function "predict_8x8_hd"
Noelle:  Disable "predict_8x8_hd" as cold function
Noelle:  Function "predict_8x8_vl"
Noelle:  Disable "predict_8x8_vl" as cold function
Noelle:  Function "predict_8x8_hu"
Noelle:  Disable "predict_8x8_hu" as cold function
Noelle:  Function "predict_8x8_dc_left"
Noelle:  Disable "predict_8x8_dc_left" as cold function
Noelle:  Function "predict_8x8_dc_top"
Noelle:  Disable "predict_8x8_dc_top" as cold function
Noelle:  Function "predict_8x8_dc_128"
Noelle:  Disable "predict_8x8_dc_128" as cold function
Planner:    There are 67 loops in the program we are going to consider
Planner:  Filter out loops not worth considering
Planner:    Loop 534 has 1.090000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 495 has 1.060000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 496 has 4.200000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 541 has 2.110000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 246 has 8.300000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 248 has 8.781277e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 521 has 5.574795e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 752 has 2.746896e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 695 has 3.800000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 409 has 4.568415e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 416 has 1.110000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 417 has 1.900000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 5 did not execute
Planner:    Loop 704 has 2.181767e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 705 has 4.300000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 795 has 1.480000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 746 has 8.999918e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 411 has 3.150213e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 796 has 2.530000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 249 has 2.440468e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 250 has 3.300000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 7 has 2.085271e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 613 has 2.252179e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 36 has 1.835938e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 715 has 1.950000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 436 has 8.999962e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 353 has 3.183783e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 432 has 1.563348e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 498 has 9.300001e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 754 has 4.387654e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 755 has 1.918478e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 587 has 2.566568e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 702 has 7.159313e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 703 has 1.641541e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 690 has 5.340311e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 694 has 3.900000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 692 has 9.100000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 693 has 1.080000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 709 has 1.310000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 493 has 3.600000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 494 has 8.000000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 710 has 6.582295e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 711 has 1.840000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 533 has 9.500001e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 712 has 7.560000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 802 has 1.251250e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 604 has 3.381622e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 606 has 1.657190e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 299 has 3.847571e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 304 has 3.920010e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 608 has 1.480632e+03 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 609 has 7.227598e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 714 has 6.270000e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 503 has 4.700000e+01 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 504 has 1.952552e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 243 has 1.663630e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:    Loop 65 has 1.999815e+00 number of iterations on average per loop invocation
Planner:      It is too low. The threshold is 12
Planner:    Loop 612 has 1.050542e+02 number of instructions per loop invocation
Planner:      It is too low. The threshold is 2000
Planner:  There are 9 loop nesting trees in the program
Planner:    ID: 744 (1)
Planner:      Function: "x264_macroblock_write_cabac"
Planner:      Loop: "  %exitcond24 = icmp eq i64 %indvars.iv22, 16, !noelle.pdg.inst.id !4570"
Planner:      Loop nesting level: 1
Planner:      Hotness = 4.895312e+00 %
Planner:      Average instructions per invocation = 9.679391e+03 %
Planner:      Average iterations per invocation = 1.699999e+01 %
Planner:    
Planner:    ID: 434 (1)
Planner:      Function: "x264_macroblock_size_cabac"
Planner:      Loop: "  %exitcond20 = icmp eq i64 %indvars.iv18, 16, !noelle.pdg.inst.id !2691"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.802819e+01 %
Planner:      Average instructions per invocation = 1.214496e+04 %
Planner:      Average iterations per invocation = 1.700000e+01 %
Planner:    
Planner:    ID: 745 (1)
Planner:      Function: "x264_macroblock_write_cabac"
Planner:      Loop: "  %exitcond21 = icmp eq i64 %indvars.iv19, 16, !noelle.pdg.inst.id !4540"
Planner:      Loop nesting level: 1
Planner:      Hotness = 8.960800e+00 %
Planner:      Average instructions per invocation = 1.190700e+04 %
Planner:      Average iterations per invocation = 1.699999e+01 %
Planner:    
Planner:    ID: 26 (1)
Planner:      Function: "x264_nal_encode"
Planner:      Loop: "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1, !noelle.pdg.inst.id !128"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.038813e+00 %
Planner:      Average instructions per invocation = 1.025452e+06 %
Planner:      Average iterations per invocation = 5.696998e+04 %
Planner:    
Planner:    ID: 4 (1)
Planner:      Function: "Encode"
Planner:      Loop: "  %.b9 = load i1, i1* @b_ctrl_c, align 4, !noelle.pdg.inst.id !44"
Planner:      Loop nesting level: 1
Planner:      Hotness = 8.943908e+01 %
Planner:      Average instructions per invocation = 1.244871e+10 %
Planner:      Average iterations per invocation = 1.280000e+02 %
Planner:    
Planner:    ID: 57 (1)
Planner:      Function: "x264_slice_write"
Planner:      Loop: "  %51 = mul nsw i32 %.07, %50, !noelle.pdg.inst.id !4215"
Planner:      Loop nesting level: 1
Planner:      Hotness = 8.897036e+01 %
Planner:      Average instructions per invocation = 5.269564e+07 %
Planner:      Average iterations per invocation = 9.209957e+02 %
Planner:    
Planner:    ID: 435 (1)
Planner:      Function: "x264_macroblock_size_cabac"
Planner:      Loop: "  %exitcond17 = icmp eq i64 %indvars.iv15, 16, !noelle.pdg.inst.id !2661"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.071903e+01 %
Planner:      Average instructions per invocation = 1.317100e+04 %
Planner:      Average iterations per invocation = 1.699999e+01 %
Planner:    
Planner:    ID: 296 (1)
Planner:      Function: "x264_frame_deblock_row"
Planner:      Loop: "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !7390, !noelle.pdg.inst.id !260"
Planner:      Loop nesting level: 1
Planner:      Hotness = 1.911984e+00 %
Planner:      Average instructions per invocation = 4.923634e+04 %
Planner:      Average iterations per invocation = 4.099981e+01 %
Planner:    
Planner:    ID: 502 (1)
Planner:      Function: "x264_mb_analyse_intra"
Planner:      Loop: "  %296 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57, !noelle.pdg.inst.id !5872"
Planner:      Loop nesting level: 1
Planner:      Hotness = 8.544239e+00 %
Planner:      Average instructions per invocation = 6.495295e+03 %
Planner:      Average iterations per invocation = 1.445189e+01 %
Planner:    
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16, !noelle.pdg.inst.id !4105
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16, !noelle.pdg.inst.id !4105
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 744 saves only 7.434463e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16, !noelle.pdg.inst.id !2289
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16, !noelle.pdg.inst.id !2289
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 434 saves only 2.182095e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16, !noelle.pdg.inst.id !4105
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16, !noelle.pdg.inst.id !4105
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 745 saves only 8.654505e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 26 saves only 3.462705e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [200 x i8], align 16, !noelle.pdg.inst.id !1939
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_picture_t, align 8, !noelle.pdg.inst.id !1938
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [200 x i8], align 16, !noelle.pdg.inst.id !1939
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.x264_picture_t, align 8, !noelle.pdg.inst.id !1938
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 4 saves only 2.758888e-06 when parallelized. Skip it
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 57 saves only 2.091202e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16, !noelle.pdg.inst.id !2289
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca [2 x [2 x i32]], align 16, !noelle.pdg.inst.id !2289
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 435 saves only 9.359114e-02 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4, !noelle.pdg.inst.id !7277
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca i32, align 4, !noelle.pdg.inst.id !7277 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !7275
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !7275 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4, !noelle.pdg.inst.id !7277
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca i32, align 4, !noelle.pdg.inst.id !7277 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca i32, align 4, !noelle.pdg.inst.id !7275
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca i32, align 4, !noelle.pdg.inst.id !7275 can be cloned
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 296 saves only 1.052530e-01 when parallelized. Skip it
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16, !noelle.pdg.inst.id !5496
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca [9 x i32], align 16, !noelle.pdg.inst.id !5496 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16, !noelle.pdg.inst.id !5495
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16, !noelle.pdg.inst.id !5494
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4, !noelle.pdg.inst.id !5492
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16, !noelle.pdg.inst.id !5493
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca [9 x i32], align 16, !noelle.pdg.inst.id !5496
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca [9 x i32], align 16, !noelle.pdg.inst.id !5496 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca [9 x i32], align 16, !noelle.pdg.inst.id !5495
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca [33 x i8], align 16, !noelle.pdg.inst.id !5494
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca i32, align 4, !noelle.pdg.inst.id !5492
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca [9 x i32], align 16, !noelle.pdg.inst.id !5493
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
Planner: LoopSelector:  Loop 502 saves only 5.263086e-01 when parallelized. Skip it
Planner:   Maximum time saved = 0.000000e+00% (0)
Planner:   Maximum time saved with DOALL only = 0.000000e+00% (0)
Planner: Exit
noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
NOELLE: DeadFunctions: Start
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/RemoveFunction.so -noelle-rm-function -function-name=SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION code_with_prototypes.bc -o code_to_parallelize.bc
RemoveFunction: Start
RemoveFunction:   Check if function "SIMONE_CAMPANONI_IS_GOING_TO_REMOVE_THIS_FUNCTION" exists
RemoveFunction:     The function exists
RemoveFunction:   Remove the function
RemoveFunction: Exit
NOELLE: DeadFunctions: Exit
noelle-parallelizer-loop code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-parallel-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Heuristics.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ParallelizationTechnique.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DSWP.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DOALL.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HELIX.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Parallelizer.so -parallelizer code_to_parallelize.bc -o parallelized_unoptimized.bc -noelle-verbose=3 -noelle-pdg-verbose=1 -noelle-min-hot=1 -noelle-max-cores=8 -noelle-inliner-avoid-hoist-to-main -noelle-disable-whilifier -noelle-disable-helix -noelle-disable-dswp -noelle-disable-doall
Parallelizer: Start
Parallelizer:  Analyzing the module code_to_parallelize.bc
Parallelizer:  Fetching the program loops
Noelle: Filter out cold code
Noelle:  Function "main"
Noelle:  Function "Encode"
Noelle:     Loop "  %.b9 = load i1, i1* @b_ctrl_c, align 4, !noelle.pdg.inst.id !46" (8.943908e+01%)
Noelle:     Loop "  %147 = load i8*, i8** %40, align 8, !tbaa !1992, !noelle.pdg.inst.id !98" (6.987426e-01%)
Noelle:  Function "Encode_frame"
Noelle:     Loop "  %22 = icmp slt i64 %indvars.iv, %19, !noelle.pdg.inst.id !292" (1.038878e+00%)
Noelle:  Function "x264_encoder_encode"
Noelle:     Loop "  %83 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 1, i64 %indvars.iv44, !noelle.pdg.inst.id !18745" (7.357034e-06%)
Noelle:  Disable loop "3" as cold code
Noelle:     Loop "  %105 = icmp eq i32 %.222, 0, !noelle.pdg.inst.id !18773" (2.758888e-06%)
Noelle:  Disable loop "4" as cold code
Noelle:     Loop "  %149 = getelementptr inbounds %struct.x264_frame_t, %struct.x264_frame_t* %148, i64 0, i32 1, !noelle.pdg.inst.id !18826" (8.909529e+01%)
Noelle:     Loop "  %304 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %.07, i64 0, i32 36, i32 0, i64 %indvars.iv, !noelle.pdg.inst.id !19037" (3.843763e-06%)
Noelle:  Disable loop "6" as cold code
Noelle:     Loop "  %337 = load %struct.x264_frame_t*, %struct.x264_frame_t** %73, align 16, !tbaa !18648, !noelle.pdg.inst.id !312" (1.077691e-07%)
Noelle:  Disable loop "7" as cold code
Noelle:  Function "x264_slices_write"
Noelle:  Function "x264_slice_write"
Noelle:     Loop "  %51 = mul nsw i32 %.07, %50, !noelle.pdg.inst.id !4217" (8.897341e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !4318" (0.000000e+00%)
Noelle:  Disable loop "9" as cold code
Noelle:     Loop "  %103 = load i32, i32* %41, align 8, !tbaa !4175, !noelle.pdg.inst.id !172" (5.168340e-02%)
Noelle:  Disable loop "10" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 4, !noelle.pdg.inst.id !4343" (4.343605e-02%)
Noelle:  Disable loop "11" as cold code
Noelle:  Function "x264_macroblock_analyse"
Noelle:     Loop "  %exitcond165 = icmp eq i32 %.1, 2, !noelle.pdg.inst.id !30932" (0.000000e+00%)
Noelle:  Disable loop "12" as cold code
Noelle:     Loop "  %exitcond161 = icmp eq i64 %indvars.iv159, 2, !noelle.pdg.inst.id !31157" (0.000000e+00%)
Noelle:  Disable loop "13" as cold code
Noelle:     Loop "  %exitcond164 = icmp eq i64 %indvars.iv162, 4, !noelle.pdg.inst.id !31178" (0.000000e+00%)
Noelle:  Disable loop "14" as cold code
Noelle:     Loop "  %exitcond158 = icmp eq i64 %indvars.iv156, 2, !noelle.pdg.inst.id !31139" (0.000000e+00%)
Noelle:  Disable loop "15" as cold code
Noelle:     Loop "  %exitcond152 = icmp eq i64 %indvars.iv150, 2, !noelle.pdg.inst.id !31405" (0.000000e+00%)
Noelle:  Disable loop "16" as cold code
Noelle:     Loop "  %exitcond149 = icmp eq i64 %indvars.iv147, 2, !noelle.pdg.inst.id !31367" (0.000000e+00%)
Noelle:  Disable loop "17" as cold code
Noelle:     Loop "  %exitcond155 = icmp eq i64 %indvars.iv153, 4, !noelle.pdg.inst.id !31442" (0.000000e+00%)
Noelle:  Disable loop "18" as cold code
Noelle:     Loop "  %exitcond146 = icmp eq i64 %indvars.iv144, 4, !noelle.pdg.inst.id !30560" (0.000000e+00%)
Noelle:  Disable loop "19" as cold code
Noelle:     Loop "  %exitcond143 = icmp eq i64 %indvars.iv141, 4, !noelle.pdg.inst.id !30644" (0.000000e+00%)
Noelle:  Disable loop "20" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !30854" (0.000000e+00%)
Noelle:  Disable loop "21" as cold code
Noelle:  Function "x264_rd_cost_mb"
Noelle:  Function "x264_macroblock_size_cabac"
Noelle:     Loop "  %Pivot22 = icmp ult i64 %indvars.iv41, 2, !noelle.pdg.inst.id !2443" (0.000000e+00%)
Noelle:  Disable loop "22" as cold code
Noelle:     Loop "  %exitcond40 = icmp eq i64 %indvars.iv38, 4, !noelle.pdg.inst.id !2462" (0.000000e+00%)
Noelle:  Disable loop "23" as cold code
Noelle:     Loop "  %exitcond37 = icmp eq i32 %.3, 4, !noelle.pdg.inst.id !2480" (0.000000e+00%)
Noelle:  Disable loop "24" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i32 %.4, 4, !noelle.pdg.inst.id !2487" (0.000000e+00%)
Noelle:  Disable loop "25" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i32 %.1, 4, !noelle.pdg.inst.id !2430" (0.000000e+00%)
Noelle:  Disable loop "26" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 2, !noelle.pdg.inst.id !2497" (0.000000e+00%)
Noelle:  Disable loop "27" as cold code
Noelle:     Loop "  %Pivot29 = icmp ult i64 %indvars.iv27, 2, !noelle.pdg.inst.id !2513" (0.000000e+00%)
Noelle:  Disable loop "28" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 2, !noelle.pdg.inst.id !2573" (0.000000e+00%)
Noelle:  Disable loop "29" as cold code
Noelle:     Loop "  %18 = icmp ult i64 %indvars.iv33, 16, !noelle.pdg.inst.id !2368" (1.511001e+00%)
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4, !noelle.pdg.inst.id !2679" (0.000000e+00%)
Noelle:  Disable loop "31" as cold code
Noelle:     Loop "  %exitcond20 = icmp eq i64 %indvars.iv18, 16, !noelle.pdg.inst.id !2693" (1.802819e+01%)
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 16, !noelle.pdg.inst.id !2663" (1.071903e+01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24, !noelle.pdg.inst.id !2729" (1.257046e+00%)
Noelle:  Function "block_residual_write_cabac"
Noelle:     Loop "  %76 = icmp slt i64 %indvars.iv19, %41, !noelle.pdg.inst.id !562" (1.469622e+01%)
Noelle:     Loop "  %44 = icmp slt i64 %indvars.iv17, %41, !noelle.pdg.inst.id !528" (0.000000e+00%)
Noelle:  Disable loop "36" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1, !noelle.pdg.inst.id !619" (1.013398e+01%)
Noelle:  Function "x264_intra_rd"
Noelle:  Function "x264_mb_analyse_inter_p16x16"
Noelle:     Loop "  %78 = load i32, i32* %11, align 16, !tbaa !1885, !noelle.pdg.inst.id !508" (1.127631e+01%)
Noelle:  Function "x264_macroblock_write_cabac"
Noelle:     Loop "  %Pivot25 = icmp ult i64 %indvars.iv51, 2, !noelle.pdg.inst.id !4322" (0.000000e+00%)
Noelle:  Disable loop "39" as cold code
Noelle:     Loop "  %exitcond50 = icmp eq i64 %indvars.iv48, 4, !noelle.pdg.inst.id !4341" (0.000000e+00%)
Noelle:  Disable loop "40" as cold code
Noelle:     Loop "  %exitcond47 = icmp eq i32 %.5, 4, !noelle.pdg.inst.id !4359" (0.000000e+00%)
Noelle:  Disable loop "41" as cold code
Noelle:     Loop "  %exitcond46 = icmp eq i32 %.6, 4, !noelle.pdg.inst.id !4366" (0.000000e+00%)
Noelle:  Disable loop "42" as cold code
Noelle:     Loop "  %exitcond45 = icmp eq i32 %.3, 4, !noelle.pdg.inst.id !4309" (0.000000e+00%)
Noelle:  Disable loop "43" as cold code
Noelle:     Loop "  %exitcond42 = icmp eq i64 %indvars.iv40, 8, !noelle.pdg.inst.id !4179" (0.000000e+00%)
Noelle:  Disable loop "44" as cold code
Noelle:     Loop "  %exitcond39 = icmp eq i64 %indvars.iv37, 8, !noelle.pdg.inst.id !4196" (0.000000e+00%)
Noelle:  Disable loop "45" as cold code
Noelle:     Loop "  %exitcond36 = icmp eq i64 %indvars.iv34, 2, !noelle.pdg.inst.id !4376" (0.000000e+00%)
Noelle:  Disable loop "46" as cold code
Noelle:     Loop "  %Pivot32 = icmp ult i64 %indvars.iv31, 2, !noelle.pdg.inst.id !4392" (0.000000e+00%)
Noelle:  Disable loop "47" as cold code
Noelle:     Loop "  %exitcond30 = icmp eq i64 %indvars.iv28, 2, !noelle.pdg.inst.id !4452" (0.000000e+00%)
Noelle:  Disable loop "48" as cold code
Noelle:     Loop "  %82 = icmp ult i64 %indvars.iv43, 16, !noelle.pdg.inst.id !4248" (2.610856e-02%)
Noelle:  Disable loop "49" as cold code
Noelle:     Loop "  %exitcond27 = icmp eq i64 %indvars.iv25, 4, !noelle.pdg.inst.id !4558" (0.000000e+00%)
Noelle:  Disable loop "50" as cold code
Noelle:     Loop "  %exitcond24 = icmp eq i64 %indvars.iv22, 16, !noelle.pdg.inst.id !4572" (4.895312e+00%)
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 16, !noelle.pdg.inst.id !4542" (8.960800e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 24, !noelle.pdg.inst.id !4608" (5.187598e-01%)
Noelle:  Function "block_residual_write_cabac.1036"
Noelle:     Loop "  %78 = icmp slt i64 %indvars.iv22, %42, !noelle.pdg.inst.id !884" (4.727703e+00%)
Noelle:     Loop "  %46 = icmp slt i64 %indvars.iv20, %42, !noelle.pdg.inst.id !849" (0.000000e+00%)
Noelle:  Disable loop "55" as cold code
Noelle:     Loop "  %indvars.iv.next = add nsw i64 %indvars.iv, -1, !noelle.pdg.inst.id !949" (7.551625e+00%)
Noelle:     Loop "  %130 = icmp slt i32 %.3, %128, !noelle.pdg.inst.id !965" (1.125528e+00%)
Noelle:  Function "x264_cabac_size_decision"
Noelle:  Function "x264_macroblock_encode"
Noelle:     Loop "  %exitcond102 = icmp eq i64 %indvars.iv100, 4, !noelle.pdg.inst.id !8805" (0.000000e+00%)
Noelle:  Disable loop "58" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4, !noelle.pdg.inst.id !8834" (8.427504e-02%)
Noelle:  Disable loop "59" as cold code
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 16, !noelle.pdg.inst.id !8952" (0.000000e+00%)
Noelle:  Disable loop "60" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4, !noelle.pdg.inst.id !8925" (0.000000e+00%)
Noelle:  Disable loop "61" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4, !noelle.pdg.inst.id !9136" (0.000000e+00%)
Noelle:  Disable loop "62" as cold code
Noelle:     Loop "  %exitcond87 = icmp eq i64 %indvars.iv85, 4, !noelle.pdg.inst.id !9142" (0.000000e+00%)
Noelle:  Disable loop "63" as cold code
Noelle:     Loop "  %exitcond84 = icmp eq i64 %indvars.iv82, 4, !noelle.pdg.inst.id !9090" (9.723978e-01%)
Noelle:     Loop "  %exitcond81 = icmp eq i64 %indvars.iv79, 4, !noelle.pdg.inst.id !9102" (8.918346e-01%)
Noelle:     Loop "  %exitcond78 = icmp eq i64 %indvars.iv76, 4, !noelle.pdg.inst.id !9172" (2.172980e-01%)
Noelle:     Loop "  %exitcond75 = icmp eq i64 %indvars.iv73, 4, !noelle.pdg.inst.id !9184" (1.364048e-01%)
Noelle:     Loop "  %exitcond72 = icmp eq i64 %indvars.iv70, 4, !noelle.pdg.inst.id !9016" (0.000000e+00%)
Noelle:  Disable loop "68" as cold code
Noelle:     Loop "  %exitcond69 = icmp eq i64 %indvars.iv67, 4, !noelle.pdg.inst.id !8993" (0.000000e+00%)
Noelle:  Disable loop "69" as cold code
Noelle:     Loop "  %exitcond66 = icmp eq i64 %indvars.iv64, 4, !noelle.pdg.inst.id !9045" (0.000000e+00%)
Noelle:  Disable loop "70" as cold code
Noelle:     Loop "  %exitcond105 = icmp eq i64 %indvars.iv103, 16, !noelle.pdg.inst.id !8871" (1.386466e-01%)
Noelle:     Loop "  %exitcond63 = icmp eq i64 %indvars.iv61, 4, !noelle.pdg.inst.id !9266" (1.549973e+00%)
Noelle:     Loop "  %exitcond60 = icmp eq i64 %indvars.iv58, 4, !noelle.pdg.inst.id !9309" (1.317134e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16, !noelle.pdg.inst.id !9241" (1.193086e+00%)
Noelle:  Function "x264_me_search_ref"
Noelle:     Loop "  %175 = icmp slt i64 %indvars.iv709, %173, !noelle.pdg.inst.id !41277" (0.000000e+00%)
Noelle:  Disable loop "75" as cold code
Noelle:     Loop "  %89 = icmp slt i64 %indvars.iv707, %87, !noelle.pdg.inst.id !41184" (9.856427e-01%)
Noelle:     Loop "  %2367 = icmp sgt i64 %indvars.iv705, %2364, !noelle.pdg.inst.id !43980" (0.000000e+00%)
Noelle:  Disable loop "77" as cold code
Noelle:     Loop "  %2385 = icmp slt i64 %indvars.iv701, %2383, !noelle.pdg.inst.id !44001" (0.000000e+00%)
Noelle:  Disable loop "78" as cold code
Noelle:     Loop "  %2453 = trunc i64 %indvars.iv703 to i32, !noelle.pdg.inst.id !44071" (0.000000e+00%)
Noelle:  Disable loop "79" as cold code
Noelle:     Loop "  %2162 = icmp sgt i64 %indvars.iv699, %2159, !noelle.pdg.inst.id !43703" (0.000000e+00%)
Noelle:  Disable loop "80" as cold code
Noelle:     Loop "  %2184 = icmp slt i64 %indvars.iv695, %2182, !noelle.pdg.inst.id !43727" (0.000000e+00%)
Noelle:  Disable loop "81" as cold code
Noelle:     Loop "  %exitcond694 = icmp eq i64 %indvars.iv692, 3, !noelle.pdg.inst.id !43746" (0.000000e+00%)
Noelle:  Disable loop "82" as cold code
Noelle:     Loop "  %2230 = trunc i64 %indvars.iv697 to i32, !noelle.pdg.inst.id !43792" (0.000000e+00%)
Noelle:  Disable loop "83" as cold code
Noelle:     Loop "  %2272 = icmp slt i64 %indvars.iv690, %2270, !noelle.pdg.inst.id !43845" (0.000000e+00%)
Noelle:  Disable loop "84" as cold code
Noelle:     Loop "  %2280 = icmp slt i64 %indvars.iv688, %2270, !noelle.pdg.inst.id !43863" (0.000000e+00%)
Noelle:  Disable loop "85" as cold code
Noelle:     Loop "  %2297 = icmp slt i64 %indvars.iv686, %2295, !noelle.pdg.inst.id !43892" (0.000000e+00%)
Noelle:  Disable loop "86" as cold code
Noelle:     Loop "  %2304 = icmp slt i64 %indvars.iv684, %2294, !noelle.pdg.inst.id !43902" (0.000000e+00%)
Noelle:  Disable loop "87" as cold code
Noelle:     Loop "  %2320 = icmp slt i64 %indvars.iv680, %.pre-phi62, !noelle.pdg.inst.id !43931" (0.000000e+00%)
Noelle:  Disable loop "88" as cold code
Noelle:     Loop "  %1002 = icmp slt i64 %indvars.iv678, %1000, !noelle.pdg.inst.id !42231" (7.173762e-02%)
Noelle:  Disable loop "89" as cold code
Noelle:     Loop "  %1070 = icmp slt i64 %indvars.iv676, %1066, !noelle.pdg.inst.id !42319" (5.851493e-02%)
Noelle:  Disable loop "90" as cold code
Noelle:     Loop "  %1125 = icmp slt i64 %indvars.iv674, %1123, !noelle.pdg.inst.id !42398" (7.635272e-02%)
Noelle:  Disable loop "91" as cold code
Noelle:     Loop "  %1199 = icmp slt i64 %indvars.iv672, %1066, !noelle.pdg.inst.id !42492" (5.873480e-02%)
Noelle:  Disable loop "92" as cold code
Noelle:     Loop "  %1426 = icmp slt i64 %indvars.iv670, %1424, !noelle.pdg.inst.id !42792" (6.028811e-01%)
Noelle:     Loop "  %1497 = icmp slt i64 %indvars.iv668, %1493, !noelle.pdg.inst.id !42884" (8.500369e-02%)
Noelle:  Disable loop "94" as cold code
Noelle:     Loop "  %1558 = icmp slt i64 %indvars.iv666, %1556, !noelle.pdg.inst.id !42971" (3.016258e-01%)
Noelle:     Loop "  %1636 = icmp slt i64 %indvars.iv664, %1631, !noelle.pdg.inst.id !43069" (6.945093e-02%)
Noelle:  Disable loop "96" as cold code
Noelle:     Loop "  %1761 = shl nsw i64 %indvars.iv662, 2, !noelle.pdg.inst.id !43226" (2.759902e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16, !noelle.pdg.inst.id !43237" (3.505932e-01%)
Noelle:     Loop "  %433 = icmp slt i32 %.3345, %431, !noelle.pdg.inst.id !41582" (5.837094e-02%)
Noelle:  Disable loop "99" as cold code
Noelle:     Loop "  %240 = sext i32 %.728 to i64, !noelle.pdg.inst.id !41372" (0.000000e+00%)
Noelle:  Disable loop "100" as cold code
Noelle:  Function "x264_mb_analyse_intra"
Noelle:     Loop "  %67 = icmp slt i64 %indvars.iv67, %65, !noelle.pdg.inst.id !5600" (6.546065e-03%)
Noelle:  Disable loop "101" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv65, 4, !noelle.pdg.inst.id !5578" (1.164764e-01%)
Noelle:     Loop "  %142 = trunc i64 %indvars.iv63 to i32, !noelle.pdg.inst.id !5697" (0.000000e+00%)
Noelle:  Disable loop "103" as cold code
Noelle:     Loop "  %172 = icmp sgt i64 %indvars.iv59, -1, !noelle.pdg.inst.id !5726" (0.000000e+00%)
Noelle:  Disable loop "104" as cold code
Noelle:     Loop "  %187 = icmp slt i64 %indvars.iv61, %185, !noelle.pdg.inst.id !5751" (0.000000e+00%)
Noelle:  Disable loop "105" as cold code
Noelle:     Loop "  %296 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_xy_fenc, i64 0, i64 %indvars.iv57, !noelle.pdg.inst.id !5874" (8.536139e+00%)
Noelle:     Loop "  %333 = icmp sgt i64 %indvars.iv, -1, !noelle.pdg.inst.id !5913" (8.777786e-01%)
Noelle:     Loop "  %344 = icmp slt i64 %indvars.iv55, %342, !noelle.pdg.inst.id !5937" (3.711947e+00%)
Noelle:  Function "x264_mb_analyse_p_rd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4, !noelle.pdg.inst.id !1229" (0.000000e+00%)
Noelle:  Disable loop "109" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !1254" (0.000000e+00%)
Noelle:  Disable loop "110" as cold code
Noelle:  Function "x264_mb_encode_8x8_chroma"
Noelle:     Loop "  %exitcond21 = icmp eq i64 %indvars.iv19, 2, !noelle.pdg.inst.id !2914" (2.100300e+00%)
Noelle:     Loop "  %exitcond9 = icmp eq i64 %indvars.iv7, 4, !noelle.pdg.inst.id !2931" (0.000000e+00%)
Noelle:  Disable loop "112" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 4, !noelle.pdg.inst.id !2992" (4.685934e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4, !noelle.pdg.inst.id !2966" (2.933772e-01%)
Noelle:     Loop "  %exitcond18 = icmp eq i64 %indvars.iv16, 4, !noelle.pdg.inst.id !3043" (2.009174e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8, !noelle.pdg.inst.id !3066" (1.494508e+00%)
Noelle:  Function "array_non_zero_int_mmx.982"
Noelle:  Function "x264_cabac_encode_bypass"
Noelle:  Function "array_non_zero_int_c.983"
Noelle:     Loop "  %31 = icmp slt i64 %indvars.iv, %29, !noelle.pdg.inst.id !86" (0.000000e+00%)
Noelle:  Disable loop "117" as cold code
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc"
Noelle:  Function "x264_macroblock_cache_load"
Noelle:     Loop "  %288 = icmp slt i64 %indvars.iv22, %286, !noelle.pdg.inst.id !23617" (0.000000e+00%)
Noelle:  Disable loop "118" as cold code
Noelle:     Loop "  %306 = icmp slt i64 %indvars.iv20, %304, !noelle.pdg.inst.id !23634" (0.000000e+00%)
Noelle:  Disable loop "119" as cold code
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv18, %359, !noelle.pdg.inst.id !23692" (1.396533e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !23789" (1.070298e-03%)
Noelle:  Disable loop "121" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4, !noelle.pdg.inst.id !23844" (9.024078e-04%)
Noelle:  Disable loop "122" as cold code
Noelle:  Function "x264_fdec_filter_row"
Noelle:     Loop "  %36 = sext i32 %35 to i64, !noelle.pdg.inst.id !788" (3.900162e-03%)
Noelle:  Disable loop "123" as cold code
Noelle:     Loop "  %exitcond12 = icmp eq i64 %indvars.iv10, 3, !noelle.pdg.inst.id !796" (3.342996e-03%)
Noelle:  Disable loop "124" as cold code
Noelle:     Loop "  %67 = icmp slt i32 %.01, %1, !noelle.pdg.inst.id !831" (1.932129e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 3, !noelle.pdg.inst.id !889" (0.000000e+00%)
Noelle:  Disable loop "126" as cold code
Noelle:  Function "predict_4x4_hd.1119"
Noelle:  Function "predict_4x4_vr.1118"
Noelle:  Function "x264_frame_deblock_row"
Noelle:     Loop "  %79 = load %struct.x264_sps_t*, %struct.x264_sps_t** %47, align 16, !tbaa !7392, !noelle.pdg.inst.id !262" (1.911984e+00%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !7632" (0.000000e+00%)
Noelle:  Disable loop "128" as cold code
Noelle:     Loop "  %exitcond79 = icmp eq i64 %indvars.iv77, 4, !noelle.pdg.inst.id !7514" (9.604694e-02%)
Noelle:  Disable loop "129" as cold code
Noelle:     Loop "  %335 = icmp slt i64 %indvars.iv86, %spec.select, !noelle.pdg.inst.id !7693" (5.976475e-01%)
Noelle:     Loop "  %exitcond82 = icmp eq i64 %indvars.iv80, 4, !noelle.pdg.inst.id !7829" (7.817345e-02%)
Noelle:  Disable loop "131" as cold code
Noelle:     Loop "  %exitcond85 = icmp eq i64 %indvars.iv83, 4, !noelle.pdg.inst.id !7718" (6.617709e-02%)
Noelle:  Disable loop "132" as cold code
Noelle:     Loop "  %exitcond90 = icmp eq i64 %indvars.iv88, 4, !noelle.pdg.inst.id !8081" (0.000000e+00%)
Noelle:  Disable loop "133" as cold code
Noelle:     Loop "  %exitcond93 = icmp eq i64 %indvars.iv91, 4, !noelle.pdg.inst.id !7969" (8.685249e-02%)
Noelle:  Disable loop "134" as cold code
Noelle:     Loop "  %710 = icmp slt i64 %indvars.iv100, %spec.select, !noelle.pdg.inst.id !8139" (6.088996e-01%)
Noelle:     Loop "  %exitcond96 = icmp eq i64 %indvars.iv94, 4, !noelle.pdg.inst.id !8272" (7.861169e-02%)
Noelle:  Disable loop "136" as cold code
Noelle:     Loop "  %exitcond99 = icmp eq i64 %indvars.iv97, 4, !noelle.pdg.inst.id !8164" (6.623952e-02%)
Noelle:  Disable loop "137" as cold code
Noelle:  Function "predict_4x4_ddr.1117"
Noelle:  Function "x264_mb_encode_i4x4"
Noelle:  Function "refine_subpel"
Noelle:     Loop "  %111 = icmp sgt i32 %.078, 0, !noelle.pdg.inst.id !11996" (4.034412e-01%)
Noelle:     Loop "  %258 = icmp sgt i32 %.179, 0, !noelle.pdg.inst.id !12165" (4.649938e-01%)
Noelle:  Function "x264_mb_encode_i16x16"
Noelle:     Loop "  %exitcond7 = icmp eq i64 %indvars.iv5, 16, !noelle.pdg.inst.id !662" (0.000000e+00%)
Noelle:  Disable loop "140" as cold code
Noelle:     Loop "  %exitcond4 = icmp eq i64 %indvars.iv2, 16, !noelle.pdg.inst.id !695" (9.895036e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 16, !noelle.pdg.inst.id !738" (3.077404e-01%)
Noelle:  Function "predict_4x4_hu.1120"
Noelle:  Function "get_ref_sse2"
Noelle:  Function "x264_cabac_mb_cbf_ctxidxinc.1041"
Noelle:  Function "x264_cabac_putbyte"
Noelle:     Loop "  %32 = icmp sgt i32 %.0, 0, !noelle.pdg.inst.id !191" (5.088736e-02%)
Noelle:  Disable loop "143" as cold code
Noelle:  Function "x264_quant_4x4"
Noelle:  Function "x264_macroblock_load_pic_pointers"
Noelle:     Loop "  %exitcond22 = icmp eq i64 %indvars.iv20, %wide.trip.count, !noelle.pdg.inst.id !664" (0.000000e+00%)
Noelle:  Disable loop "144" as cold code
Noelle:     Loop "  %118 = icmp slt i64 %indvars.iv18, %96, !noelle.pdg.inst.id !715" (2.728011e-01%)
Noelle:     Loop "  %97 = icmp slt i64 %indvars.iv16, %96, !noelle.pdg.inst.id !687" (3.790807e-01%)
Noelle:     Loop "  %exitcond15 = icmp eq i64 %indvars.iv13, 4, !noelle.pdg.inst.id !703" (2.288127e-01%)
Noelle:     Loop "  %161 = icmp slt i64 %indvars.iv11, %139, !noelle.pdg.inst.id !770" (0.000000e+00%)
Noelle:  Disable loop "148" as cold code
Noelle:     Loop "  %140 = icmp slt i64 %indvars.iv9, %139, !noelle.pdg.inst.id !744" (0.000000e+00%)
Noelle:  Disable loop "149" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !759" (0.000000e+00%)
Noelle:  Disable loop "150" as cold code
Noelle:  Function "x264_nal_encode"
Noelle:     Loop "  %.13 = getelementptr inbounds i8, i8* %.02.pn, i64 1, !noelle.pdg.inst.id !130" (1.038813e+00%)
Noelle:  Function "x264_mb_predict_mv_ref16x16"
Noelle:  Function "x264_mb_predict_intra4x4_mode"
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode"
Noelle:  Function "x264_analyse_update_cache"
Noelle:     Loop "  %exitcond12 = icmp eq i32 %.3, 4, !noelle.pdg.inst.id !3245" (0.000000e+00%)
Noelle:  Disable loop "152" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i32 %.2, 4, !noelle.pdg.inst.id !3234" (0.000000e+00%)
Noelle:  Disable loop "153" as cold code
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4, !noelle.pdg.inst.id !3164" (0.000000e+00%)
Noelle:  Disable loop "154" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 16, !noelle.pdg.inst.id !3149" (2.102685e-01%)
Noelle:     Loop "  %131 = load i32, i32* %121, align 8, !tbaa !3324, !noelle.pdg.inst.id !52" (0.000000e+00%)
Noelle:  Disable loop "156" as cold code
Noelle:  Function "x264_mb_cache_fenc_satd"
Noelle:     Loop "  %exitcond16 = icmp eq i64 %indvars.iv14, 4, !noelle.pdg.inst.id !345" (5.591921e-01%)
Noelle:     Loop "  %exitcond13 = icmp eq i64 %indvars.iv11, 4, !noelle.pdg.inst.id !353" (4.970596e-01%)
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 2, !noelle.pdg.inst.id !378" (1.646510e-01%)
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2, !noelle.pdg.inst.id !386" (1.304782e-01%)
Noelle:  Function "deblock_edge"
Noelle:  Function "x264_macroblock_cache_save"
Noelle:     Loop "  %exitcond47 = icmp eq i64 %indvars.iv45, 24, !noelle.pdg.inst.id !6769" (0.000000e+00%)
Noelle:  Disable loop "161" as cold code
Noelle:     Loop "  %exitcond44 = icmp eq i64 %indvars.iv42, 4, !noelle.pdg.inst.id !6889" (7.270320e-02%)
Noelle:  Disable loop "162" as cold code
Noelle:     Loop "  %exitcond41 = icmp eq i64 %indvars.iv39, 4, !noelle.pdg.inst.id !6925" (0.000000e+00%)
Noelle:  Disable loop "163" as cold code
Noelle:     Loop "  %exitcond38 = icmp eq i64 %indvars.iv36, %251, !noelle.pdg.inst.id !6954" (5.783879e-03%)
Noelle:  Disable loop "164" as cold code
Noelle:     Loop "  %exitcond35 = icmp eq i64 %indvars.iv33, 4, !noelle.pdg.inst.id !6966" (4.374985e-03%)
Noelle:  Disable loop "165" as cold code
Noelle:     Loop "  %exitcond26 = icmp eq i64 %indvars.iv24, 4, !noelle.pdg.inst.id !7026" (5.223322e-02%)
Noelle:  Disable loop "166" as cold code
Noelle:     Loop "  %exitcond23 = icmp eq i64 %indvars.iv21, 4, !noelle.pdg.inst.id !7053" (0.000000e+00%)
Noelle:  Disable loop "167" as cold code
Noelle:     Loop "  %exitcond32 = icmp eq i64 %indvars.iv30, 4, !noelle.pdg.inst.id !7077" (5.920579e-02%)
Noelle:  Disable loop "168" as cold code
Noelle:     Loop "  %exitcond29 = icmp eq i64 %indvars.iv27, 4, !noelle.pdg.inst.id !7097" (0.000000e+00%)
Noelle:  Disable loop "169" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !7131" (0.000000e+00%)
Noelle:  Disable loop "170" as cold code
Noelle:  Function "predict_4x4_mode_available"
Noelle:  Function "copy_column8"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 8, !noelle.pdg.inst.id !43" (5.156994e-01%)
Noelle:  Function "predict_16x16_p_sse2"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 9, !noelle.pdg.inst.id !55" (3.914264e-01%)
Noelle:  Function "x264_mb_analyse_intra_chroma"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv5, 4, !noelle.pdg.inst.id !874" (1.189813e-01%)
Noelle:     Loop "  %110 = icmp eq i64 %107, 4, !noelle.pdg.inst.id !943" (1.365154e-01%)
Noelle:     Loop "  %75 = icmp slt i64 %indvars.iv, %73, !noelle.pdg.inst.id !900" (7.376785e-03%)
Noelle:  Disable loop "175" as cold code
Noelle:  Function "predict_8x8c_p_mmxext"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 5, !noelle.pdg.inst.id !55" (3.218147e-01%)
Noelle:  Function "ssd_mb"
Noelle:  Function "ssd_plane"
Noelle:  Function "dct2x2dc"
Noelle:  Function "idct_dequant_2x2_dc"
Noelle:  Function "x264_cabac_encode_ue_bypass"
Noelle:     Loop "  %5 = shl i32 1, %.01, !noelle.pdg.inst.id !83" (8.395751e-02%)
Noelle:  Disable loop "177" as cold code
Noelle:     Loop "  %25 = sub nsw i32 %.1, %.0, !noelle.pdg.inst.id !111" (1.126446e-01%)
Noelle:  Function "x264_mb_analyse_init"
Noelle:     Loop "  %135 = icmp sgt i32 %.02, -1, !noelle.pdg.inst.id !2178" (0.000000e+00%)
Noelle:  Disable loop "179" as cold code
Noelle:     Loop "  %141 = icmp slt i64 %indvars.iv18, %139, !noelle.pdg.inst.id !2188" (0.000000e+00%)
Noelle:  Disable loop "180" as cold code
Noelle:     Loop "  %exitcond17 = icmp eq i64 %indvars.iv15, 4, !noelle.pdg.inst.id !2247" (3.945411e-02%)
Noelle:  Disable loop "181" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !2272" (0.000000e+00%)
Noelle:  Disable loop "182" as cold code
Noelle:  Function "x264_cabac_mb_mvd"
Noelle:  Function "x264_macroblock_cache_rect4.786"
Noelle:     Loop "  %27 = icmp slt i64 %indvars.iv10, %25, !noelle.pdg.inst.id !80" (2.165786e-01%)
Noelle:     Loop "  %32 = icmp slt i64 %indvars.iv8, %24, !noelle.pdg.inst.id !88" (1.482881e-01%)
Noelle:     Loop "  %10 = icmp slt i64 %indvars.iv6, %8, !noelle.pdg.inst.id !52" (0.000000e+00%)
Noelle:  Disable loop "185" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 1, !noelle.pdg.inst.id !59" (0.000000e+00%)
Noelle:  Disable loop "186" as cold code
Noelle:  Function "x264_cabac_mb_mvd.1025"
Noelle:  Function "x264_cabac_mb_type"
Noelle:     Loop "  %90 = icmp slt i64 %indvars.iv, %88, !noelle.pdg.inst.id !472" (0.000000e+00%)
Noelle:  Disable loop "187" as cold code
Noelle:  Function "x264_cabac_mb_cbp_luma"
Noelle:  Function "x264_mb_predict_mv_16x16"
Noelle:  Function "x264_clip3.828"
Noelle:  Function "x264_macroblock_cache_mv.800"
Noelle:  Function "x264_cabac_size_decision_noup"
Noelle:  Function "x264_mb_mc"
Noelle:     Loop "  %exitcond24 = icmp eq i32 %.01, 4, !noelle.pdg.inst.id !413" (0.000000e+00%)
Noelle:  Disable loop "188" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 2, !noelle.pdg.inst.id !427" (0.000000e+00%)
Noelle:  Disable loop "189" as cold code
Noelle:  Function "x264_macroblock_store_pic"
Noelle:  Function "predict_8x8c_dc_mmxext"
Noelle:  Function "x264_mb_mc_0xywh"
Noelle:  Function "predict_16x16_dc_sse2"
Noelle:     Loop "  %3 = icmp ult i64 %indvars.iv, 16, !noelle.pdg.inst.id !46" (1.201489e-01%)
Noelle:  Function "x264_cabac_mb_mvd_cpn"
Noelle:     Loop "  %exitcond10 = icmp eq i64 %indvars.iv8, 4, !noelle.pdg.inst.id !256" (1.789357e-02%)
Noelle:  Disable loop "191" as cold code
Noelle:     Loop "  %exitcond11 = icmp eq i64 %indvars.iv6, %46, !noelle.pdg.inst.id !236" (9.721789e-03%)
Noelle:  Disable loop "192" as cold code
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv, 4, !noelle.pdg.inst.id !205" (6.762947e-03%)
Noelle:  Disable loop "193" as cold code
Noelle:  Function "x264_prefetch_fenc"
Noelle:  Function "x264_cabac_mb_mvd_cpn.1048"
Noelle:     Loop "  %exitcond = icmp eq i64 %indvars.iv6, 9, !noelle.pdg.inst.id !188" (1.698058e-02%)
Noelle:  Disable loop "194" as cold code
Noelle:     Loop "  %exitcond8 = icmp eq i64 %indvars.iv, %42, !noelle.pdg.inst.id !172" (9.385370e-03%)
Noelle:  Disable loop "195" as cold code
Noelle:  Function "x264_cabac_mb_type_intra"
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode"
Noelle:  Function "x264_macroblock_cache_ref.799"
Noelle:  Disable "x264_macroblock_cache_ref.799" as cold function
Noelle:  Function "x264_cabac_mb_qp_delta"
Noelle:  Disable "x264_cabac_mb_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma"
Noelle:  Disable "x264_cabac_mb_cbp_chroma" as cold function
Noelle:  Function "bs_size_ue"
Noelle:  Disable "bs_size_ue" as cold function
Noelle:  Function "x264_cabac_mb_type.1017"
Noelle:  Disable "x264_cabac_mb_type.1017" as cold function
Noelle:  Function "x264_macroblock_cache_rect1.801"
Noelle:  Disable "x264_macroblock_cache_rect1.801" as cold function
Noelle:  Function "zigzag_scan_2x2_dc"
Noelle:  Disable "zigzag_scan_2x2_dc" as cold function
Noelle:  Function "x264_cabac_encode_terminal"
Noelle:  Disable "x264_cabac_encode_terminal" as cold function
Noelle:  Function "deblock_edge_intra"
Noelle:  Disable "deblock_edge_intra" as cold function
Noelle:  Function "x264_macroblock_cache_mvd"
Noelle:  Disable "x264_macroblock_cache_mvd" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.1052"
Noelle:  Disable "x264_macroblock_cache_mvd.1052" as cold function
Noelle:  Function "x264_mb_predict_mv"
Noelle:  Disable "x264_mb_predict_mv" as cold function
Noelle:  Function "x264_cabac_encode_renorm"
Noelle:  Disable "x264_cabac_encode_renorm" as cold function
Noelle:  Function "predict_4x4_h"
Noelle:  Disable "predict_4x4_h" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.1053"
Noelle:  Disable "x264_macroblock_cache_rect4.1053" as cold function
Noelle:  Function "x264_cabac_pos.1016"
Noelle:  Disable "x264_cabac_pos.1016" as cold function
Noelle:  Function "x264_ratecontrol_mb"
Noelle:  Disable "x264_ratecontrol_mb" as cold function
Noelle:  Function "predict_8x8c_dc_left.1111"
Noelle:  Disable "predict_8x8c_dc_left.1111" as cold function
Noelle:  Function "mc_luma_sse2"
Noelle:  Disable "mc_luma_sse2" as cold function
Noelle:  Function "plane_expand_border"
Noelle:  Disable "plane_expand_border" as cold function
Noelle:  Function "bs_size_ue_big"
Noelle:  Disable "bs_size_ue_big" as cold function
Noelle:  Function "x264_cabac_mb_type_intra.1056"
Noelle:  Disable "x264_cabac_mb_type_intra.1056" as cold function
Noelle:  Function "x264_cabac_pos"
Noelle:  Disable "x264_cabac_pos" as cold function
Noelle:  Function "predict_4x4_v"
Noelle:  Disable "predict_4x4_v" as cold function
Noelle:  Function "predict_16x16_dc_left.1108"
Noelle:  Disable "predict_16x16_dc_left.1108" as cold function
Noelle:  Function "bs_size_te"
Noelle:  Disable "bs_size_te" as cold function
Noelle:  Function "x264_cabac_mb_qp_delta.1035"
Noelle:  Disable "x264_cabac_mb_qp_delta.1035" as cold function
Noelle:  Function "x264_predictor_difference_mmxext"
Noelle:  Disable "x264_predictor_difference_mmxext" as cold function
Noelle:  Function "bs_pos"
Noelle:  Disable "bs_pos" as cold function
Noelle:  Function "x264_mb_predict_mv_pskip"
Noelle:  Disable "x264_mb_predict_mv_pskip" as cold function
Noelle:  Function "x264_bitstream_check_buffer"
Noelle:  Disable "x264_bitstream_check_buffer" as cold function
Noelle:  Function "x264_cabac_mb_cbp_luma.1032"
Noelle:  Disable "x264_cabac_mb_cbp_luma.1032" as cold function
Noelle:  Function "x264_cabac_mb_ref"
Noelle:  Disable "x264_cabac_mb_ref" as cold function
Noelle:  Function "x264_cabac_mb_intra_chroma_pred_mode.1023"
Noelle:  Disable "x264_cabac_mb_intra_chroma_pred_mode.1023" as cold function
Noelle:  Function "x264_frame_expand_border"
Noelle:  Disable "x264_frame_expand_border" as cold function
Noelle:  Function "x264_frame_expand_border_filtered"
Noelle:  Disable "x264_frame_expand_border_filtered" as cold function
Noelle:  Function "predict_8x8c_dc_top.1112"
Noelle:  Disable "predict_8x8c_dc_top.1112" as cold function
Noelle:  Function "x264_median_mv_mmxext"
Noelle:  Disable "x264_median_mv_mmxext" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed"
Noelle:  Disable "x264_mb_transform_8x8_allowed" as cold function
Noelle:  Function "x264_cabac_mb_cbp_chroma.1033"
Noelle:  Disable "x264_cabac_mb_cbp_chroma.1033" as cold function
Noelle:  Function "sum_sa8d"
Noelle:  Disable "sum_sa8d" as cold function
Noelle:  Function "sum_satd"
Noelle:  Disable "sum_satd" as cold function
Noelle:  Function "x264_cabac_mb_skip"
Noelle:  Disable "x264_cabac_mb_skip" as cold function
Noelle:  Function "x264_mb_analyse_load_costs"
Noelle:  Disable "x264_mb_analyse_load_costs" as cold function
Noelle:  Function "x264_cabac_mb_ref.1024"
Noelle:  Disable "x264_cabac_mb_ref.1024" as cold function
Noelle:  Function "x264_cabac_context_init"
Noelle:  Disable "x264_cabac_context_init" as cold function
Noelle:  Function "predict_16x16_mode_available"
Noelle:  Disable "predict_16x16_mode_available" as cold function
Noelle:  Function "predict_8x8chroma_mode_available"
Noelle:  Disable "predict_8x8chroma_mode_available" as cold function
Noelle:  Function "x264_macroblock_encode_pskip"
Noelle:  Disable "x264_macroblock_encode_pskip" as cold function
Noelle:  Function "pack16to32_mask.829"
Noelle:  Disable "pack16to32_mask.829" as cold function
Noelle:  Function "x264_clip3.664"
Noelle:  Disable "x264_clip3.664" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1019"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1019" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1034"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1034" as cold function
Noelle:  Function "predict_4x4_dc_left"
Noelle:  Disable "predict_4x4_dc_left" as cold function
Noelle:  Function "x264_clip3.813"
Noelle:  Disable "x264_clip3.813" as cold function
Noelle:  Function "x264_mb_analyse_transform_rd"
Noelle:  Disable "x264_mb_analyse_transform_rd" as cold function
Noelle:  Function "x264_ratecontrol_qp"
Noelle:  Disable "x264_ratecontrol_qp" as cold function
Noelle:  Function "x264_cabac_mb_intra4x4_pred_mode.1022"
Noelle:  Disable "x264_cabac_mb_intra4x4_pred_mode.1022" as cold function
Noelle:  Function "predict_4x4_dc_top"
Noelle:  Disable "predict_4x4_dc_top" as cold function
Noelle:  Function "x264_clip3.748"
Noelle:  Disable "x264_clip3.748" as cold function
Noelle:  Function "x264_encoder_open"
Noelle:  Disable "x264_encoder_open" as cold function
Noelle:  Function "x264_macroblock_encode_skip"
Noelle:  Disable "x264_macroblock_encode_skip" as cold function
Noelle:  Function "x264_encoder_frame_end"
Noelle:  Disable "x264_encoder_frame_end" as cold function
Noelle:  Function "pack16to32_mask.785"
Noelle:  Disable "pack16to32_mask.785" as cold function
Noelle:  Function "x264_frame_filter"
Noelle:  Disable "x264_frame_filter" as cold function
Noelle:  Function "pack16to32_mask.1051"
Noelle:  Disable "pack16to32_mask.1051" as cold function
Noelle:  Function "x264_clip3.1001"
Noelle:  Disable "x264_clip3.1001" as cold function
Noelle:  Function "bs_size_se"
Noelle:  Disable "bs_size_se" as cold function
Noelle:  Function "x264_rdo_init"
Noelle:  Disable "x264_rdo_init" as cold function
Noelle:  Function "x264_noise_reduction_update"
Noelle:  Disable "x264_noise_reduction_update" as cold function
Noelle:  Function "x264_cqm_init"
Noelle:  Disable "x264_cqm_init" as cold function
Noelle:  Function "x264_reference_build_list"
Noelle:  Disable "x264_reference_build_list" as cold function
Noelle:  Function "x264_slice_header_write"
Noelle:  Disable "x264_slice_header_write" as cold function
Noelle:  Function "x264_cabac_size_decision2"
Noelle:  Disable "x264_cabac_size_decision2" as cold function
Noelle:  Function "predict_8x8c_dc_128"
Noelle:  Disable "predict_8x8c_dc_128" as cold function
Noelle:  Function "predict_16x16_dc_128"
Noelle:  Disable "predict_16x16_dc_128" as cold function
Noelle:  Function "x264_slice_init"
Noelle:  Disable "x264_slice_init" as cold function
Noelle:  Function "bs_write_ue_big"
Noelle:  Disable "bs_write_ue_big" as cold function
Noelle:  Function "bs_write"
Noelle:  Disable "bs_write" as cold function
Noelle:  Function "x264_macroblock_slice_init"
Noelle:  Disable "x264_macroblock_slice_init" as cold function
Noelle:  Function "x264_frame_expand_border_mod16"
Noelle:  Disable "x264_frame_expand_border_mod16" as cold function
Noelle:  Function "x264_encoder_close"
Noelle:  Disable "x264_encoder_close" as cold function
Noelle:  Function "x264_reference_update"
Noelle:  Disable "x264_reference_update" as cold function
Noelle:  Function "x264_frame_delete"
Noelle:  Disable "x264_frame_delete" as cold function
Noelle:  Function "x264_slice_header_init"
Noelle:  Disable "x264_slice_header_init" as cold function
Noelle:  Function "x264_ratecontrol_start"
Noelle:  Disable "x264_ratecontrol_start" as cold function
Noelle:  Function "x264_ratecontrol_end"
Noelle:  Disable "x264_ratecontrol_end" as cold function
Noelle:  Function "setup_inverse_delta_pocs"
Noelle:  Disable "setup_inverse_delta_pocs" as cold function
Noelle:  Function "bs_write_se"
Noelle:  Disable "bs_write_se" as cold function
Noelle:  Function "pack8to32"
Noelle:  Disable "pack8to32" as cold function
Noelle:  Function "x264_cabac_encode_flush"
Noelle:  Disable "x264_cabac_encode_flush" as cold function
Noelle:  Function "x264_frame_copy_picture"
Noelle:  Disable "x264_frame_copy_picture" as cold function
Noelle:  Function "bs_write.943"
Noelle:  Disable "bs_write.943" as cold function
Noelle:  Function "x264_frame_shift"
Noelle:  Disable "x264_frame_shift" as cold function
Noelle:  Function "x264_frame_pop_unused"
Noelle:  Disable "x264_frame_pop_unused" as cold function
Noelle:  Function "x264_free"
Noelle:  Disable "x264_free" as cold function
Noelle:  Function "x264_sei_version_write"
Noelle:  Disable "x264_sei_version_write" as cold function
Noelle:  Function "x264_frame_push"
Noelle:  Disable "x264_frame_push" as cold function
Noelle:  Function "read_frame_y4m"
Noelle:  Disable "read_frame_y4m" as cold function
Noelle:  Function "x264_sps_write"
Noelle:  Disable "x264_sps_write" as cold function
Noelle:  Function "bs_align_1"
Noelle:  Disable "bs_align_1" as cold function
Noelle:  Function "x264_slicetype_decide"
Noelle:  Disable "x264_slicetype_decide" as cold function
Noelle:  Function "x264_nal_end"
Noelle:  Disable "x264_nal_end" as cold function
Noelle:  Function "x264_frame_push_unused"
Noelle:  Disable "x264_frame_push_unused" as cold function
Noelle:  Function "x264_nal_start"
Noelle:  Disable "x264_nal_start" as cold function
Noelle:  Function "bs_write_ue_big.944"
Noelle:  Disable "bs_write_ue_big.944" as cold function
Noelle:  Function "bs_write1"
Noelle:  Disable "bs_write1" as cold function
Noelle:  Function "bs_init"
Noelle:  Disable "bs_init" as cold function
Noelle:  Function "x264_frame_pop"
Noelle:  Disable "x264_frame_pop" as cold function
Noelle:  Function "bs_flush"
Noelle:  Disable "bs_flush" as cold function
Noelle:  Function "predict_4x4_dc_128"
Noelle:  Disable "predict_4x4_dc_128" as cold function
Noelle:  Function "Parse"
Noelle:  Disable "Parse" as cold function
Noelle:  Function "x264_pps_write"
Noelle:  Disable "x264_pps_write" as cold function
Noelle:  Function "get_zone"
Noelle:  Disable "get_zone" as cold function
Noelle:  Function "x264_cabac_encode_init"
Noelle:  Disable "x264_cabac_encode_init" as cold function
Noelle:  Function "x264_frame_new"
Noelle:  Disable "x264_frame_new" as cold function
Noelle:  Function "x264_param_parse"
Noelle:  Disable "x264_param_parse" as cold function
Noelle:  Function "update_vbv"
Noelle:  Disable "update_vbv" as cold function
Noelle:  Function "x264_validate_parameters"
Noelle:  Disable "x264_validate_parameters" as cold function
Noelle:  Function "x264_dct_init_weights"
Noelle:  Disable "x264_dct_init_weights" as cold function
Noelle:  Function "x264_log"
Noelle:  Disable "x264_log" as cold function
Noelle:  Function "x264_reference_reset"
Noelle:  Disable "x264_reference_reset" as cold function
Noelle:  Function "x264_thread_sync_stat"
Noelle:  Disable "x264_thread_sync_stat" as cold function
Noelle:  Function "endian_fix"
Noelle:  Disable "endian_fix" as cold function
Noelle:  Function "x264_validate_levels"
Noelle:  Disable "x264_validate_levels" as cold function
Noelle:  Function "x264_clip3.848"
Noelle:  Disable "x264_clip3.848" as cold function
Noelle:  Function "bs_write1.946"
Noelle:  Disable "bs_write1.946" as cold function
Noelle:  Function "open_file_y4m"
Noelle:  Disable "open_file_y4m" as cold function
Noelle:  Function "x264_macroblock_cache_end"
Noelle:  Disable "x264_macroblock_cache_end" as cold function
Noelle:  Function "write_nalu_bsf"
Noelle:  Disable "write_nalu_bsf" as cold function
Noelle:  Function "bs_write_se.945"
Noelle:  Disable "bs_write_se.945" as cold function
Noelle:  Function "x264_sps_init"
Noelle:  Disable "x264_sps_init" as cold function
Noelle:  Function "bs_rbsp_trailing.947"
Noelle:  Disable "bs_rbsp_trailing.947" as cold function
Noelle:  Function "x264_cqm_delete"
Noelle:  Disable "x264_cqm_delete" as cold function
Noelle:  Function "bs_write32"
Noelle:  Disable "bs_write32" as cold function
Noelle:  Function "x264_ratecontrol_new"
Noelle:  Disable "x264_ratecontrol_new" as cold function
Noelle:  Function "x264_malloc"
Noelle:  Disable "x264_malloc" as cold function
Noelle:  Function "x264_pixel_init"
Noelle:  Disable "x264_pixel_init" as cold function
Noelle:  Function "x264_macroblock_cache_init"
Noelle:  Disable "x264_macroblock_cache_init" as cold function
Noelle:  Function "endian_fix.949"
Noelle:  Disable "endian_fix.949" as cold function
Noelle:  Function "x264_param_default"
Noelle:  Disable "x264_param_default" as cold function
Noelle:  Function "bs_flush.948"
Noelle:  Disable "bs_flush.948" as cold function
Noelle:  Function "x264_param2string"
Noelle:  Disable "x264_param2string" as cold function
Noelle:  Function "x264_cpu_detect"
Noelle:  Disable "x264_cpu_detect" as cold function
Noelle:  Function "x264_mc_init"
Noelle:  Disable "x264_mc_init" as cold function
Noelle:  Function "set_eop_bsf"
Noelle:  Disable "set_eop_bsf" as cold function
Noelle:  Function "x264_pps_init"
Noelle:  Disable "x264_pps_init" as cold function
Noelle:  Function "x264_clip3.593"
Noelle:  Disable "x264_clip3.593" as cold function
Noelle:  Function "x264_mc_init_mmx"
Noelle:  Disable "x264_mc_init_mmx" as cold function
Noelle:  Function "x264_quant_init"
Noelle:  Disable "x264_quant_init" as cold function
Noelle:  Function "parse_enum"
Noelle:  Disable "parse_enum" as cold function
Noelle:  Function "x264_frame_sort"
Noelle:  Disable "x264_frame_sort" as cold function
Noelle:  Function "x264_atobool"
Noelle:  Disable "x264_atobool" as cold function
Noelle:  Function "x264_atoi"
Noelle:  Disable "x264_atoi" as cold function
Noelle:  Function "mbcmp_init"
Noelle:  Disable "mbcmp_init" as cold function
Noelle:  Function "x264_predict_8x8_init"
Noelle:  Disable "x264_predict_8x8_init" as cold function
Noelle:  Function "x264_predict_16x16_init"
Noelle:  Disable "x264_predict_16x16_init" as cold function
Noelle:  Function "x264_predict_4x4_init"
Noelle:  Disable "x264_predict_4x4_init" as cold function
Noelle:  Function "x264_dct_init"
Noelle:  Disable "x264_dct_init" as cold function
Noelle:  Function "x264_ratecontrol_delete"
Noelle:  Disable "x264_ratecontrol_delete" as cold function
Noelle:  Function "x264_reduce_fraction"
Noelle:  Disable "x264_reduce_fraction" as cold function
Noelle:  Function "x264_print_intra"
Noelle:  Disable "x264_print_intra" as cold function
Noelle:  Function "x264_zigzag_init"
Noelle:  Disable "x264_zigzag_init" as cold function
Noelle:  Function "x264_predict_8x8c_init"
Noelle:  Disable "x264_predict_8x8c_init" as cold function
Noelle:  Function "x264_picture_alloc"
Noelle:  Disable "x264_picture_alloc" as cold function
Noelle:  Function "get_frame_total_y4m"
Noelle:  Disable "get_frame_total_y4m" as cold function
Noelle:  Function "x264_predict_16x16_init_mmx"
Noelle:  Disable "x264_predict_16x16_init_mmx" as cold function
Noelle:  Function "x264_deblock_init"
Noelle:  Disable "x264_deblock_init" as cold function
Noelle:  Function "x264_predict_8x8_init_mmx"
Noelle:  Disable "x264_predict_8x8_init_mmx" as cold function
Noelle:  Function "endian_fix32"
Noelle:  Disable "endian_fix32" as cold function
Noelle:  Function "x264_mdate"
Noelle:  Disable "x264_mdate" as cold function
Noelle:  Function "x264_predict_8x8c_init_mmx"
Noelle:  Disable "x264_predict_8x8c_init_mmx" as cold function
Noelle:  Function "x264_predict_4x4_init_mmx"
Noelle:  Disable "x264_predict_4x4_init_mmx" as cold function
Noelle:  Function "x264_clip3f"
Noelle:  Disable "x264_clip3f" as cold function
Noelle:  Function "qp2qscale"
Noelle:  Disable "qp2qscale" as cold function
Noelle:  Function "parse_zones"
Noelle:  Disable "parse_zones" as cold function
Noelle:  Function "close_file_y4m"
Noelle:  Disable "close_file_y4m" as cold function
Noelle:  Function "close_file_bsf"
Noelle:  Disable "close_file_bsf" as cold function
Noelle:  Function "x264_picture_clean"
Noelle:  Disable "x264_picture_clean" as cold function
Noelle:  Function "x264_ratecontrol_summary"
Noelle:  Disable "x264_ratecontrol_summary" as cold function
Noelle:  Function "open_file_bsf"
Noelle:  Disable "open_file_bsf" as cold function
Noelle:  Function "x264_clip3"
Noelle:  Disable "x264_clip3" as cold function
Noelle:  Function "set_param_bsf"
Noelle:  Disable "set_param_bsf" as cold function
Noelle:  Function "x264_pixel_var_8x8"
Noelle:  Disable "x264_pixel_var_8x8" as cold function
Noelle:  Function "ssim_4x4x2_core"
Noelle:  Disable "ssim_4x4x2_core" as cold function
Noelle:  Function "frame_init_lowres_core"
Noelle:  Disable "frame_init_lowres_core" as cold function
Noelle:  Function "x264_pixel_ads1"
Noelle:  Disable "x264_pixel_ads1" as cold function
Noelle:  Function "x264_pixel_ads4"
Noelle:  Disable "x264_pixel_ads4" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x8"
Noelle:  Disable "x264_pixel_hadamard_ac_8x8" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_8x16"
Noelle:  Disable "x264_pixel_hadamard_ac_8x16" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x8"
Noelle:  Disable "x264_pixel_hadamard_ac_16x8" as cold function
Noelle:  Function "x264_pixel_hadamard_ac_16x16"
Noelle:  Disable "x264_pixel_hadamard_ac_16x16" as cold function
Noelle:  Function "x264_pixel_sa8d_8x8"
Noelle:  Disable "x264_pixel_sa8d_8x8" as cold function
Noelle:  Function "x264_pixel_ads2"
Noelle:  Disable "x264_pixel_ads2" as cold function
Noelle:  Function "x264_pixel_sa8d_8x16"
Noelle:  Disable "x264_pixel_sa8d_8x16" as cold function
Noelle:  Function "x264_pixel_sa8d_16x8"
Noelle:  Disable "x264_pixel_sa8d_16x8" as cold function
Noelle:  Function "x264_pixel_sa8d_16x16"
Noelle:  Disable "x264_pixel_sa8d_16x16" as cold function
Noelle:  Function "ssim_end4"
Noelle:  Disable "ssim_end4" as cold function
Noelle:  Function "x264_pixel_var_16x16"
Noelle:  Disable "x264_pixel_var_16x16" as cold function
Noelle:  Function "get_ref_mmxext"
Noelle:  Disable "get_ref_mmxext" as cold function
Noelle:  Function "mc_luma_mmxext"
Noelle:  Disable "mc_luma_mmxext" as cold function
Noelle:  Function "deblock_v_luma_c"
Noelle:  Disable "deblock_v_luma_c" as cold function
Noelle:  Function "deblock_h_luma_c"
Noelle:  Disable "deblock_h_luma_c" as cold function
Noelle:  Function "deblock_v_chroma_c"
Noelle:  Disable "deblock_v_chroma_c" as cold function
Noelle:  Function "deblock_h_chroma_c"
Noelle:  Disable "deblock_h_chroma_c" as cold function
Noelle:  Function "deblock_v_luma_intra_c"
Noelle:  Disable "deblock_v_luma_intra_c" as cold function
Noelle:  Function "deblock_h_luma_intra_c"
Noelle:  Disable "deblock_h_luma_intra_c" as cold function
Noelle:  Function "deblock_v_chroma_intra_c"
Noelle:  Disable "deblock_v_chroma_intra_c" as cold function
Noelle:  Function "deblock_h_chroma_intra_c"
Noelle:  Disable "deblock_h_chroma_intra_c" as cold function
Noelle:  Function "deblock_chroma_intra_c"
Noelle:  Disable "deblock_chroma_intra_c" as cold function
Noelle:  Function "deblock_luma_intra_c"
Noelle:  Disable "deblock_luma_intra_c" as cold function
Noelle:  Function "deblock_chroma_c"
Noelle:  Disable "deblock_chroma_c" as cold function
Noelle:  Function "x264_clip3.703"
Noelle:  Disable "x264_clip3.703" as cold function
Noelle:  Function "x264_clip_uint8.704"
Noelle:  Disable "x264_clip_uint8.704" as cold function
Noelle:  Function "deblock_luma_c"
Noelle:  Disable "deblock_luma_c" as cold function
Noelle:  Function "quant_8x8"
Noelle:  Disable "quant_8x8" as cold function
Noelle:  Function "quant_4x4"
Noelle:  Disable "quant_4x4" as cold function
Noelle:  Function "quant_4x4_dc"
Noelle:  Disable "quant_4x4_dc" as cold function
Noelle:  Function "quant_2x2_dc"
Noelle:  Disable "quant_2x2_dc" as cold function
Noelle:  Function "dequant_4x4"
Noelle:  Disable "dequant_4x4" as cold function
Noelle:  Function "dequant_4x4_dc"
Noelle:  Disable "dequant_4x4_dc" as cold function
Noelle:  Function "x264_encoder_headers"
Noelle:  Disable "x264_encoder_headers" as cold function
Noelle:  Function "x264_frame_dump"
Noelle:  Disable "x264_frame_dump" as cold function
Noelle:  Function "dequant_8x8"
Noelle:  Disable "dequant_8x8" as cold function
Noelle:  Function "ac_energy_mb"
Noelle:  Disable "ac_energy_mb" as cold function
Noelle:  Function "x264_frame_expand_border_lowres"
Noelle:  Disable "x264_frame_expand_border_lowres" as cold function
Noelle:  Function "x264_cqm_parse_file"
Noelle:  Disable "x264_cqm_parse_file" as cold function
Noelle:  Function "parse_cqm"
Noelle:  Disable "parse_cqm" as cold function
Noelle:  Function "x264_clip3.467"
Noelle:  Disable "x264_clip3.467" as cold function
Noelle:  Function "pixel_avg_8x4"
Noelle:  Disable "pixel_avg_8x4" as cold function
Noelle:  Function "x264_coeff_last_internal"
Noelle:  Disable "x264_coeff_last_internal" as cold function
Noelle:  Function "x264_decimate_score_internal"
Noelle:  Disable "x264_decimate_score_internal" as cold function
Noelle:  Function "mc_luma"
Noelle:  Disable "mc_luma" as cold function
Noelle:  Function "get_ref"
Noelle:  Disable "get_ref" as cold function
Noelle:  Function "mc_chroma"
Noelle:  Disable "mc_chroma" as cold function
Noelle:  Function "pixel_avg_16x16"
Noelle:  Disable "pixel_avg_16x16" as cold function
Noelle:  Function "pixel_avg_16x8"
Noelle:  Disable "pixel_avg_16x8" as cold function
Noelle:  Function "pixel_avg_8x16"
Noelle:  Disable "pixel_avg_8x16" as cold function
Noelle:  Function "pixel_avg_8x8"
Noelle:  Disable "pixel_avg_8x8" as cold function
Noelle:  Function "pixel_avg_4x8"
Noelle:  Disable "pixel_avg_4x8" as cold function
Noelle:  Function "pixel_avg_4x4"
Noelle:  Disable "pixel_avg_4x4" as cold function
Noelle:  Function "pixel_avg_4x2"
Noelle:  Disable "pixel_avg_4x2" as cold function
Noelle:  Function "pixel_avg_2x4"
Noelle:  Disable "pixel_avg_2x4" as cold function
Noelle:  Function "pixel_avg_2x2"
Noelle:  Disable "pixel_avg_2x2" as cold function
Noelle:  Function "mc_copy_w16"
Noelle:  Disable "mc_copy_w16" as cold function
Noelle:  Function "mc_copy_w8"
Noelle:  Disable "mc_copy_w8" as cold function
Noelle:  Function "mc_copy_w4"
Noelle:  Disable "mc_copy_w4" as cold function
Noelle:  Function "plane_copy"
Noelle:  Disable "plane_copy" as cold function
Noelle:  Function "hpel_filter"
Noelle:  Disable "hpel_filter" as cold function
Noelle:  Function "prefetch_fenc_null"
Noelle:  Disable "prefetch_fenc_null" as cold function
Noelle:  Function "prefetch_ref_null"
Noelle:  Disable "prefetch_ref_null" as cold function
Noelle:  Function "x264_denoise_dct"
Noelle:  Disable "x264_denoise_dct" as cold function
Noelle:  Function "x264_decimate_score15"
Noelle:  Disable "x264_decimate_score15" as cold function
Noelle:  Function "x264_decimate_score16"
Noelle:  Disable "x264_decimate_score16" as cold function
Noelle:  Function "x264_decimate_score64"
Noelle:  Disable "x264_decimate_score64" as cold function
Noelle:  Function "x264_coeff_last4"
Noelle:  Disable "x264_coeff_last4" as cold function
Noelle:  Function "x264_coeff_last15"
Noelle:  Disable "x264_coeff_last15" as cold function
Noelle:  Function "x264_coeff_last16"
Noelle:  Disable "x264_coeff_last16" as cold function
Noelle:  Function "x264_coeff_last64"
Noelle:  Disable "x264_coeff_last64" as cold function
Noelle:  Function "memzero_aligned"
Noelle:  Disable "memzero_aligned" as cold function
Noelle:  Function "predict_8x8_vr_mmxext"
Noelle:  Disable "predict_8x8_vr_mmxext" as cold function
Noelle:  Function "pack8to16"
Noelle:  Disable "pack8to16" as cold function
Noelle:  Function "pack16to32"
Noelle:  Disable "pack16to32" as cold function
Noelle:  Function "predict_8x8c_v"
Noelle:  Disable "predict_8x8c_v" as cold function
Noelle:  Function "predict_8x8c_h"
Noelle:  Disable "predict_8x8c_h" as cold function
Noelle:  Function "predict_8x8c_dc"
Noelle:  Disable "predict_8x8c_dc" as cold function
Noelle:  Function "predict_8x8c_p"
Noelle:  Disable "predict_8x8c_p" as cold function
Noelle:  Function "predict_8x8c_dc_left"
Noelle:  Disable "predict_8x8c_dc_left" as cold function
Noelle:  Function "predict_8x8c_dc_top"
Noelle:  Disable "predict_8x8c_dc_top" as cold function
Noelle:  Function "x264_clip_uint8.650"
Noelle:  Disable "x264_clip_uint8.650" as cold function
Noelle:  Function "predict_16x16_v"
Noelle:  Disable "predict_16x16_v" as cold function
Noelle:  Function "predict_16x16_h"
Noelle:  Disable "predict_16x16_h" as cold function
Noelle:  Function "predict_16x16_dc"
Noelle:  Disable "predict_16x16_dc" as cold function
Noelle:  Function "predict_16x16_p"
Noelle:  Disable "predict_16x16_p" as cold function
Noelle:  Function "predict_16x16_dc_left"
Noelle:  Disable "predict_16x16_dc_left" as cold function
Noelle:  Function "predict_16x16_dc_top"
Noelle:  Disable "predict_16x16_dc_top" as cold function
Noelle:  Function "predict_16x16_dc_mmxext"
Noelle:  Disable "predict_16x16_dc_mmxext" as cold function
Noelle:  Function "predict_16x16_p_mmxext"
Noelle:  Disable "predict_16x16_p_mmxext" as cold function
Noelle:  Function "predict_8x8_v"
Noelle:  Disable "predict_8x8_v" as cold function
Noelle:  Function "ssim_end1"
Noelle:  Disable "ssim_end1" as cold function
Noelle:  Function "pixel_hadamard_ac"
Noelle:  Disable "pixel_hadamard_ac" as cold function
Noelle:  Function "pixel_sa8d_wxh"
Noelle:  Disable "pixel_sa8d_wxh" as cold function
Noelle:  Function "pixel_satd_wxh"
Noelle:  Disable "pixel_satd_wxh" as cold function
Noelle:  Function "predict_4x4_dc"
Noelle:  Disable "predict_4x4_dc" as cold function
Noelle:  Function "predict_4x4_ddl"
Noelle:  Disable "predict_4x4_ddl" as cold function
Noelle:  Function "predict_4x4_ddr"
Noelle:  Disable "predict_4x4_ddr" as cold function
Noelle:  Function "predict_4x4_vr"
Noelle:  Disable "predict_4x4_vr" as cold function
Noelle:  Function "predict_4x4_hd"
Noelle:  Disable "predict_4x4_hd" as cold function
Noelle:  Function "predict_4x4_vl"
Noelle:  Disable "predict_4x4_vl" as cold function
Noelle:  Function "predict_4x4_hu"
Noelle:  Disable "predict_4x4_hu" as cold function
Noelle:  Function "predict_8x8_h"
Noelle:  Disable "predict_8x8_h" as cold function
Noelle:  Function "predict_8x8_dc"
Noelle:  Disable "predict_8x8_dc" as cold function
Noelle:  Function "predict_8x8_ddl"
Noelle:  Disable "predict_8x8_ddl" as cold function
Noelle:  Function "predict_8x8_ddr"
Noelle:  Disable "predict_8x8_ddr" as cold function
Noelle:  Function "predict_8x8_vr"
Noelle:  Disable "predict_8x8_vr" as cold function
Noelle:  Function "predict_8x8_hd"
Noelle:  Disable "predict_8x8_hd" as cold function
Noelle:  Function "predict_8x8_vl"
Noelle:  Disable "predict_8x8_vl" as cold function
Noelle:  Function "predict_8x8_hu"
Noelle:  Disable "predict_8x8_hu" as cold function
Noelle:  Function "predict_8x8_dc_left"
Noelle:  Disable "predict_8x8_dc_left" as cold function
Noelle:  Function "predict_8x8_dc_top"
Noelle:  Disable "predict_8x8_dc_top" as cold function
Noelle:  Function "predict_8x8_dc_128"
Noelle:  Disable "predict_8x8_dc_128" as cold function
Noelle:  Function "gcd"
Noelle:  Disable "gcd" as cold function
Noelle:  Function "mk_flushFrame"
Noelle:  Disable "mk_flushFrame" as cold function
Noelle:  Function "mk_closeCluster"
Noelle:  Disable "mk_closeCluster" as cold function
Noelle:  Function "mk_writeFloatRaw"
Noelle:  Disable "mk_writeFloatRaw" as cold function
Noelle:  Function "mk_flushContextData"
Noelle:  Disable "mk_flushContextData" as cold function
Noelle:  Function "mk_destroyContexts"
Noelle:  Disable "mk_destroyContexts" as cold function
Noelle:  Function "mk_appendContextData"
Noelle:  Disable "mk_appendContextData" as cold function
Noelle:  Function "mk_closeContext"
Noelle:  Disable "mk_closeContext" as cold function
Noelle:  Function "mk_writeID"
Noelle:  Disable "mk_writeID" as cold function
Noelle:  Function "mk_writeSize"
Noelle:  Disable "mk_writeSize" as cold function
Noelle:  Function "mk_createContext"
Noelle:  Disable "mk_createContext" as cold function
Noelle:  Function "mk_writeUInt"
Noelle:  Disable "mk_writeUInt" as cold function
Noelle:  Function "mk_ebmlSizeSize"
Noelle:  Disable "mk_ebmlSizeSize" as cold function
Noelle:  Function "mk_ebmlSIntSize"
Noelle:  Disable "mk_ebmlSIntSize" as cold function
Noelle:  Function "mk_writeSInt"
Noelle:  Disable "mk_writeSInt" as cold function
Noelle:  Function "mk_setFrameFlags"
Noelle:  Disable "mk_setFrameFlags" as cold function
Noelle:  Function "mk_close"
Noelle:  Disable "mk_close" as cold function
Noelle:  Function "mk_startFrame"
Noelle:  Disable "mk_startFrame" as cold function
Noelle:  Function "mk_addFrameData"
Noelle:  Disable "mk_addFrameData" as cold function
Noelle:  Function "write_header_mkv"
Noelle:  Disable "write_header_mkv" as cold function
Noelle:  Function "mk_writeHeader"
Noelle:  Disable "mk_writeHeader" as cold function
Noelle:  Function "mk_writeStr"
Noelle:  Disable "mk_writeStr" as cold function
Noelle:  Function "mk_flushContextID"
Noelle:  Disable "mk_flushContextID" as cold function
Noelle:  Function "mk_writeFloat"
Noelle:  Disable "mk_writeFloat" as cold function
Noelle:  Function "mk_writeBin"
Noelle:  Disable "mk_writeBin" as cold function
Noelle:  Function "mk_createWriter"
Noelle:  Disable "mk_createWriter" as cold function
Noelle:  Function "strtable_lookup"
Noelle:  Disable "strtable_lookup" as cold function
Noelle:  Function "x264_log_default"
Noelle:  Disable "x264_log_default" as cold function
Noelle:  Function "transpose"
Noelle:  Disable "transpose" as cold function
Noelle:  Function "x264_cqm_parse_jmlist"
Noelle:  Disable "x264_cqm_parse_jmlist" as cold function
Noelle:  Function "open_file_yuv"
Noelle:  Disable "open_file_yuv" as cold function
Noelle:  Function "get_frame_total_yuv"
Noelle:  Disable "get_frame_total_yuv" as cold function
Noelle:  Function "read_frame_yuv"
Noelle:  Disable "read_frame_yuv" as cold function
Noelle:  Function "close_file_yuv"
Noelle:  Disable "close_file_yuv" as cold function
Noelle:  Function "Help"
Noelle:  Disable "Help" as cold function
Noelle:  Function "atoi"
Noelle:  Disable "atoi" as cold function
Noelle:  Function "open_file_mkv"
Noelle:  Disable "open_file_mkv" as cold function
Noelle:  Function "write_nalu_mkv"
Noelle:  Disable "write_nalu_mkv" as cold function
Noelle:  Function "set_param_mkv"
Noelle:  Disable "set_param_mkv" as cold function
Noelle:  Function "set_eop_mkv"
Noelle:  Disable "set_eop_mkv" as cold function
Noelle:  Function "close_file_mkv"
Noelle:  Disable "close_file_mkv" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_16x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_sse2"
Noelle:  Disable "x264_pixel_satd_x4_8x4_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_sse2"
Noelle:  Disable "x264_pixel_satd_x4_4x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_8x16_sse2" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_sse2"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x16_sse2" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_sse2"
Noelle:  Disable "x264_pixel_satd_x3_16x8_sse2" as cold function
Noelle:  Function "x264_intra_sa8d_x3_8x8_ssse3"
Noelle:  Disable "x264_intra_sa8d_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3_phadd"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3_phadd" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_16x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x3_4x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_16x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x16_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_8x4_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x8_ssse3" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_ssse3"
Noelle:  Disable "x264_pixel_satd_x4_4x4_ssse3" as cold function
Noelle:  Function "pixel_avg_wxh"
Noelle:  Disable "pixel_avg_wxh" as cold function
Noelle:  Function "x264_clip_uint8"
Noelle:  Disable "x264_clip_uint8" as cold function
Noelle:  Function "mc_copy"
Noelle:  Disable "mc_copy" as cold function
Noelle:  Function "pixel_avg_weight_wxh"
Noelle:  Disable "pixel_avg_weight_wxh" as cold function
Noelle:  Function "pixel_avg"
Noelle:  Disable "pixel_avg" as cold function
Noelle:  Function "zigzag_scan_8x8_field"
Noelle:  Disable "zigzag_scan_8x8_field" as cold function
Noelle:  Function "zigzag_scan_4x4_field"
Noelle:  Disable "zigzag_scan_4x4_field" as cold function
Noelle:  Function "zigzag_sub_8x8_field"
Noelle:  Disable "zigzag_sub_8x8_field" as cold function
Noelle:  Function "zigzag_sub_4x4_field"
Noelle:  Disable "zigzag_sub_4x4_field" as cold function
Noelle:  Function "zigzag_scan_8x8_frame"
Noelle:  Disable "zigzag_scan_8x8_frame" as cold function
Noelle:  Function "zigzag_scan_4x4_frame"
Noelle:  Disable "zigzag_scan_4x4_frame" as cold function
Noelle:  Function "zigzag_sub_8x8_frame"
Noelle:  Disable "zigzag_sub_8x8_frame" as cold function
Noelle:  Function "x264_hpel_filter_sse2_misalign"
Noelle:  Disable "x264_hpel_filter_sse2_misalign" as cold function
Noelle:  Function "mc_luma_cache64_sse2"
Noelle:  Disable "mc_luma_cache64_sse2" as cold function
Noelle:  Function "get_ref_cache64_sse2"
Noelle:  Disable "get_ref_cache64_sse2" as cold function
Noelle:  Function "get_ref_sse2_misalign"
Noelle:  Disable "get_ref_sse2_misalign" as cold function
Noelle:  Function "x264_cabac_encode_decision_c"
Noelle:  Disable "x264_cabac_encode_decision_c" as cold function
Noelle:  Function "qscale2qp"
Noelle:  Disable "qscale2qp" as cold function
Noelle:  Function "x264_thread_sync_context"
Noelle:  Disable "x264_thread_sync_context" as cold function
Noelle:  Function "x264_thread_sync_ratecontrol"
Noelle:  Disable "x264_thread_sync_ratecontrol" as cold function
Noelle:  Function "x264_frame_init_lowres"
Noelle:  Disable "x264_frame_init_lowres" as cold function
Noelle:  Function "x264_adaptive_quant_frame"
Noelle:  Disable "x264_adaptive_quant_frame" as cold function
Noelle:  Function "x264_frame_deblock"
Noelle:  Disable "x264_frame_deblock" as cold function
Noelle:  Function "x264_frame_cond_wait"
Noelle:  Disable "x264_frame_cond_wait" as cold function
Noelle:  Function "x264_cpu_num_processors"
Noelle:  Disable "x264_cpu_num_processors" as cold function
Noelle:  Function "bs_write1.1065"
Noelle:  Disable "bs_write1.1065" as cold function
Noelle:  Function "bs_write_ue"
Noelle:  Disable "bs_write_ue" as cold function
Noelle:  Function "bs_align_0"
Noelle:  Disable "bs_align_0" as cold function
Noelle:  Function "x264_mb_predict_intra4x4_mode.1066"
Noelle:  Disable "x264_mb_predict_intra4x4_mode.1066" as cold function
Noelle:  Function "bs_write.1069"
Noelle:  Disable "bs_write.1069" as cold function
Noelle:  Function "bs_write_te"
Noelle:  Disable "bs_write_te" as cold function
Noelle:  Function "bs_write_se.1072"
Noelle:  Disable "bs_write_se.1072" as cold function
Noelle:  Function "cavlc_mb8x8_mvd.1074"
Noelle:  Disable "cavlc_mb8x8_mvd.1074" as cold function
Noelle:  Function "x264_macroblock_probe_bskip"
Noelle:  Disable "x264_macroblock_probe_bskip" as cold function
Noelle:  Function "x264_mb_analyse_inter_direct"
Noelle:  Disable "x264_mb_analyse_inter_direct" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x16"
Noelle:  Disable "x264_mb_analyse_inter_b16x16" as cold function
Noelle:  Function "x264_mb_analyse_b_rd"
Noelle:  Disable "x264_mb_analyse_b_rd" as cold function
Noelle:  Function "SigIntHandler"
Noelle:  Disable "SigIntHandler" as cold function
Noelle:  Function "parse_qpfile"
Noelle:  Disable "parse_qpfile" as cold function
Noelle:  Function "x264_psnr"
Noelle:  Disable "x264_psnr" as cold function
Noelle:  Function "sub4x4_dct"
Noelle:  Disable "sub4x4_dct" as cold function
Noelle:  Function "add4x4_idct"
Noelle:  Disable "add4x4_idct" as cold function
Noelle:  Function "sub8x8_dct"
Noelle:  Disable "sub8x8_dct" as cold function
Noelle:  Function "add8x8_idct"
Noelle:  Disable "add8x8_idct" as cold function
Noelle:  Function "sub16x16_dct"
Noelle:  Disable "sub16x16_dct" as cold function
Noelle:  Function "add16x16_idct"
Noelle:  Disable "add16x16_idct" as cold function
Noelle:  Function "sub8x8_dct8"
Noelle:  Disable "sub8x8_dct8" as cold function
Noelle:  Function "add8x8_idct8"
Noelle:  Disable "add8x8_idct8" as cold function
Noelle:  Function "sub16x16_dct8"
Noelle:  Disable "sub16x16_dct8" as cold function
Noelle:  Function "add16x16_idct8"
Noelle:  Disable "add16x16_idct8" as cold function
Noelle:  Function "dct4x4dc"
Noelle:  Disable "dct4x4dc" as cold function
Noelle:  Function "idct4x4dc"
Noelle:  Disable "idct4x4dc" as cold function
Noelle:  Function "x264_clip_uint8.729"
Noelle:  Disable "x264_clip_uint8.729" as cold function
Noelle:  Function "pixel_sub_wxh"
Noelle:  Disable "pixel_sub_wxh" as cold function
Noelle:  Function "x264_pixel_sad_16x16"
Noelle:  Disable "x264_pixel_sad_16x16" as cold function
Noelle:  Function "update_predictor"
Noelle:  Disable "update_predictor" as cold function
Noelle:  Function "x264_quant_dc_trellis"
Noelle:  Disable "x264_quant_dc_trellis" as cold function
Noelle:  Function "quant_trellis_cabac"
Noelle:  Disable "quant_trellis_cabac" as cold function
Noelle:  Function "x264_cabac_size_decision_noup2"
Noelle:  Disable "x264_cabac_size_decision_noup2" as cold function
Noelle:  Function "x264_quant_8x8_trellis"
Noelle:  Disable "x264_quant_8x8_trellis" as cold function
Noelle:  Function "x264_mb_mc_8x8"
Noelle:  Disable "x264_mb_mc_8x8" as cold function
Noelle:  Function "x264_mb_mc_direct8x8"
Noelle:  Disable "x264_mb_mc_direct8x8" as cold function
Noelle:  Function "x264_mb_mc_01xywh"
Noelle:  Disable "x264_mb_mc_01xywh" as cold function
Noelle:  Function "x264_mb_mc_1xywh"
Noelle:  Disable "x264_mb_mc_1xywh" as cold function
Noelle:  Function "x264_adaptive_quant"
Noelle:  Disable "x264_adaptive_quant" as cold function
Noelle:  Function "x264_macroblock_write_cavlc"
Noelle:  Disable "x264_macroblock_write_cavlc" as cold function
Noelle:  Function "row_bits_so_far"
Noelle:  Disable "row_bits_so_far" as cold function
Noelle:  Function "x264_ratecontrol_set_estimated_size"
Noelle:  Disable "x264_ratecontrol_set_estimated_size" as cold function
Noelle:  Function "x264_pixel_sad_16x8"
Noelle:  Disable "x264_pixel_sad_16x8" as cold function
Noelle:  Function "predict_row_size_sum"
Noelle:  Disable "predict_row_size_sum" as cold function
Noelle:  Function "predict_row_size"
Noelle:  Disable "predict_row_size" as cold function
Noelle:  Function "predict_size"
Noelle:  Disable "predict_size" as cold function
Noelle:  Function "bs_pos.1063"
Noelle:  Disable "bs_pos.1063" as cold function
Noelle:  Function "zigzag_sub_4x4_frame"
Noelle:  Disable "zigzag_sub_4x4_frame" as cold function
Noelle:  Function "zigzag_interleave_8x8_cavlc"
Noelle:  Disable "zigzag_interleave_8x8_cavlc" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4"
Noelle:  Disable "x264_pixel_satd_x4_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8"
Noelle:  Disable "x264_pixel_satd_x4_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4"
Noelle:  Disable "x264_pixel_satd_x4_4x4" as cold function
Noelle:  Function "x264_macroblock_bipred_init"
Noelle:  Disable "x264_macroblock_bipred_init" as cold function
Noelle:  Function "bs_rbsp_trailing"
Noelle:  Disable "bs_rbsp_trailing" as cold function
Noelle:  Function "x264_mb_transform_8x8_allowed.1083"
Noelle:  Disable "x264_mb_transform_8x8_allowed.1083" as cold function
Noelle:  Function "cavlc_qp_delta.1084"
Noelle:  Disable "cavlc_qp_delta.1084" as cold function
Noelle:  Function "block_residual_write_cavlc.1085"
Noelle:  Disable "block_residual_write_cavlc.1085" as cold function
Noelle:  Function "array_non_zero_count_mmx.1086"
Noelle:  Disable "array_non_zero_count_mmx.1086" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc.1087"
Noelle:  Disable "x264_macroblock_luma_write_cavlc.1087" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code.1088"
Noelle:  Disable "x264_mb_predict_non_zero_code.1088" as cold function
Noelle:  Function "bs_write_vlc.1090"
Noelle:  Disable "bs_write_vlc.1090" as cold function
Noelle:  Function "cavlc_mb_mvd.1093"
Noelle:  Disable "cavlc_mb_mvd.1093" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8"
Noelle:  Disable "x264_pixel_satd_x4_8x8" as cold function
Noelle:  Function "x264_frame_unshift"
Noelle:  Disable "x264_frame_unshift" as cold function
Noelle:  Function "x264_hpel_filter_mmxext"
Noelle:  Disable "x264_hpel_filter_mmxext" as cold function
Noelle:  Function "x264_hpel_filter_sse2_amd"
Noelle:  Disable "x264_hpel_filter_sse2_amd" as cold function
Noelle:  Function "x264_pixel_satd_8x4"
Noelle:  Disable "x264_pixel_satd_8x4" as cold function
Noelle:  Function "x264_pixel_sad_8x16"
Noelle:  Disable "x264_pixel_sad_8x16" as cold function
Noelle:  Function "x264_pixel_sad_8x8"
Noelle:  Disable "x264_pixel_sad_8x8" as cold function
Noelle:  Function "x264_pixel_sad_8x4"
Noelle:  Disable "x264_pixel_sad_8x4" as cold function
Noelle:  Function "x264_pixel_sad_4x8"
Noelle:  Disable "x264_pixel_sad_4x8" as cold function
Noelle:  Function "x264_pixel_sad_4x4"
Noelle:  Disable "x264_pixel_sad_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x16"
Noelle:  Disable "x264_pixel_sad_x3_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_16x8"
Noelle:  Disable "x264_pixel_sad_x3_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x16"
Noelle:  Disable "x264_pixel_sad_x3_8x16" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x8"
Noelle:  Disable "x264_pixel_sad_x3_8x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_8x4"
Noelle:  Disable "x264_pixel_sad_x3_8x4" as cold function
Noelle:  Function "x264_pixel_satd_16x8"
Noelle:  Disable "x264_pixel_satd_16x8" as cold function
Noelle:  Function "x264_pixel_satd_8x16"
Noelle:  Disable "x264_pixel_satd_8x16" as cold function
Noelle:  Function "x264_pixel_satd_8x8"
Noelle:  Disable "x264_pixel_satd_8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x8"
Noelle:  Disable "x264_mb_analyse_inter_b8x8" as cold function
Noelle:  Function "x264_pixel_satd_4x8"
Noelle:  Disable "x264_pixel_satd_4x8" as cold function
Noelle:  Function "x264_pixel_satd_4x4"
Noelle:  Disable "x264_pixel_satd_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16"
Noelle:  Disable "x264_pixel_satd_x3_16x16" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8"
Noelle:  Disable "x264_pixel_satd_x3_16x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16"
Noelle:  Disable "x264_pixel_satd_x3_8x16" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8"
Noelle:  Disable "x264_pixel_satd_x3_8x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4"
Noelle:  Disable "x264_pixel_satd_x3_8x4" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8"
Noelle:  Disable "x264_pixel_satd_x3_4x8" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4"
Noelle:  Disable "x264_pixel_satd_x3_4x4" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16"
Noelle:  Disable "x264_pixel_satd_x4_16x16" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8"
Noelle:  Disable "x264_pixel_satd_x4_16x8" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16"
Noelle:  Disable "x264_pixel_satd_x4_8x16" as cold function
Noelle:  Function "cavlc_intra4x4_pred_size"
Noelle:  Disable "cavlc_intra4x4_pred_size" as cold function
Noelle:  Function "x264_macroblock_cache_rect4"
Noelle:  Disable "x264_macroblock_cache_rect4" as cold function
Noelle:  Function "x264_macroblock_cache_intra8x8_pred"
Noelle:  Disable "x264_macroblock_cache_intra8x8_pred" as cold function
Noelle:  Function "x264_macroblock_cache_mv.841"
Noelle:  Disable "x264_macroblock_cache_mv.841" as cold function
Noelle:  Function "x264_macroblock_cache_mvd.842"
Noelle:  Disable "x264_macroblock_cache_mvd.842" as cold function
Noelle:  Function "x264_macroblock_cache_rect4.843"
Noelle:  Disable "x264_macroblock_cache_rect4.843" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4_chroma"
Noelle:  Disable "x264_mb_analyse_inter_p4x4_chroma" as cold function
Noelle:  Function "x264_rd_cost_i4x4"
Noelle:  Disable "x264_rd_cost_i4x4" as cold function
Noelle:  Function "x264_rd_cost_i8x8"
Noelle:  Disable "x264_rd_cost_i8x8" as cold function
Noelle:  Function "x264_rd_cost_i8x8_chroma"
Noelle:  Disable "x264_rd_cost_i8x8_chroma" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cabac"
Noelle:  Disable "x264_i8x8_chroma_size_cabac" as cold function
Noelle:  Function "x264_i8x8_chroma_size_cavlc"
Noelle:  Disable "x264_i8x8_chroma_size_cavlc" as cold function
Noelle:  Function "x264_partition_i8x8_size_cabac"
Noelle:  Disable "x264_partition_i8x8_size_cabac" as cold function
Noelle:  Function "x264_partition_i8x8_size_cavlc"
Noelle:  Disable "x264_partition_i8x8_size_cavlc" as cold function
Noelle:  Function "pack16to32_mask"
Noelle:  Disable "pack16to32_mask" as cold function
Noelle:  Function "x264_partition_i4x4_size_cabac"
Noelle:  Disable "x264_partition_i4x4_size_cabac" as cold function
Noelle:  Function "x264_partition_i4x4_size_cavlc"
Noelle:  Disable "x264_partition_i4x4_size_cavlc" as cold function
Noelle:  Function "x264_frame_cond_broadcast"
Noelle:  Disable "x264_frame_cond_broadcast" as cold function
Noelle:  Function "x264_pixel_ssd_wxh"
Noelle:  Disable "x264_pixel_ssd_wxh" as cold function
Noelle:  Function "x264_pixel_ssim_wxh"
Noelle:  Disable "x264_pixel_ssim_wxh" as cold function
Noelle:  Function "munge_cavlc_nnz_row"
Noelle:  Disable "munge_cavlc_nnz_row" as cold function
Noelle:  Function "munge_cavlc_nnz"
Noelle:  Disable "munge_cavlc_nnz" as cold function
Noelle:  Function "restore_cavlc_nnz_row"
Noelle:  Disable "restore_cavlc_nnz_row" as cold function
Noelle:  Function "scaling_list_write"
Noelle:  Disable "scaling_list_write" as cold function
Noelle:  Function "endian_fix32.950"
Noelle:  Disable "endian_fix32.950" as cold function
Noelle:  Function "bs_size_se.962"
Noelle:  Disable "bs_size_se.962" as cold function
Noelle:  Function "bs_size_ue_big.963"
Noelle:  Disable "bs_size_ue_big.963" as cold function
Noelle:  Function "x264_pixel_ssd_8x4"
Noelle:  Disable "x264_pixel_ssd_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x8"
Noelle:  Disable "x264_pixel_sad_x3_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x3_4x4"
Noelle:  Disable "x264_pixel_sad_x3_4x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x16"
Noelle:  Disable "x264_pixel_sad_x4_16x16" as cold function
Noelle:  Function "x264_pixel_sad_x4_16x8"
Noelle:  Disable "x264_pixel_sad_x4_16x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x16"
Noelle:  Disable "x264_pixel_sad_x4_8x16" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x8"
Noelle:  Disable "x264_pixel_sad_x4_8x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_8x4"
Noelle:  Disable "x264_pixel_sad_x4_8x4" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x8"
Noelle:  Disable "x264_pixel_sad_x4_4x8" as cold function
Noelle:  Function "x264_pixel_sad_x4_4x4"
Noelle:  Disable "x264_pixel_sad_x4_4x4" as cold function
Noelle:  Function "x264_pixel_ssd_16x16"
Noelle:  Disable "x264_pixel_ssd_16x16" as cold function
Noelle:  Function "x264_pixel_ssd_16x8"
Noelle:  Disable "x264_pixel_ssd_16x8" as cold function
Noelle:  Function "x264_pixel_ssd_8x16"
Noelle:  Disable "x264_pixel_ssd_8x16" as cold function
Noelle:  Function "x264_pixel_ssd_8x8"
Noelle:  Disable "x264_pixel_ssd_8x8" as cold function
Noelle:  Function "x264_encoder_reconfig"
Noelle:  Disable "x264_encoder_reconfig" as cold function
Noelle:  Function "x264_pixel_ssd_4x8"
Noelle:  Disable "x264_pixel_ssd_4x8" as cold function
Noelle:  Function "x264_pixel_ssd_4x4"
Noelle:  Disable "x264_pixel_ssd_4x4" as cold function
Noelle:  Function "x264_pixel_satd_16x16"
Noelle:  Disable "x264_pixel_satd_16x16" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x8"
Noelle:  Disable "x264_mb_cache_mv_b8x8" as cold function
Noelle:  Function "x264_mb_load_mv_direct8x8"
Noelle:  Disable "x264_mb_load_mv_direct8x8" as cold function
Noelle:  Function "x264_macroblock_cache_skip"
Noelle:  Disable "x264_macroblock_cache_skip" as cold function
Noelle:  Function "x264_macroblock_cache_ref"
Noelle:  Disable "x264_macroblock_cache_ref" as cold function
Noelle:  Function "x264_macroblock_cache_rect1"
Noelle:  Disable "x264_macroblock_cache_rect1" as cold function
Noelle:  Function "x264_macroblock_probe_skip"
Noelle:  Disable "x264_macroblock_probe_skip" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_spatial"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_spatial" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16_temporal"
Noelle:  Disable "x264_mb_predict_mv_direct16x16_temporal" as cold function
Noelle:  Function "x264_macroblock_cache_mv"
Noelle:  Disable "x264_macroblock_cache_mv" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_16x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_8x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x4_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x4_4x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x4_mmxext" as cold function
Noelle:  Function "update_vbv_plan"
Noelle:  Disable "update_vbv_plan" as cold function
Noelle:  Function "rate_estimate_qscale"
Noelle:  Disable "rate_estimate_qscale" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition"
Noelle:  Disable "x264_cabac_mb_sub_b_partition" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_16x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_16x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x16_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x16_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x8_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_8x4_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_8x4_mmxext" as cold function
Noelle:  Function "x264_pixel_satd_x3_4x8_mmxext"
Noelle:  Disable "x264_pixel_satd_x3_4x8_mmxext" as cold function
Noelle:  Function "x264_quant_8x8"
Noelle:  Disable "x264_quant_8x8" as cold function
Noelle:  Function "x264_predict_lossless_8x8_chroma"
Noelle:  Disable "x264_predict_lossless_8x8_chroma" as cold function
Noelle:  Function "x264_quant_4x4_trellis"
Noelle:  Disable "x264_quant_4x4_trellis" as cold function
Noelle:  Function "accum_p_qp_update"
Noelle:  Disable "accum_p_qp_update" as cold function
Noelle:  Function "x264_ratecontrol_get_estimated_size"
Noelle:  Disable "x264_ratecontrol_get_estimated_size" as cold function
Noelle:  Function "x264_clip3f.856"
Noelle:  Disable "x264_clip3f.856" as cold function
Noelle:  Function "qscale2bits"
Noelle:  Disable "qscale2bits" as cold function
Noelle:  Function "x264_rc_analyse_slice"
Noelle:  Disable "x264_rc_analyse_slice" as cold function
Noelle:  Function "get_qscale"
Noelle:  Disable "get_qscale" as cold function
Noelle:  Function "clip_qscale"
Noelle:  Disable "clip_qscale" as cold function
Noelle:  Function "x264_predict_lossless_4x4"
Noelle:  Disable "x264_predict_lossless_4x4" as cold function
Noelle:  Function "x264_lowres_context_init"
Noelle:  Disable "x264_lowres_context_init" as cold function
Noelle:  Function "x264_slicetype_frame_cost"
Noelle:  Disable "x264_slicetype_frame_cost" as cold function
Noelle:  Function "x264_slicetype_mb_cost"
Noelle:  Disable "x264_slicetype_mb_cost" as cold function
Noelle:  Function "x264_median_mv_mmxext.824"
Noelle:  Disable "x264_median_mv_mmxext.824" as cold function
Noelle:  Function "x264_ratecontrol_slice_type"
Noelle:  Disable "x264_ratecontrol_slice_type" as cold function
Noelle:  Function "x264_slicetype_analyse"
Noelle:  Disable "x264_slicetype_analyse" as cold function
Noelle:  Function "scenecut"
Noelle:  Disable "scenecut" as cold function
Noelle:  Function "x264_slicetype_path_search"
Noelle:  Disable "x264_slicetype_path_search" as cold function
Noelle:  Function "x264_slicetype_path"
Noelle:  Disable "x264_slicetype_path" as cold function
Noelle:  Function "x264_slicetype_path_cost"
Noelle:  Disable "x264_slicetype_path_cost" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd.1027"
Noelle:  Disable "x264_cabac_mb8x8_mvd.1027" as cold function
Noelle:  Function "x264_mb_analyse_inter_b16x8"
Noelle:  Disable "x264_mb_analyse_inter_b16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_b8x16"
Noelle:  Disable "x264_mb_analyse_inter_b8x16" as cold function
Noelle:  Function "x264_refine_bidir"
Noelle:  Disable "x264_refine_bidir" as cold function
Noelle:  Function "x264_me_refine_bidir_rd"
Noelle:  Disable "x264_me_refine_bidir_rd" as cold function
Noelle:  Function "x264_mb_analyse_transform"
Noelle:  Disable "x264_mb_analyse_transform" as cold function
Noelle:  Function "x264_psy_trellis_init"
Noelle:  Disable "x264_psy_trellis_init" as cold function
Noelle:  Function "x264_me_refine_bidir"
Noelle:  Disable "x264_me_refine_bidir" as cold function
Noelle:  Function "x264_rd_cost_part"
Noelle:  Disable "x264_rd_cost_part" as cold function
Noelle:  Function "endian_fix.1095"
Noelle:  Disable "endian_fix.1095" as cold function
Noelle:  Function "bs_flush.1096"
Noelle:  Disable "bs_flush.1096" as cold function
Noelle:  Function "endian_fix32.1097"
Noelle:  Disable "endian_fix32.1097" as cold function
Noelle:  Function "x264_cabac_mb_transform_size.1018"
Noelle:  Disable "x264_cabac_mb_transform_size.1018" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition.1026"
Noelle:  Disable "x264_cabac_mb_sub_p_partition.1026" as cold function
Noelle:  Function "x264_intra_rd_refine"
Noelle:  Disable "x264_intra_rd_refine" as cold function
Noelle:  Function "x264_cabac_mb_sub_b_partition.1028"
Noelle:  Disable "x264_cabac_mb_sub_b_partition.1028" as cold function
Noelle:  Function "x264_me_refine_bidir_satd"
Noelle:  Disable "x264_me_refine_bidir_satd" as cold function
Noelle:  Function "x264_me_search"
Noelle:  Disable "x264_me_search" as cold function
Noelle:  Function "x264_mb_cache_mv_b8x16"
Noelle:  Disable "x264_mb_cache_mv_b8x16" as cold function
Noelle:  Function "x264_mb_cache_mv_b16x8"
Noelle:  Disable "x264_mb_cache_mv_b16x8" as cold function
Noelle:  Function "x264_realloc"
Noelle:  Disable "x264_realloc" as cold function
Noelle:  Function "x264_predict_lossless_16x16"
Noelle:  Disable "x264_predict_lossless_16x16" as cold function
Noelle:  Function "x264_predict_8x8_filter"
Noelle:  Disable "x264_predict_8x8_filter" as cold function
Noelle:  Function "x264_predict_lossless_8x8"
Noelle:  Disable "x264_predict_lossless_8x8" as cold function
Noelle:  Function "x264_mb_encode_i8x8"
Noelle:  Disable "x264_mb_encode_i8x8" as cold function
Noelle:  Function "array_non_zero_count_mmx"
Noelle:  Disable "array_non_zero_count_mmx" as cold function
Noelle:  Function "parse_zone"
Noelle:  Disable "parse_zone" as cold function
Noelle:  Function "x264_atof"
Noelle:  Disable "x264_atof" as cold function
Noelle:  Function "x264_rd_cost_subpart"
Noelle:  Disable "x264_rd_cost_subpart" as cold function
Noelle:  Function "x264_macroblock_encode_p8x8"
Noelle:  Disable "x264_macroblock_encode_p8x8" as cold function
Noelle:  Function "x264_partition_size_cabac"
Noelle:  Disable "x264_partition_size_cabac" as cold function
Noelle:  Function "x264_partition_size_cavlc"
Noelle:  Disable "x264_partition_size_cavlc" as cold function
Noelle:  Function "cavlc_mb8x8_mvd"
Noelle:  Disable "cavlc_mb8x8_mvd" as cold function
Noelle:  Function "cavlc_mb_mvd"
Noelle:  Disable "cavlc_mb_mvd" as cold function
Noelle:  Function "x264_macroblock_luma_write_cavlc"
Noelle:  Disable "x264_macroblock_luma_write_cavlc" as cold function
Noelle:  Function "block_residual_write_cavlc"
Noelle:  Disable "block_residual_write_cavlc" as cold function
Noelle:  Function "x264_mb_predict_non_zero_code"
Noelle:  Disable "x264_mb_predict_non_zero_code" as cold function
Noelle:  Function "bs_write_vlc"
Noelle:  Disable "bs_write_vlc" as cold function
Noelle:  Function "x264_cabac_mb8x8_mvd"
Noelle:  Disable "x264_cabac_mb8x8_mvd" as cold function
Noelle:  Function "array_non_zero_int_mmx"
Noelle:  Disable "array_non_zero_int_mmx" as cold function
Noelle:  Function "array_non_zero_int_c"
Noelle:  Disable "array_non_zero_int_c" as cold function
Noelle:  Function "x264_macroblock_encode_p4x4"
Noelle:  Disable "x264_macroblock_encode_p4x4" as cold function
Noelle:  Function "x264_subpartition_size_cabac"
Noelle:  Disable "x264_subpartition_size_cabac" as cold function
Noelle:  Function "x264_subpartition_size_cavlc"
Noelle:  Disable "x264_subpartition_size_cavlc" as cold function
Noelle:  Function "x264_macroblock_size_cavlc"
Noelle:  Disable "x264_macroblock_size_cavlc" as cold function
Noelle:  Function "cavlc_qp_delta"
Noelle:  Disable "cavlc_qp_delta" as cold function
Noelle:  Function "x264_cabac_mb_transform_size"
Noelle:  Disable "x264_cabac_mb_transform_size" as cold function
Noelle:  Function "x264_cabac_mb_sub_p_partition"
Noelle:  Disable "x264_cabac_mb_sub_p_partition" as cold function
Noelle:  Function "x264_slurp_file"
Noelle:  Disable "x264_slurp_file" as cold function
Noelle:  Function "x264_macroblock_probe_pskip"
Noelle:  Disable "x264_macroblock_probe_pskip" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8_mixed_ref"
Noelle:  Disable "x264_mb_analyse_inter_p8x8_mixed_ref" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x8"
Noelle:  Disable "x264_mb_analyse_inter_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x4"
Noelle:  Disable "x264_mb_analyse_inter_p4x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x4"
Noelle:  Disable "x264_mb_analyse_inter_p8x4" as cold function
Noelle:  Function "x264_mb_analyse_inter_p4x8"
Noelle:  Disable "x264_mb_analyse_inter_p4x8" as cold function
Noelle:  Function "x264_mb_cache_mv_p8x8"
Noelle:  Disable "x264_mb_cache_mv_p8x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p16x8"
Noelle:  Disable "x264_mb_analyse_inter_p16x8" as cold function
Noelle:  Function "x264_mb_analyse_inter_p8x16"
Noelle:  Disable "x264_mb_analyse_inter_p8x16" as cold function
Noelle:  Function "x264_me_refine_qpel"
Noelle:  Disable "x264_me_refine_qpel" as cold function
Noelle:  Function "x264_me_refine_qpel_rd"
Noelle:  Disable "x264_me_refine_qpel_rd" as cold function
Noelle:  Function "x264_mb_predict_mv_direct16x16"
Noelle:  Disable "x264_mb_predict_mv_direct16x16" as cold function
Noelle:  Function "init_pass2"
Noelle:  Disable "init_pass2" as cold function
Noelle:  Function "get_diff_limited_q"
Noelle:  Disable "get_diff_limited_q" as cold function
Noelle:  Function "vbv_pass2"
Noelle:  Disable "vbv_pass2" as cold function
Noelle:  Function "count_expected_bits"
Noelle:  Disable "count_expected_bits" as cold function
Noelle:  Function "find_underflow"
Noelle:  Disable "find_underflow" as cold function
Noelle:  Function "fix_underflow"
Noelle:  Disable "fix_underflow" as cold function
Parallelizer:    There are 67 loops in the program we are going to consider
Parallelizer: Exit
noelle-meta-clean parallelized_unoptimized.bc parallelized_unoptimized.bc
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CleanMetadata.so -CleanMetadata -clean-loop-metadata=true -clean-prof-metadata=true -clean-pdg-metadata=true parallelized_unoptimized.bc -o parallelized_unoptimized.bc
noelle/core/Clean Loop Metadata
noelle/core/Clean PDG Metadata
noelle/core/Clean profiler metadata
opt --strip-named-metadata parallelized_unoptimized.bc -o parallelized_unoptimized.bc
clang -O3 -c -emit-llvm parallelized_unoptimized.bc -o baseline_parallelized.bc
clang -O3 -c -emit-llvm baseline_parallelized.bc -o baseline_parallelized.bc
cp baseline_parallelized.bc x264.bc
make[1]: Leaving directory '/nfs-scratch/simonec/parallelism/parallelization/Gyms/0/all_benchmark_suites/build/PARSEC3/benchmarks/x264'
