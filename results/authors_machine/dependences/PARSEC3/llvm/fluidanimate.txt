noelle-load -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGStats.so -PDGStats baseline_with_metadata_llvm.bc -disable-output
opt -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSvf.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libCudd.so -stat=false -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libSCAFUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/libMemoryAnalysisModules.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/AllocAA.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TalkDown.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CallGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDG.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MemoryCloningAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Architecture.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/BasicUtilities.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/TypesManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/ConstantsManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Dominators.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Task.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/DataFlow.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/HotProfiler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopStructure.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopEnvironment.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Forest.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Invariants.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/InductionVariables.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopCarriedDependencies.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopSCCDAGAttributes.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopContent.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopNestingGraph.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Scheduler.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/OutlinerPass.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/MetadataManager.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/LoopTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGAnalysis.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/CFGTransformer.so -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/Noelle.so -disable-basicaa -globals-aa -cfl-steens-aa -tbaa -scev-aa -cfl-anders-aa --objc-arc-aa -basic-loop-aa -scev-loop-aa -auto-restrict-aa -intrinsic-aa -global-malloc-aa -pure-fun-aa -semi-local-fun-aa -phi-maze-aa -no-capture-global-aa -no-capture-src-aa -type-aa -no-escape-fields-aa -acyclic-aa -disjoint-fields-aa -field-malloc-aa -loop-variant-allocation-aa -std-in-out-err-aa -array-of-structures-aa -kill-flow-aa -callsite-depth-combinator-aa -unique-access-paths-aa -llvm-aa-results -scalar-evolution -loops -domtree -postdomtree -noellescaf -noellesvf -load /nfs-scratch/simonec/parallelism/parallelization/Gyms/0/NOELLE/install/lib/PDGStats.so -PDGStats baseline_with_metadata_llvm.bc -disable-output
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca float, align 4, !noelle.pdg.inst.id !23815
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca float, align 4, !noelle.pdg.inst.id !23814
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca float, align 4, !noelle.pdg.inst.id !23813
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca float, align 4, !noelle.pdg.inst.id !23812
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca float, align 4, !noelle.pdg.inst.id !23811
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !23810
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !23809
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !23808
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !23807
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %"class.std::basic_ifstream", align 8, !noelle.pdg.inst.id !23802
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !23801
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !23804
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !23803
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !23805
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !23806
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca float, align 4, !noelle.pdg.inst.id !23815
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca float, align 4, !noelle.pdg.inst.id !23814
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca float, align 4, !noelle.pdg.inst.id !23813
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca float, align 4, !noelle.pdg.inst.id !23812
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca float, align 4, !noelle.pdg.inst.id !23811
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !23810
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !23809
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !23808
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !23807
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %"class.std::basic_ifstream", align 8, !noelle.pdg.inst.id !23802
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !23801
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !23804
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !23803
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !23805
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !23806
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca float, align 4, !noelle.pdg.inst.id !23815
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca float, align 4, !noelle.pdg.inst.id !23814
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca float, align 4, !noelle.pdg.inst.id !23813
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca float, align 4, !noelle.pdg.inst.id !23812
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca float, align 4, !noelle.pdg.inst.id !23811
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !23810
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !23809
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !23808
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !23807
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %"class.std::basic_ifstream", align 8, !noelle.pdg.inst.id !23802
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !23801
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !23801 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !23804
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !23803
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !23805
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !23806
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca float, align 4, !noelle.pdg.inst.id !23815
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca float, align 4, !noelle.pdg.inst.id !23814
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca float, align 4, !noelle.pdg.inst.id !23813
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca float, align 4, !noelle.pdg.inst.id !23812
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca float, align 4, !noelle.pdg.inst.id !23811
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !23810
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !23809
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !23808
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !23807
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %"class.std::basic_ifstream", align 8, !noelle.pdg.inst.id !23802
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !23801
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca i32, align 4, !noelle.pdg.inst.id !23804
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !23803
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !23805
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !23806
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !2699
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca float, align 4, !noelle.pdg.inst.id !2699 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !2698
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca float, align 4, !noelle.pdg.inst.id !2698 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !2697
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !2697 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !2696
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !2696 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca float, align 4, !noelle.pdg.inst.id !2691
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %3 = alloca float, align 4, !noelle.pdg.inst.id !2691 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %"class.std::basic_ofstream", align 8, !noelle.pdg.inst.id !2690
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !2692
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca float, align 4, !noelle.pdg.inst.id !2692 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca float, align 4, !noelle.pdg.inst.id !2693
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %5 = alloca float, align 4, !noelle.pdg.inst.id !2693 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca float, align 4, !noelle.pdg.inst.id !2694
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca float, align 4, !noelle.pdg.inst.id !2694 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca float, align 4, !noelle.pdg.inst.id !2695
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %7 = alloca float, align 4, !noelle.pdg.inst.id !2695 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !2699
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !2698
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !2697
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !2696
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca float, align 4, !noelle.pdg.inst.id !2691
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %"class.std::basic_ofstream", align 8, !noelle.pdg.inst.id !2690
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !2692
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca float, align 4, !noelle.pdg.inst.id !2693
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca float, align 4, !noelle.pdg.inst.id !2694
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca float, align 4, !noelle.pdg.inst.id !2695
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca float, align 4, !noelle.pdg.inst.id !2699
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca float, align 4, !noelle.pdg.inst.id !2698
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !2697
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !2696
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca float, align 4, !noelle.pdg.inst.id !2691
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %"class.std::basic_ofstream", align 8, !noelle.pdg.inst.id !2690
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca float, align 4, !noelle.pdg.inst.id !2692
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca float, align 4, !noelle.pdg.inst.id !2693
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca float, align 4, !noelle.pdg.inst.id !2694
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca float, align 4, !noelle.pdg.inst.id !2695
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !5683
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %1 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !5683 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !5683
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %1 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !5683 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !5683
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !5683
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %21 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8465
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %20 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8464
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %19 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8463
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %18 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8462
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %17 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8461
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8450
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8449
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8448 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca [27 x i32], align 16, !noelle.pdg.inst.id !8447
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8445
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8446 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8451
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca float, align 4, !noelle.pdg.inst.id !8452
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca float, align 4, !noelle.pdg.inst.id !8453
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8454
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8455
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8456
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8457
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8458
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !8459
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !8460
ClonableMemoryObject:   We cannot identify memory accesses to it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3177
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3176
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3175
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3174
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3174 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3173
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3172
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3171
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3171 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3170
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3169
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3169 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3168
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3163
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3163 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3162
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3164
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3165
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3165 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3166
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3167
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3167 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %16 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3177
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %15 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3176
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %14 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3175
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %13 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3174
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %13 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3174 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %12 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3173
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %11 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3172
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3171
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %10 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3171 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %9 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3170
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %8 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3169
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %8 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3169 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %7 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3168
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3163
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %2 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3163 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %1 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3162
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %3 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3164
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %4 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3165
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %4 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3165 can be cloned
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %5 = alloca %class.Vec3, align 4, !noelle.pdg.inst.id !3166
ClonableMemoryObject:   There are RAW memory data dependences between loop iterations
ClonableMemoryObject: Exit
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %6 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3167
ClonableMemoryObject:   It is clonable
ClonableMemoryObject: Exit
MemoryCloningAnalysis:   The stack object   %6 = alloca { <2 x float>, float }, align 8, !noelle.pdg.inst.id !3167 can be cloned
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
ClonableMemoryObject: Start
ClonableMemoryObject:   Object =   %2 = alloca %struct.datablockhdr*, align 8, !noelle.pdg.inst.id !196
ClonableMemoryObject:   There is no need to clone it
ClonableMemoryObject: Exit
MemoryCloningAnalysis: Exit
MemoryCloningAnalysis: Start
MemoryCloningAnalysis: Exit
Number of Nodes: 3545
Number of Edges (a.k.a. dependences): 169035
 Number of control dependences: 9845
 Number of data dependences: 159190
   Number of variable dependences: 10048
   Number of memory dependences: 149142
     Number of memory must dependences: 0
     Number of memory may dependences: 149142
     Number of potential memory dependences: 679823
